#! /usr/bin/env python

import os
import sys

data_dir = "/net/zwicky/dmtpc/data"
do_analysis = True
do_skim = False
analysis_exec = "wr2analysis"
work = "condor_work"

if (len(sys.argv) <4):
  print "condor_submit.py output_dir v3_dir run_list"
  sys.exit(1)

output_dir = sys.argv[1]
v3_dir = sys.argv[2]
run_list = sys.argv[3]


completed = output_dir + "/completed"
failed = output_dir + "/failed"

print "Creating output directories: "
skim_dir = output_dir+'/skim'
condor_out_dir = output_dir+'/condor_out'
condor_log_dir = output_dir+'/condor_log'
condor_err_dir = output_dir+'/condor_err'
pass_dir = output_dir + '/pass'
rates_dir = output_dir + '/rates'

def x(cmd):
  print cmd
  os.system(cmd) 
  
for d in (skim_dir, condor_out_dir, condor_log_dir, condor_err_dir, pass_dir, rates_dir):
  x( 'mkdir -p '+d )
x('touch '+completed) 
x('touch '+failed) 
if do_analysis:
  x("rsync gainMap0.root "+output_dir)
  x("rsync gainMap1.root "+output_dir)


print "Creating jobs directory"
x( 'mkdir -p '+work)

print

print "Generating Condor Executable"
exec_name = work+"/condor_exec"
f = open(exec_name,'w')

f.write("#! /bin/sh\n\n")
f.write("# This script is autogenerated by setup_condor.py\n")
    
f.write("export success=0;\n")
f.write("export run=`printf \"%05d\" $1`;\n")
if do_skim:
  f.write("export input_dir="+data_dir+";\n")
  f.write("export datafile='dmtpc_run'$run'.root';\n")
f.write("export skimfile='dmtpc_run'$run'skim.root';\n")
if do_skim:
  f.write("export biasfile='dmtpc_run'$run'bias.root';\n")
  f.write("export input_datafile=$input_dir/$datafile;\n")
  f.write("export keysfile=keys$1.txt;\n")
  f.write("export filesfile=files$1.txt;\n")
  f.write("export cleanskim="+v3_dir+"/bin/cleanSkim;\n")

if do_analysis:
  f.write("export analysis="+v3_dir+"/bin/"+analysis_exec+";\n")
  f.write("export passfile="+pass_dir+"/pass$1.root;\n")
#  f.write("export passlockfile="+output_dir+"/passlock;\n")
  f.write("export ratesfile="+rates_dir+"/rates$1.root;\n")
#  f.write("export rateslockfile="+output_dir+"/rateslock;\n")

f.write("export LD_LIBRARY_PATH="+v3_dir+"/../../MaxCam:$LD_LIBRARY_PATH;\n")
f.write("\n")
f.write("echo '\tlocal scratch:   ' $_CONDOR_SCRACH_DIR;\n")
f.write("echo '\tld_library_path: ' $LD_LIBRARY_PATH;\n")
if do_skim:
  f.write("echo '\tinput dir:       ' $input_dir;\n")
  f.write("echo '\tdatafile:        ' $datafile;\n")
  f.write("echo '\tinput datafile:  ' $input_datafile;\n")
f.write("echo '\tskimfile:        ' $skimfile;\n")
if do_skim:
  f.write("echo '\tbiasfile:        ' $biasfile;\n")
  f.write("echo '\tkeysfile:        ' $keysfile;\n")
  f.write("echo '\tfilesfile:       ' $filesfile;\n")
  f.write("echo '\tcleanskim:       ' $cleanskim;\n")

if do_analysis:
  f.write("echo '\tanalysis exec:   ' $analysis;\n")
  f.write("echo '\tpassfile:        ' $passfile;\n")
#  f.write("echo '\tpasslockfile:    ' $passlockfile;\n")
  f.write("echo '\tratesfile:       ' $ratesfile;\n")
#  f.write("echo '\trateslockfile:   ' $rateslockfile;\n")

if do_skim:
  f.write("\n")
  f.write("rm -f $keysfile;\n")
  f.write("rm -f $filesfile;\n")
  f.write("\n")
  f.write("echo Transferring Data File...;\n")
  f.write("rsync $input_datafile $datafile;\n")
  f.write("mkdir ./skim$1;\n")
  f.write("\n"); 
  f.write("echo $datafile > $filesfile;\n")
  f.write("touch $keysfile;\n")
  f.write("export skimdir='./skim'$1'/';\n" )
  f.write("echo $cleanskim $filesfile $keysfile $skimdir;\n")
  f.write("$cleanskim $filesfile $keysfile $skimdir;\n")
  f.write("success=`expr $? + $success`;\n")
  f.write("wait;\n")

if do_analysis:
  #  f.write("echo $analysis $skimdir/$skimfile $passfile $ratesfile $passlockfile $rateslockfile;\n")
  #f.write("$analysis $skimdir/$skimfile $passfile $ratesfile $passlockfile $rateslockfile;\n")
  if do_skim:
    f.write("echo $analysis $skimdir/$skimfile $passfile $ratesfile ;\n")
    f.write("$analysis $skimdir/$skimfile $passfile $ratesfile ;\n")
  else:
    f.write("echo $analysis "+skim_dir+"/$skimfile $passfile $ratesfile ;\n")
    f.write("$analysis "+skim_dir+"/$skimfile $passfile $ratesfile ;\n")

  f.write("success=`expr $? + $success`;\n")
  f.write("wait;\n") 

if do_skim:
  f.write("mv ./skim$1/$skimfile "+skim_dir+";\n")
  f.write("mv ./skim$1/$biasfile "+skim_dir+";\n")

  f.write("rm -f $filesfile;\n");
  f.write("rm -f $keysfile;\n");
  f.write("rm -f $datafile;\n");
  f.write("rmdir ./skim$1;\n"); 
f.write("if [ $success -eq 0 ]; then echo $1 >> "+completed+"; else echo $1 >> "+failed+"; fi; \n")
f.write("echo \"Processing on run $1 Done\";\n")
f.close()

print "Wrote "+exec_name
x('chmod +x '+exec_name)
print
print "Reading run_list"
f = open(run_list)
for line in f.readlines():
   run = line.strip()
   if (len(run)==0): continue
   print "Writing job file for run " + run
   spec = work+"/condor_spec_"+run
   job = open(spec,'w')
   job.write("Universe = vanilla\n")
   job.write("Executable = "+exec_name+"\n")
   job.write("Requirements = Machine !=\"qweak.lns.mit.edu\"\n"); 
   job.write("Arguments = "+run+"\n"); 
   job.write("GetEnv = True\n")
   job.write("Initialdir = "+output_dir+"\n")
   job.write("Output = "+condor_out_dir+"/"+run+"\n")
   job.write("Error = "+condor_err_dir+"/"+run+"\n")
   job.write("Log = "+condor_log_dir+"/"+run+"\n")
   job.write("CoreSize = 0\n" )
   job.write("Notification = Never\n" )
   job.write("Queue\n" )
   job.close()

   
   do_queue = True
   #Check if the run has been completed already:  
   c = open(completed,'r')
   for l in c.readlines():
     if l.strip() == run: 
       do_queue = False
       break; 

   if not do_queue:
     print "NOT QUEUING run " + run + " because it is listed as completed. Delete "+completed+" if you want to force this run" 

   else:
     print "Queueing run "+run
     x("condor_submit "+spec)
   c.close()


f.close()




