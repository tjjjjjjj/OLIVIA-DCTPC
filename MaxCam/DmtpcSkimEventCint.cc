//
// File generated by rootcint at Tue Aug 16 18:40:00 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME DmtpcSkimEventCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "DmtpcSkimEventCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void DmtpcSkimEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DmtpcSkimEvent(void *p = 0);
   static void *newArray_DmtpcSkimEvent(Long_t size, void *p);
   static void delete_DmtpcSkimEvent(void *p);
   static void deleteArray_DmtpcSkimEvent(void *p);
   static void destruct_DmtpcSkimEvent(void *p);
   static void streamer_DmtpcSkimEvent(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::DmtpcSkimEvent*)
   {
      ::DmtpcSkimEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DmtpcSkimEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DmtpcSkimEvent", ::DmtpcSkimEvent::Class_Version(), "./DmtpcSkimEvent.hh", 105,
                  typeid(::DmtpcSkimEvent), DefineBehavior(ptr, ptr),
                  &::DmtpcSkimEvent::Dictionary, isa_proxy, 0,
                  sizeof(::DmtpcSkimEvent) );
      instance.SetNew(&new_DmtpcSkimEvent);
      instance.SetNewArray(&newArray_DmtpcSkimEvent);
      instance.SetDelete(&delete_DmtpcSkimEvent);
      instance.SetDeleteArray(&deleteArray_DmtpcSkimEvent);
      instance.SetDestructor(&destruct_DmtpcSkimEvent);
      instance.SetStreamerFunc(&streamer_DmtpcSkimEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::DmtpcSkimEvent*)
   {
      return GenerateInitInstanceLocal((::DmtpcSkimEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DmtpcSkimEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *DmtpcSkimEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *DmtpcSkimEvent::Class_Name()
{
   return "DmtpcSkimEvent";
}

//______________________________________________________________________________
const char *DmtpcSkimEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DmtpcSkimEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DmtpcSkimEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DmtpcSkimEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DmtpcSkimEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DmtpcSkimEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DmtpcSkimEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DmtpcSkimEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void DmtpcSkimEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class DmtpcSkimEvent.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> _eventNumber;
      R__b >> _index;
      R__b >> _runNumber;
      R__b >> _ncamera;
      R__b >> _stitched;
      R__b >> _s3;
      R__b >> _s4;
      {
         vector<vector<int> > &R__stl =  _burnin_base;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_burnin_base streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<int> > &R__stl =  _burnin_this_index;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_burnin_this_index streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<int> > &R__stl =  _nburnin;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_nburnin streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _theta;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_theta streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _range;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_range streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _diffusedRange;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_diffusedRange streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _phi;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_phi streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _majoraxis;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_majoraxis streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _minoraxis;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_minoraxis streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _E;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_E streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _EGainMap;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_EGainMap streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _r;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_r streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _x;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_x streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _y;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_y streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<int> > &R__stl =  _xbegin;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_xbegin streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<int> > &R__stl =  _xend;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_xend streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<int> > &R__stl =  _ybegin;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_ybegin streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<int> > &R__stl =  _yend;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_yend streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _skewness;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_skewness streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<bool> > &R__stl =  _edge;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<bool,allocator<bool> >));
         if (R__tcl1==0) {
            Error("_edge streamer","Missing the TClass object for vector<bool,allocator<bool> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<bool,allocator<bool> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _cluster_mean;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_cluster_mean streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _cluster_rms;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_cluster_rms streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<int> > &R__stl =  _neighbors;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_neighbors streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _maxpixel;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_maxpixel streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _cygnus_angle;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_cygnus_angle streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _energy_density;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_energy_density streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<int> > &R__stl =  _npixel;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_npixel streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<int> > &R__stl =  _npixel_red;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_npixel_red streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<vector<double> > > &R__stl =  _moments;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("_moments streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<vector<double> > > &R__stl =  _transverse_moments;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("_transverse_moments streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _ra;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_ra streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _dec;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_dec streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _glat;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_glat streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _glon;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_glon streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _inactive;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_inactive streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<double> > &R__stl =  _crossing;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_crossing streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<double,allocator<double> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  _ntracks;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<bool> &R__stl =  _spark;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            bool R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  _lastspark;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  _integral;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  _image_mean;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  _pixels_killed;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  _image_rms;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  _nsparkref;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  _sparkref_base;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TString> &R__stl =  _cameraSerialNumber;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  _timenow;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      delete [] _burnin;
      _burnin = new UInt_t[_s3];
      R__b.ReadFastArray(_burnin,_s3);
      delete [] _sparkref;
      _sparkref = new UInt_t[_s4];
      R__b.ReadFastArray(_sparkref,_s4);
      R__b >> _trigger_groups;
      R__b >> _waveform_vectors;
      R__b >> _clusters;
      R__b.CheckByteCount(R__s, R__c, DmtpcSkimEvent::IsA());
   } else {
      R__c = R__b.WriteVersion(DmtpcSkimEvent::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << _eventNumber;
      R__b << _index;
      R__b << _runNumber;
      R__b << _ncamera;
      R__b << _stitched;
      R__b << _s3;
      R__b << _s4;
      {
         vector<vector<int> > &R__stl =  _burnin_base;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_burnin_base streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<int> > &R__stl =  _burnin_this_index;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_burnin_this_index streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<int> > &R__stl =  _nburnin;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_nburnin streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _theta;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_theta streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _range;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_range streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _diffusedRange;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_diffusedRange streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _phi;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_phi streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _majoraxis;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_majoraxis streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _minoraxis;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_minoraxis streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _E;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_E streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _EGainMap;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_EGainMap streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _r;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_r streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _x;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_x streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _y;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_y streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<int> > &R__stl =  _xbegin;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_xbegin streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<int> > &R__stl =  _xend;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_xend streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<int> > &R__stl =  _ybegin;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_ybegin streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<int> > &R__stl =  _yend;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_yend streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _skewness;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_skewness streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<bool> > &R__stl =  _edge;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<bool,allocator<bool> >));
         if (R__tcl1==0) {
            Error("_edge streamer","Missing the TClass object for vector<bool,allocator<bool> >!");
            return;
         }
            vector<vector<bool> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<bool,allocator<bool> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _cluster_mean;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_cluster_mean streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _cluster_rms;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_cluster_rms streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<int> > &R__stl =  _neighbors;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_neighbors streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _maxpixel;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_maxpixel streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _cygnus_angle;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_cygnus_angle streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _energy_density;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_energy_density streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<int> > &R__stl =  _npixel;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_npixel streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<int> > &R__stl =  _npixel_red;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_npixel_red streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<vector<double> > > &R__stl =  _moments;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("_moments streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
            vector<vector<vector<double> > >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<vector<double> > > &R__stl =  _transverse_moments;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >));
         if (R__tcl1==0) {
            Error("_transverse_moments streamer","Missing the TClass object for vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >!");
            return;
         }
            vector<vector<vector<double> > >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _ra;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_ra streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _dec;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_dec streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _glat;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_glat streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _glon;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_glon streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _inactive;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_inactive streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<double> > &R__stl =  _crossing;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<double,allocator<double> >));
         if (R__tcl1==0) {
            Error("_crossing streamer","Missing the TClass object for vector<double,allocator<double> >!");
            return;
         }
            vector<vector<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<double,allocator<double> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<int> &R__stl =  _ntracks;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<bool> &R__stl =  _spark;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<bool>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  _lastspark;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  _integral;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  _image_mean;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  _pixels_killed;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  _image_rms;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  _nsparkref;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  _sparkref_base;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TString> &R__stl =  _cameraSerialNumber;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TString>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)(*R__k)).Streamer(R__b);
            }
         }
      }
      {
         vector<double> &R__stl =  _timenow;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.WriteFastArray(_burnin,_s3);
      R__b.WriteFastArray(_sparkref,_s4);
      R__b << _trigger_groups;
      R__b << _waveform_vectors;
      R__b << _clusters;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void DmtpcSkimEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DmtpcSkimEvent.
      TClass *R__cl = ::DmtpcSkimEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_eventNumber", &_eventNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_index", &_index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_runNumber", &_runNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ncamera", &_ncamera);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_stitched", &_stitched);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_s3", &_s3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_s4", &_s4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_burnin_base", (void*)&_burnin_base);
      R__insp.InspectMember("vector<vector<int> >", (void*)&_burnin_base, "_burnin_base.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_burnin_this_index", (void*)&_burnin_this_index);
      R__insp.InspectMember("vector<vector<int> >", (void*)&_burnin_this_index, "_burnin_this_index.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nburnin", (void*)&_nburnin);
      R__insp.InspectMember("vector<vector<int> >", (void*)&_nburnin, "_nburnin.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_theta", (void*)&_theta);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_theta, "_theta.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_range", (void*)&_range);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_range, "_range.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_diffusedRange", (void*)&_diffusedRange);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_diffusedRange, "_diffusedRange.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_phi", (void*)&_phi);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_phi, "_phi.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_majoraxis", (void*)&_majoraxis);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_majoraxis, "_majoraxis.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_minoraxis", (void*)&_minoraxis);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_minoraxis, "_minoraxis.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_E", (void*)&_E);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_E, "_E.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_EGainMap", (void*)&_EGainMap);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_EGainMap, "_EGainMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_r", (void*)&_r);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_r, "_r.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_x", (void*)&_x);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_x, "_x.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_y", (void*)&_y);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_y, "_y.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_xbegin", (void*)&_xbegin);
      R__insp.InspectMember("vector<vector<int> >", (void*)&_xbegin, "_xbegin.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_xend", (void*)&_xend);
      R__insp.InspectMember("vector<vector<int> >", (void*)&_xend, "_xend.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ybegin", (void*)&_ybegin);
      R__insp.InspectMember("vector<vector<int> >", (void*)&_ybegin, "_ybegin.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_yend", (void*)&_yend);
      R__insp.InspectMember("vector<vector<int> >", (void*)&_yend, "_yend.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_skewness", (void*)&_skewness);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_skewness, "_skewness.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_edge", (void*)&_edge);
      R__insp.InspectMember("vector<vector<bool> >", (void*)&_edge, "_edge.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_cluster_mean", (void*)&_cluster_mean);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_cluster_mean, "_cluster_mean.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_cluster_rms", (void*)&_cluster_rms);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_cluster_rms, "_cluster_rms.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_neighbors", (void*)&_neighbors);
      R__insp.InspectMember("vector<vector<int> >", (void*)&_neighbors, "_neighbors.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_maxpixel", (void*)&_maxpixel);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_maxpixel, "_maxpixel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_cygnus_angle", (void*)&_cygnus_angle);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_cygnus_angle, "_cygnus_angle.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_energy_density", (void*)&_energy_density);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_energy_density, "_energy_density.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_npixel", (void*)&_npixel);
      R__insp.InspectMember("vector<vector<int> >", (void*)&_npixel, "_npixel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_npixel_red", (void*)&_npixel_red);
      R__insp.InspectMember("vector<vector<int> >", (void*)&_npixel_red, "_npixel_red.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_moments", (void*)&_moments);
      R__insp.InspectMember("vector<vector<vector<double> > >", (void*)&_moments, "_moments.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_transverse_moments", (void*)&_transverse_moments);
      R__insp.InspectMember("vector<vector<vector<double> > >", (void*)&_transverse_moments, "_transverse_moments.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ra", (void*)&_ra);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_ra, "_ra.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_dec", (void*)&_dec);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_dec, "_dec.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_glat", (void*)&_glat);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_glat, "_glat.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_glon", (void*)&_glon);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_glon, "_glon.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_inactive", (void*)&_inactive);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_inactive, "_inactive.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_crossing", (void*)&_crossing);
      R__insp.InspectMember("vector<vector<double> >", (void*)&_crossing, "_crossing.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ntracks", (void*)&_ntracks);
      R__insp.InspectMember("vector<int>", (void*)&_ntracks, "_ntracks.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_spark", (void*)&_spark);
      R__insp.InspectMember("vector<bool>", (void*)&_spark, "_spark.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_lastspark", (void*)&_lastspark);
      R__insp.InspectMember("vector<int>", (void*)&_lastspark, "_lastspark.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_integral", (void*)&_integral);
      R__insp.InspectMember("vector<double>", (void*)&_integral, "_integral.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_image_mean", (void*)&_image_mean);
      R__insp.InspectMember("vector<double>", (void*)&_image_mean, "_image_mean.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pixels_killed", (void*)&_pixels_killed);
      R__insp.InspectMember("vector<int>", (void*)&_pixels_killed, "_pixels_killed.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_image_rms", (void*)&_image_rms);
      R__insp.InspectMember("vector<double>", (void*)&_image_rms, "_image_rms.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nsparkref", (void*)&_nsparkref);
      R__insp.InspectMember("vector<int>", (void*)&_nsparkref, "_nsparkref.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_sparkref_base", (void*)&_sparkref_base);
      R__insp.InspectMember("vector<int>", (void*)&_sparkref_base, "_sparkref_base.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_cameraSerialNumber", (void*)&_cameraSerialNumber);
      R__insp.InspectMember("vector<TString>", (void*)&_cameraSerialNumber, "_cameraSerialNumber.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_timenow", (void*)&_timenow);
      R__insp.InspectMember("vector<double>", (void*)&_timenow, "_timenow.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_burnin", &_burnin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_sparkref", &_sparkref);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_trigger_groups", &_trigger_groups);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_waveform_vectors", &_waveform_vectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_clusters", &_clusters);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_DmtpcSkimEvent(void *p) {
      return  p ? new(p) ::DmtpcSkimEvent : new ::DmtpcSkimEvent;
   }
   static void *newArray_DmtpcSkimEvent(Long_t nElements, void *p) {
      return p ? new(p) ::DmtpcSkimEvent[nElements] : new ::DmtpcSkimEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_DmtpcSkimEvent(void *p) {
      delete ((::DmtpcSkimEvent*)p);
   }
   static void deleteArray_DmtpcSkimEvent(void *p) {
      delete [] ((::DmtpcSkimEvent*)p);
   }
   static void destruct_DmtpcSkimEvent(void *p) {
      typedef ::DmtpcSkimEvent current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_DmtpcSkimEvent(TBuffer &buf, void *obj) {
      ((::DmtpcSkimEvent*)obj)->::DmtpcSkimEvent::Streamer(buf);
   }
} // end of namespace ROOT for class ::DmtpcSkimEvent

namespace ROOT {
   void vectorlETStringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETStringgR_Dictionary();
   static void *new_vectorlETStringgR(void *p = 0);
   static void *newArray_vectorlETStringgR(Long_t size, void *p);
   static void delete_vectorlETStringgR(void *p);
   static void deleteArray_vectorlETStringgR(void *p);
   static void destruct_vectorlETStringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TString>*)
   {
      vector<TString> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TString>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TString>", -2, "prec_stl/vector", 49,
                  typeid(vector<TString>), DefineBehavior(ptr, ptr),
                  0, &vectorlETStringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TString>) );
      instance.SetNew(&new_vectorlETStringgR);
      instance.SetNewArray(&newArray_vectorlETStringgR);
      instance.SetDelete(&delete_vectorlETStringgR);
      instance.SetDeleteArray(&deleteArray_vectorlETStringgR);
      instance.SetDestructor(&destruct_vectorlETStringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TString> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TString>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETStringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TString>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETStringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TString> : new vector<TString>;
   }
   static void *newArray_vectorlETStringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TString>[nElements] : new vector<TString>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETStringgR(void *p) {
      delete ((vector<TString>*)p);
   }
   static void deleteArray_vectorlETStringgR(void *p) {
      delete [] ((vector<TString>*)p);
   }
   static void destruct_vectorlETStringgR(void *p) {
      typedef vector<TString> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TString>

namespace ROOT {
   void vectorlEboolgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEboolgR_Dictionary();
   static void *new_vectorlEboolgR(void *p = 0);
   static void *newArray_vectorlEboolgR(Long_t size, void *p);
   static void delete_vectorlEboolgR(void *p);
   static void deleteArray_vectorlEboolgR(void *p);
   static void destruct_vectorlEboolgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<bool>*)
   {
      vector<bool> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<bool>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<bool>", -2, "vectorbool.dll", 0,
                  typeid(vector<bool>), DefineBehavior(ptr, ptr),
                  0, &vectorlEboolgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<bool>) );
      instance.SetNew(&new_vectorlEboolgR);
      instance.SetNewArray(&newArray_vectorlEboolgR);
      instance.SetDelete(&delete_vectorlEboolgR);
      instance.SetDeleteArray(&deleteArray_vectorlEboolgR);
      instance.SetDestructor(&destruct_vectorlEboolgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<bool> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<bool>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEboolgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<bool>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEboolgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<bool> : new vector<bool>;
   }
   static void *newArray_vectorlEboolgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<bool>[nElements] : new vector<bool>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEboolgR(void *p) {
      delete ((vector<bool>*)p);
   }
   static void deleteArray_vectorlEboolgR(void *p) {
      delete [] ((vector<bool>*)p);
   }
   static void destruct_vectorlEboolgR(void *p) {
      typedef vector<bool> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<bool>

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

namespace ROOT {
   void vectorlEvectorlEboolgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEboolgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEboolgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEboolgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEboolgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEboolgRsPgR(void *p);
   static void destruct_vectorlEvectorlEboolgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<bool> >*)
   {
      vector<vector<bool> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<bool> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<bool> >", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<bool> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEboolgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<bool> >) );
      instance.SetNew(&new_vectorlEvectorlEboolgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEboolgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEboolgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEboolgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEboolgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<bool> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<bool> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEboolgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<bool> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEboolgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<bool> > : new vector<vector<bool> >;
   }
   static void *newArray_vectorlEvectorlEboolgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<bool> >[nElements] : new vector<vector<bool> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEboolgRsPgR(void *p) {
      delete ((vector<vector<bool> >*)p);
   }
   static void deleteArray_vectorlEvectorlEboolgRsPgR(void *p) {
      delete [] ((vector<vector<bool> >*)p);
   }
   static void destruct_vectorlEvectorlEboolgRsPgR(void *p) {
      typedef vector<vector<bool> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<bool> >

namespace ROOT {
   void vectorlEvectorlEdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEdoublegRsPgR_Dictionary();
   static void *new_vectorlEvectorlEdoublegRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEdoublegRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEdoublegRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEdoublegRsPgR(void *p);
   static void destruct_vectorlEvectorlEdoublegRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<double> >*)
   {
      vector<vector<double> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<double> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<double> >", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<double> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEdoublegRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<double> >) );
      instance.SetNew(&new_vectorlEvectorlEdoublegRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEdoublegRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEdoublegRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEdoublegRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEdoublegRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<double> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<double> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEdoublegRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<double> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEdoublegRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double> > : new vector<vector<double> >;
   }
   static void *newArray_vectorlEvectorlEdoublegRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double> >[nElements] : new vector<vector<double> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEdoublegRsPgR(void *p) {
      delete ((vector<vector<double> >*)p);
   }
   static void deleteArray_vectorlEvectorlEdoublegRsPgR(void *p) {
      delete [] ((vector<vector<double> >*)p);
   }
   static void destruct_vectorlEvectorlEdoublegRsPgR(void *p) {
      typedef vector<vector<double> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<double> >

namespace ROOT {
   void vectorlEvectorlEintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEintgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEintgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEintgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEintgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEintgRsPgR(void *p);
   static void destruct_vectorlEvectorlEintgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<int> >*)
   {
      vector<vector<int> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<int> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<int> >", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<int> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEintgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<int> >) );
      instance.SetNew(&new_vectorlEvectorlEintgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEintgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEintgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEintgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEintgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<int> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<int> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEintgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<int> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEintgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<int> > : new vector<vector<int> >;
   }
   static void *newArray_vectorlEvectorlEintgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<int> >[nElements] : new vector<vector<int> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEintgRsPgR(void *p) {
      delete ((vector<vector<int> >*)p);
   }
   static void deleteArray_vectorlEvectorlEintgRsPgR(void *p) {
      delete [] ((vector<vector<int> >*)p);
   }
   static void destruct_vectorlEvectorlEintgRsPgR(void *p) {
      typedef vector<vector<int> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<int> >

namespace ROOT {
   void vectorlEvectorlEvectorlEdoublegRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEvectorlEdoublegRsPgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p);
   static void destruct_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<vector<double> > >*)
   {
      vector<vector<vector<double> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<vector<double> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<vector<double> > >", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<vector<double> > >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEvectorlEdoublegRsPgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<vector<double> > >) );
      instance.SetNew(&new_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEvectorlEdoublegRsPgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<vector<double> > > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<vector<double> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEvectorlEdoublegRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<vector<double> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<double> > > : new vector<vector<vector<double> > >;
   }
   static void *newArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<vector<double> > >[nElements] : new vector<vector<vector<double> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      delete ((vector<vector<vector<double> > >*)p);
   }
   static void deleteArray_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      delete [] ((vector<vector<vector<double> > >*)p);
   }
   static void destruct_vectorlEvectorlEvectorlEdoublegRsPgRsPgR(void *p) {
      typedef vector<vector<vector<double> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<vector<double> > >

/********************************************************
* DmtpcSkimEventCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableDmtpcSkimEventCint();

extern "C" void G__set_cpp_environmentDmtpcSkimEventCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("DmtpcSkimEvent.hh");
  G__cpp_reset_tagtableDmtpcSkimEventCint();
}
#include <new>
extern "C" int G__cpp_dllrevDmtpcSkimEventCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* DmtpcSkimEvent */
static int G__DmtpcSkimEventCint_429_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DmtpcSkimEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DmtpcSkimEvent[n];
     } else {
       p = new((void*) gvp) DmtpcSkimEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DmtpcSkimEvent;
     } else {
       p = new((void*) gvp) DmtpcSkimEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_DmtpcSkimEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DmtpcSkimEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DmtpcSkimEvent(*(DmtpcSkimEvent*) libp->para[0].ref, (bool) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) DmtpcSkimEvent(*(DmtpcSkimEvent*) libp->para[0].ref, (bool) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DmtpcSkimEvent(*(DmtpcSkimEvent*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) DmtpcSkimEvent(*(DmtpcSkimEvent*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_DmtpcSkimEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DmtpcSkimEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new DmtpcSkimEvent((DmtpcEvent*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) DmtpcSkimEvent((DmtpcEvent*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_DmtpcSkimEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->clusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->cluster((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->eventNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->runNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->ncamera());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const DmtpcSkimEvent*) G__getstructoffset())->cameraSerialNumber((int) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((DmtpcSkimEvent*) G__getstructoffset())->findSerialNumber(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->theta((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->phi((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->E((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->EGainMap((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->range((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->diffusedRange((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->majorAxis((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->minorAxis((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->x((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->y((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->xbegin((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->ybegin((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->xend((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->yend((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->r((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->inactive((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->crossing((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->skewness((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->edge((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->ntracks((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->spark((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->spark());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->lastspark((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->lastspark());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->integral((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->integral());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->cluster_rms((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->cluster_mean((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->neighbors((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->npixel((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->maxpixel((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->cygnus_angle((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->energy_density((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->moment((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->transverse_moment((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->dec((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->ra((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->glon((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->glat((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->image_mean((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->image_rms((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcSkimEvent*) G__getstructoffset())->timenow((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->pixels_killed((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->npixel_red((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->image((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->isRBI((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->isRBI((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->isRBI((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->isRBI((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->nburnin((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->burnin_event((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->burnin_track((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->burnin_this_index((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 72, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->burnin_v((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->nsparkref((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->sparkrefX((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->sparkrefY((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->ntriggers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DmtpcSkimEvent*) G__getstructoffset())->trigger_groups());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DmtpcSkimEvent*) G__getstructoffset())->waveform_vectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->trigger_group((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((DmtpcSkimEvent*) G__getstructoffset())->printOut(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
      break;
   case 0:
      ((DmtpcSkimEvent*) G__getstructoffset())->printOut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((DmtpcSkimEvent*) G__getstructoffset())->printOut((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, *(ostream*) libp->para[2].ref);
      G__setnull(result7);
      break;
   case 2:
      ((DmtpcSkimEvent*) G__getstructoffset())->printOut((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const DmtpcSkimEvent*) G__getstructoffset())->isStitched());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DmtpcSkimEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DmtpcSkimEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DmtpcSkimEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DmtpcSkimEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DmtpcSkimEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DmtpcSkimEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DmtpcSkimEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DmtpcSkimEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcSkimEventCint_429_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DmtpcSkimEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DmtpcSkimEvent G__TDmtpcSkimEvent;
static int G__DmtpcSkimEventCint_429_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DmtpcSkimEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DmtpcSkimEvent*) (soff+(sizeof(DmtpcSkimEvent)*i)))->~G__TDmtpcSkimEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DmtpcSkimEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DmtpcSkimEvent*) (soff))->~G__TDmtpcSkimEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DmtpcSkimEventCint_429_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DmtpcSkimEvent* dest = (DmtpcSkimEvent*) G__getstructoffset();
   *dest = *(DmtpcSkimEvent*) libp->para[0].ref;
   const DmtpcSkimEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* DmtpcSkimEvent */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDmtpcSkimEventCint {
 public:
  G__Sizep2memfuncDmtpcSkimEventCint(): p(&G__Sizep2memfuncDmtpcSkimEventCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDmtpcSkimEventCint::*p)();
};

size_t G__get_sizep2memfuncDmtpcSkimEventCint()
{
  G__Sizep2memfuncDmtpcSkimEventCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDmtpcSkimEventCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_DmtpcSkimEvent))) {
     DmtpcSkimEvent *G__Lderived;
     G__Lderived=(DmtpcSkimEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_DmtpcSkimEvent),G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDmtpcSkimEventCint() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SimpleConfigStore_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<MaxCamPulse>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_listlEMaxCamPulsecOallocatorlEMaxCamPulsegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<double> >",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<std::vector<double> > >",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > >",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH2F*>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<char> >",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<char,allocator<char> > >",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<int> >",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<TGraph*>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_listlETGraphmUcOallocatorlETGraphmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH1F*>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlETH1FmUcOallocatorlETH1FmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETH1FmUcOallocatorlETH1FmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlETH1FmUcOallocatorlETH1FmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETH1FmUcOallocatorlETH1FmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlETH1FmUcOallocatorlETH1FmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("BurninEncoded_t",104,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<BurninEncoded_t>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<BurninEncoded_t> >",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<unsigned int,allocator<unsigned int> > >",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<BurninEncoded_t> > >",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > > >",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<int,int> >",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double> >",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<bool> >",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<bool,allocator<bool> > >",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<double> > >",117,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* DmtpcSkimEvent */
static void G__setup_memvarDmtpcSkimEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_DmtpcSkimEvent));
   { DmtpcSkimEvent *p; p=(DmtpcSkimEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_eventNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_index=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_runNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_ncamera=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_stitched=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"_s3=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"_s4=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<int> >"),-1,4,"_burnin_base=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<int> >"),-1,4,"_burnin_this_index=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<int> >"),-1,4,"_nburnin=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_theta=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_range=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_diffusedRange=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_phi=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_majoraxis=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_minoraxis=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_E=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_EGainMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_r=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_x=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_y=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<int> >"),-1,4,"_xbegin=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<int> >"),-1,4,"_xend=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<int> >"),-1,4,"_ybegin=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<int> >"),-1,4,"_yend=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_skewness=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR),G__defined_typename("vector<vector<bool> >"),-1,4,"_edge=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_cluster_mean=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_cluster_rms=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<int> >"),-1,4,"_neighbors=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_maxpixel=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_cygnus_angle=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_energy_density=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<int> >"),-1,4,"_npixel=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<int> >"),-1,4,"_npixel_red=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<double> > >"),-1,4,"_moments=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),G__defined_typename("vector<vector<vector<double> > >"),-1,4,"_transverse_moments=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_ra=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_dec=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_glat=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_glon=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_inactive=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<double> >"),-1,4,"_crossing=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"_ntracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEboolcOallocatorlEboolgRsPgR),G__defined_typename("vector<bool>"),-1,4,"_spark=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"_lastspark=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"_integral=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"_image_mean=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"_pixels_killed=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"_image_rms=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"_nsparkref=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"_sparkref_base=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlETStringcOallocatorlETStringgRsPgR),G__defined_typename("vector<TString>"),-1,4,"_cameraSerialNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"_timenow=",0,(char*)NULL);
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt_t"),-1,4,"_burnin=",0,"[_s3] ");
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt_t"),-1,4,"_sparkref=",0,"[_s4]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TObjArray),-1,-1,4,"_trigger_groups=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TObjArray),-1,-1,4,"_waveform_vectors=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TObjArray),-1,-1,4,"_clusters=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDmtpcSkimEventCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncDmtpcSkimEvent(void) {
   /* DmtpcSkimEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_DmtpcSkimEvent));
   G__memfunc_setup("DmtpcSkimEvent",1422,G__DmtpcSkimEventCint_429_0_1, 105, G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_DmtpcSkimEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DmtpcSkimEvent",1422,G__DmtpcSkimEventCint_429_0_2, 105, G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_DmtpcSkimEvent), -1, 0, 2, 1, 1, 0, 
"u 'DmtpcSkimEvent' - 11 - other g - - 0 'false' diet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DmtpcSkimEvent",1422,G__DmtpcSkimEventCint_429_0_3, 105, G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_DmtpcSkimEvent), -1, 0, 1, 1, 1, 0, "U 'DmtpcEvent' - 0 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clusters",885,G__DmtpcSkimEventCint_429_0_5, 85, G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TObjArray), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cluster",770,G__DmtpcSkimEventCint_429_0_6, 85, G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_MaxCamClusterImage), -1, 0, 1, 1, 1, 9, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("eventNumber",1163,G__DmtpcSkimEventCint_429_0_7, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("runNumber",958,G__DmtpcSkimEventCint_429_0_8, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ncamera",727,G__DmtpcSkimEventCint_429_0_9, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cameraSerialNumber",1842,G__DmtpcSkimEventCint_429_0_10, 117, G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TString), -1, 0, 1, 1, 1, 8, "i - - 0 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findSerialNumber",1642,G__DmtpcSkimEventCint_429_0_11, 105, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - serialNumber", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("theta",534,G__DmtpcSkimEventCint_429_0_12, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phi",321,G__DmtpcSkimEventCint_429_0_13, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("E",69,G__DmtpcSkimEventCint_429_0_14, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EGainMap",738,G__DmtpcSkimEventCint_429_0_15, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("range",525,G__DmtpcSkimEventCint_429_0_16, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("diffusedRange",1335,G__DmtpcSkimEventCint_429_0_17, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("majorAxis",942,G__DmtpcSkimEventCint_429_0_18, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("minorAxis",954,G__DmtpcSkimEventCint_429_0_19, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("x",120,G__DmtpcSkimEventCint_429_0_20, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("y",121,G__DmtpcSkimEventCint_429_0_21, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xbegin",637,G__DmtpcSkimEventCint_429_0_22, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ybegin",638,G__DmtpcSkimEventCint_429_0_23, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("xend",431,G__DmtpcSkimEventCint_429_0_24, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("yend",432,G__DmtpcSkimEventCint_429_0_25, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("r",114,G__DmtpcSkimEventCint_429_0_26, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inactive",851,G__DmtpcSkimEventCint_429_0_27, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("crossing",872,G__DmtpcSkimEventCint_429_0_28, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("skewness",883,G__DmtpcSkimEventCint_429_0_29, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("edge",405,G__DmtpcSkimEventCint_429_0_30, 103, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ntracks",758,G__DmtpcSkimEventCint_429_0_31, 105, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("spark",545,G__DmtpcSkimEventCint_429_0_32, 103, -1, -1, 0, 1, 1, 1, 8, "i - - 0 '0' cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lastspark",981,G__DmtpcSkimEventCint_429_0_33, 105, -1, -1, 0, 1, 1, 1, 8, "i - - 0 '0' cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("integral",854,G__DmtpcSkimEventCint_429_0_34, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 '0' cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cluster_rms",1203,G__DmtpcSkimEventCint_429_0_35, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cluster_mean",1282,G__DmtpcSkimEventCint_429_0_36, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("neighbors",961,G__DmtpcSkimEventCint_429_0_37, 105, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("npixel",656,G__DmtpcSkimEventCint_429_0_38, 105, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxpixel",872,G__DmtpcSkimEventCint_429_0_39, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cygnus_angle",1279,G__DmtpcSkimEventCint_429_0_40, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("energy_density",1513,G__DmtpcSkimEventCint_429_0_41, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("moment",656,G__DmtpcSkimEventCint_429_0_42, 100, -1, -1, 0, 3, 1, 1, 8, 
"i - - 0 - cam i - - 0 - m "
"i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transverse_moment",1852,G__DmtpcSkimEventCint_429_0_43, 100, -1, -1, 0, 3, 1, 1, 8, 
"i - - 0 - cam i - - 0 - m "
"i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dec",300,G__DmtpcSkimEventCint_429_0_44, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ra",211,G__DmtpcSkimEventCint_429_0_45, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("glon",432,G__DmtpcSkimEventCint_429_0_46, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("glat",424,G__DmtpcSkimEventCint_429_0_47, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("image_mean",1027,G__DmtpcSkimEventCint_429_0_48, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("image_rms",948,G__DmtpcSkimEventCint_429_0_49, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("timenow",771,G__DmtpcSkimEventCint_429_0_50, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pixels_killed",1385,G__DmtpcSkimEventCint_429_0_51, 105, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("npixel_red",1066,G__DmtpcSkimEventCint_429_0_52, 105, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("image",515,G__DmtpcSkimEventCint_429_0_53, 85, G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TH2), -1, 0, 1, 1, 1, 9, "i - - 0 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isRBI",441,G__DmtpcSkimEventCint_429_0_54, 103, -1, -1, 0, 5, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track "
"i - - 0 '2' nposthresh i - - 0 '3' sparkrefbins "
"i - - 0 '4' binning", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nburnin",764,G__DmtpcSkimEventCint_429_0_55, 105, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("burnin_event",1295,G__DmtpcSkimEventCint_429_0_56, 105, -1, -1, 0, 3, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track "
"i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("burnin_track",1282,G__DmtpcSkimEventCint_429_0_57, 105, -1, -1, 0, 3, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track "
"i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("burnin_this_index",1820,G__DmtpcSkimEventCint_429_0_58, 105, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - cam i - - 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("burnin_v",867,G__DmtpcSkimEventCint_429_0_59, 72, -1, G__defined_typename("BurninEncoded_t"), 0, 2, 1, 1, 9, 
"i - - 0 - c i - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nsparkref",972,G__DmtpcSkimEventCint_429_0_60, 105, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sparkrefX",950,G__DmtpcSkimEventCint_429_0_61, 105, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - c i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sparkrefY",951,G__DmtpcSkimEventCint_429_0_62, 105, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - c i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ntriggers",981,G__DmtpcSkimEventCint_429_0_63, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trigger_groups",1523,G__DmtpcSkimEventCint_429_0_64, 85, G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("waveform_vectors",1740,G__DmtpcSkimEventCint_429_0_65, 85, G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trigger_group",1408,G__DmtpcSkimEventCint_429_0_66, 85, G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_MaxCamTriggerGroup), -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printOut",869,G__DmtpcSkimEventCint_429_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 'std::cout' stream", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printOut",869,G__DmtpcSkimEventCint_429_0_68, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - cam i - - 0 - track "
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 'std::cout' stream", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isStitched",1044,G__DmtpcSkimEventCint_429_0_69, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyBurnin",1065,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'vector<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > >,allocator<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > > > >' 'vector<vector<vector<BurninEncoded_t> > >' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copySparkRef",1241,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'vector<pair<int,int>,allocator<pair<int,int> > >' 'vector<pair<int,int> >' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initVectors",1178,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - - 0 - ncam i - - 0 '15' ntracks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initCamVectors",1451,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - - 0 - ncam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTrackVector",1425,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - - 0 '15' ntracks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearTrackVectors",1762,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("burninIndex",1158,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 3, 1, 4, 8, 
"i - - 0 - c i - - 0 - t "
"i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printOutTrack",1370,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - - 0 - c i - - 0 - t "
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printOutCamera",1454,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - - 0 - c u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DmtpcSkimEventCint_429_0_79, 85, G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DmtpcSkimEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DmtpcSkimEventCint_429_0_80, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DmtpcSkimEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DmtpcSkimEventCint_429_0_81, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DmtpcSkimEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DmtpcSkimEventCint_429_0_82, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DmtpcSkimEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DmtpcSkimEventCint_429_0_86, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DmtpcSkimEventCint_429_0_87, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DmtpcSkimEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DmtpcSkimEventCint_429_0_88, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DmtpcSkimEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DmtpcSkimEventCint_429_0_89, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DmtpcSkimEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DmtpcSkimEventCint_429_0_90, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DmtpcSkimEvent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~DmtpcSkimEvent", 1548, G__DmtpcSkimEventCint_429_0_91, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DmtpcSkimEventCint_429_0_92, (int) ('u'), G__get_linked_tagnum(&G__DmtpcSkimEventCintLN_DmtpcSkimEvent), -1, 1, 1, 1, 1, 0, "u 'DmtpcSkimEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDmtpcSkimEventCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDmtpcSkimEventCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDmtpcSkimEventCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DmtpcSkimEventCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_vectorlEboolcOallocatorlEboolgRsPgR = { "vector<bool,allocator<bool> >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_vectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgR = { "vector<SimpleConfigStore_t,allocator<SimpleConfigStore_t> >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SimpleConfigStore_t,allocator<SimpleConfigStore_t> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_listlEMaxCamPulsecOallocatorlEMaxCamPulsegRsPgR = { "list<MaxCamPulse,allocator<MaxCamPulse> >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_MaxCamTriggerGroup = { "MaxCamTriggerGroup" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TH2 = { "TH2" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR = { "vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR = { "vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR = { "vector<TH2F*,allocator<TH2F*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH2F*,allocator<TH2F*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_MaxCamClusterImage = { "MaxCamClusterImage" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR = { "vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR = { "vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_listlETGraphmUcOallocatorlETGraphmUgRsPgR = { "list<TGraph*,allocator<TGraph*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_DmtpcEvent = { "DmtpcEvent" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_vectorlETH1FmUcOallocatorlETH1FmUgRsPgR = { "vector<TH1F*,allocator<TH1F*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETH1FmUcOallocatorlETH1FmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH1F*,allocator<TH1F*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_DmtpcSkimEvent = { "DmtpcSkimEvent" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_vectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgR = { "vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_vectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgR = { "vector<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > >,allocator<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > > > >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > >,allocator<vector<vector<unsigned int,allocator<unsigned int> >,allocator<vector<unsigned int,allocator<unsigned int> > > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR = { "vector<pair<int,int>,allocator<pair<int,int> > >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<int,int>,allocator<pair<int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR = { "vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >" , 99 , -1 };
G__linked_taginfo G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<bool,allocator<bool> >,allocator<vector<bool,allocator<bool> > > >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDmtpcSkimEventCint() {
  G__DmtpcSkimEventCintLN_TClass.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TBuffer.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TMemberInspector.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TObject.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TString.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_vectorlEboolcOallocatorlEboolgRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TObjArray.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_vectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_listlEMaxCamPulsecOallocatorlEMaxCamPulsegRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_MaxCamTriggerGroup.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TH2.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_MaxCamClusterImage.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_listlETGraphmUcOallocatorlETGraphmUgRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_DmtpcEvent.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_vectorlETH1FmUcOallocatorlETH1FmUgRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETH1FmUcOallocatorlETH1FmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_DmtpcSkimEvent.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_vectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_vectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDmtpcSkimEventCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TString);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_vectorlEboolcOallocatorlEboolgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_vectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_listlEMaxCamPulsecOallocatorlEMaxCamPulsegRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_MaxCamTriggerGroup);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TH2);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_MaxCamClusterImage);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_listlETGraphmUcOallocatorlETGraphmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_DmtpcEvent);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_vectorlETH1FmUcOallocatorlETH1FmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlETH1FmUcOallocatorlETH1FmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_DmtpcSkimEvent),sizeof(DmtpcSkimEvent),-1,63232,(char*)NULL,G__setup_memvarDmtpcSkimEvent,G__setup_memfuncDmtpcSkimEvent);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_vectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_vectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcOallocatorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_vectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcSkimEventCintLN_reverse_iteratorlEvectorlEvectorlEboolcOallocatorlEboolgRsPgRcOallocatorlEvectorlEboolcOallocatorlEboolgRsPgRsPgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupDmtpcSkimEventCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupDmtpcSkimEventCint()");
  G__set_cpp_environmentDmtpcSkimEventCint();
  G__cpp_setup_tagtableDmtpcSkimEventCint();

  G__cpp_setup_inheritanceDmtpcSkimEventCint();

  G__cpp_setup_typetableDmtpcSkimEventCint();

  G__cpp_setup_memvarDmtpcSkimEventCint();

  G__cpp_setup_memfuncDmtpcSkimEventCint();
  G__cpp_setup_globalDmtpcSkimEventCint();
  G__cpp_setup_funcDmtpcSkimEventCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDmtpcSkimEventCint();
  return;
}
class G__cpp_setup_initDmtpcSkimEventCint {
  public:
    G__cpp_setup_initDmtpcSkimEventCint() { G__add_setup_func("DmtpcSkimEventCint",(G__incsetup)(&G__cpp_setupDmtpcSkimEventCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDmtpcSkimEventCint() { G__remove_setup_func("DmtpcSkimEventCint"); }
};
G__cpp_setup_initDmtpcSkimEventCint G__cpp_setup_initializerDmtpcSkimEventCint;

