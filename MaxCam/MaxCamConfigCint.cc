//
// File generated by rootcint at Fri Jul 15 15:51:39 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME MaxCamConfigCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MaxCamConfigCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MaxCamConfig_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MaxCamConfig(void *p = 0);
   static void *newArray_MaxCamConfig(Long_t size, void *p);
   static void delete_MaxCamConfig(void *p);
   static void deleteArray_MaxCamConfig(void *p);
   static void destruct_MaxCamConfig(void *p);
   static void streamer_MaxCamConfig(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MaxCamConfig*)
   {
      ::MaxCamConfig *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MaxCamConfig >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MaxCamConfig", ::MaxCamConfig::Class_Version(), "./MaxCamConfig.hh", 7,
                  typeid(::MaxCamConfig), DefineBehavior(ptr, ptr),
                  &::MaxCamConfig::Dictionary, isa_proxy, 0,
                  sizeof(::MaxCamConfig) );
      instance.SetNew(&new_MaxCamConfig);
      instance.SetNewArray(&newArray_MaxCamConfig);
      instance.SetDelete(&delete_MaxCamConfig);
      instance.SetDeleteArray(&deleteArray_MaxCamConfig);
      instance.SetDestructor(&destruct_MaxCamConfig);
      instance.SetStreamerFunc(&streamer_MaxCamConfig);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MaxCamConfig*)
   {
      return GenerateInitInstanceLocal((::MaxCamConfig*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MaxCamConfig*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *MaxCamConfig::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MaxCamConfig::Class_Name()
{
   return "MaxCamConfig";
}

//______________________________________________________________________________
const char *MaxCamConfig::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MaxCamConfig*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MaxCamConfig::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MaxCamConfig*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MaxCamConfig::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MaxCamConfig*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MaxCamConfig::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MaxCamConfig*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void MaxCamConfig::Streamer(TBuffer &R__b)
{
   // Stream an object of class MaxCamConfig.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> cameraID;
      R__b >> row_width;
      R__b >> img_rows;
      R__b >> hbin;
      R__b >> vbin;
      R__b >> ul_x;
      R__b >> ul_y;
      R__b >> lr_x;
      R__b >> lr_y;
      R__b >> CCDTemp;
      R__b >> CCDTempSet;
      R__b >> exposureTime;
      R__b >> frameType;
      R__b >> cleanType;
      R__b >> nFlushes;
      R__b >> bitDepth;
      R__b >> daqTime;
      serialNumber.Streamer(R__b);
      R__b >> overscanColumns;
      R__b >> overscanRows;
      R__b >> digitizeOverscan;
      R__b >> meanForExposedPixels;
      R__b >> rmsForExposedPixels;
      R__b >> meanForOverscanPixels;
      R__b >> rmsForOverscanPixels;
      R__b.CheckByteCount(R__s, R__c, MaxCamConfig::IsA());
   } else {
      R__c = R__b.WriteVersion(MaxCamConfig::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << cameraID;
      R__b << row_width;
      R__b << img_rows;
      R__b << hbin;
      R__b << vbin;
      R__b << ul_x;
      R__b << ul_y;
      R__b << lr_x;
      R__b << lr_y;
      R__b << CCDTemp;
      R__b << CCDTempSet;
      R__b << exposureTime;
      R__b << frameType;
      R__b << cleanType;
      R__b << nFlushes;
      R__b << bitDepth;
      R__b << daqTime;
      serialNumber.Streamer(R__b);
      R__b << overscanColumns;
      R__b << overscanRows;
      R__b << digitizeOverscan;
      R__b << meanForExposedPixels;
      R__b << rmsForExposedPixels;
      R__b << meanForOverscanPixels;
      R__b << rmsForOverscanPixels;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MaxCamConfig::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MaxCamConfig.
      TClass *R__cl = ::MaxCamConfig::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cameraID", &cameraID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "row_width", &row_width);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "img_rows", &img_rows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hbin", &hbin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vbin", &vbin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ul_x", &ul_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ul_y", &ul_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lr_x", &lr_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lr_y", &lr_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CCDTemp", &CCDTemp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CCDTempSet", &CCDTempSet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "exposureTime", &exposureTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "frameType", &frameType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cleanType", &cleanType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nFlushes", &nFlushes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bitDepth", &bitDepth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "daqTime", &daqTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "serialNumber", &serialNumber);
      R__insp.InspectMember(serialNumber, "serialNumber.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "overscanColumns", &overscanColumns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "overscanRows", &overscanRows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "digitizeOverscan", &digitizeOverscan);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanForExposedPixels", &meanForExposedPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rmsForExposedPixels", &rmsForExposedPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanForOverscanPixels", &meanForOverscanPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rmsForOverscanPixels", &rmsForOverscanPixels);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MaxCamConfig(void *p) {
      return  p ? new(p) ::MaxCamConfig : new ::MaxCamConfig;
   }
   static void *newArray_MaxCamConfig(Long_t nElements, void *p) {
      return p ? new(p) ::MaxCamConfig[nElements] : new ::MaxCamConfig[nElements];
   }
   // Wrapper around operator delete
   static void delete_MaxCamConfig(void *p) {
      delete ((::MaxCamConfig*)p);
   }
   static void deleteArray_MaxCamConfig(void *p) {
      delete [] ((::MaxCamConfig*)p);
   }
   static void destruct_MaxCamConfig(void *p) {
      typedef ::MaxCamConfig current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MaxCamConfig(TBuffer &buf, void *obj) {
      ((::MaxCamConfig*)obj)->::MaxCamConfig::Streamer(buf);
   }
} // end of namespace ROOT for class ::MaxCamConfig

/********************************************************
* MaxCamConfigCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMaxCamConfigCint();

extern "C" void G__set_cpp_environmentMaxCamConfigCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("MaxCamConfig.hh");
  G__cpp_reset_tagtableMaxCamConfigCint();
}
#include <new>
extern "C" int G__cpp_dllrevMaxCamConfigCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MaxCamConfig */
static int G__MaxCamConfigCint_177_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamConfig* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamConfig[n];
     } else {
       p = new((void*) gvp) MaxCamConfig[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamConfig;
     } else {
       p = new((void*) gvp) MaxCamConfig;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamConfigCintLN_MaxCamConfig));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamConfigCint_177_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamConfig* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MaxCamConfig((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) MaxCamConfig((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamConfigCintLN_MaxCamConfig));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamConfigCint_177_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamConfig* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MaxCamConfig(*(MaxCamConfig*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MaxCamConfig(*(MaxCamConfig*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamConfigCintLN_MaxCamConfig));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamConfigCint_177_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MaxCamConfig::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamConfigCint_177_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamConfig::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamConfigCint_177_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MaxCamConfig::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamConfigCint_177_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MaxCamConfig::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamConfigCint_177_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamConfig*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamConfigCint_177_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamConfig::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamConfigCint_177_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MaxCamConfig::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamConfigCint_177_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamConfig::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamConfigCint_177_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MaxCamConfig::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MaxCamConfig G__TMaxCamConfig;
static int G__MaxCamConfigCint_177_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MaxCamConfig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MaxCamConfig*) (soff+(sizeof(MaxCamConfig)*i)))->~G__TMaxCamConfig();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MaxCamConfig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MaxCamConfig*) (soff))->~G__TMaxCamConfig();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MaxCamConfigCint_177_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamConfig* dest = (MaxCamConfig*) G__getstructoffset();
   *dest = *(MaxCamConfig*) libp->para[0].ref;
   const MaxCamConfig& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MaxCamConfig */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMaxCamConfigCint {
 public:
  G__Sizep2memfuncMaxCamConfigCint(): p(&G__Sizep2memfuncMaxCamConfigCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMaxCamConfigCint::*p)();
};

size_t G__get_sizep2memfuncMaxCamConfigCint()
{
  G__Sizep2memfuncMaxCamConfigCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMaxCamConfigCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MaxCamConfigCintLN_MaxCamConfig))) {
     MaxCamConfig *G__Lderived;
     G__Lderived=(MaxCamConfig*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamConfigCintLN_MaxCamConfig),G__get_linked_tagnum(&G__MaxCamConfigCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamConfigCintLN_MaxCamConfig),G__get_linked_tagnum(&G__MaxCamConfigCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMaxCamConfigCint() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MaxCamConfigCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamConfigCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamConfigCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamConfigCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamConfigCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MaxCamConfigCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamConfigCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamConfigCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamConfigCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamConfigCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MaxCamConfig */
static void G__setup_memvarMaxCamConfig(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MaxCamConfigCintLN_MaxCamConfig));
   { MaxCamConfig *p; p=(MaxCamConfig*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->cameraID)-(long)(p)),108,0,0,-1,-1,-1,1,"cameraID=",0,"Number for camera currently in use.");
   G__memvar_setup((void*)((long)(&p->row_width)-(long)(p)),108,0,0,-1,-1,-1,1,"row_width=",0,"Number of bins in ccd chip row. (does NOT include overscan)");
   G__memvar_setup((void*)((long)(&p->img_rows)-(long)(p)),108,0,0,-1,-1,-1,1,"img_rows=",0,"Number of bins in ccd chip col. (does NOT include overscan)");
   G__memvar_setup((void*)((long)(&p->hbin)-(long)(p)),108,0,0,-1,-1,-1,1,"hbin=",0,"Horizontal bin factor for pixels.");
   G__memvar_setup((void*)((long)(&p->vbin)-(long)(p)),108,0,0,-1,-1,-1,1,"vbin=",0,"Vertical bin factor for pixels.");
   G__memvar_setup((void*)((long)(&p->ul_x)-(long)(p)),108,0,0,-1,-1,-1,1,"ul_x=",0,"upper-left x  in pixels (does NOT include overscan)");
   G__memvar_setup((void*)((long)(&p->ul_y)-(long)(p)),108,0,0,-1,-1,-1,1,"ul_y=",0,"upper-left y  in pixels (does NOT include overscan)");
   G__memvar_setup((void*)((long)(&p->lr_x)-(long)(p)),108,0,0,-1,-1,-1,1,"lr_x=",0,"lower-right x in pixels (does NOT include overscan)");
   G__memvar_setup((void*)((long)(&p->lr_y)-(long)(p)),108,0,0,-1,-1,-1,1,"lr_y=",0,"lower-right y in pixels (does NOT include overscan)");
   G__memvar_setup((void*)((long)(&p->CCDTemp)-(long)(p)),100,0,0,-1,-1,-1,1,"CCDTemp=",0,"Actual CCD temperature");
   G__memvar_setup((void*)((long)(&p->CCDTempSet)-(long)(p)),100,0,0,-1,-1,-1,1,"CCDTempSet=",0,"Goal CCD temperature");
   G__memvar_setup((void*)((long)(&p->exposureTime)-(long)(p)),108,0,0,-1,-1,-1,1,"exposureTime=",0,"Duration of exposure in ms");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MaxCamConfigCintLN_MaxCamConfigcLcLFrType),-1,-2,1,G__FastAllocString(2048).Format("normal=%lldLL",(long long)MaxCamConfig::normal).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MaxCamConfigCintLN_MaxCamConfigcLcLFrType),-1,-2,1,G__FastAllocString(2048).Format("dark=%lldLL",(long long)MaxCamConfig::dark).data(),0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->frameType)-(long)(p)),105,0,0,-1,-1,-1,1,"frameType=",0,"Normal (shutter open) or dark frame");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MaxCamConfigCintLN_MaxCamConfigcLcLClType),-1,-2,1,G__FastAllocString(2048).Format("none=%lldLL",(long long)MaxCamConfig::none).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MaxCamConfigCintLN_MaxCamConfigcLcLClType),-1,-2,1,G__FastAllocString(2048).Format("flush=%lldLL",(long long)MaxCamConfig::flush).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MaxCamConfigCintLN_MaxCamConfigcLcLClType),-1,-2,1,G__FastAllocString(2048).Format("bg=%lldLL",(long long)MaxCamConfig::bg).data(),0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cleanType)-(long)(p)),105,0,0,-1,-1,-1,1,"cleanType=",0,"Camera cleaning type ");
   G__memvar_setup((void*)((long)(&p->nFlushes)-(long)(p)),105,0,0,-1,-1,-1,1,"nFlushes=",0,"number of flushes before exposure.");
   G__memvar_setup((void*)((long)(&p->bitDepth)-(long)(p)),105,0,0,-1,-1,-1,1,"bitDepth=",0,"8-bit or 16-bit pixels are supported.");
   G__memvar_setup((void*)((long)(&p->daqTime)-(long)(p)),100,0,0,-1,-1,-1,1,"daqTime=",0,"total time for DAQ time ( = flushing + exposure + readout).");
   G__memvar_setup((void*)((long)(&p->serialNumber)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__MaxCamConfigCintLN_TString),-1,-1,1,"serialNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->overscanColumns)-(long)(p)),114,0,0,-1,-1,-1,1,"overscanColumns=",0,"numer of column bins that are not exposed but digitized");
   G__memvar_setup((void*)((long)(&p->overscanRows)-(long)(p)),114,0,0,-1,-1,-1,1,"overscanRows=",0,"number of row bins that are not exposed but digitized");
   G__memvar_setup((void*)((long)(&p->digitizeOverscan)-(long)(p)),103,0,0,-1,-1,-1,1,"digitizeOverscan=",0,"apply digitization to overscan pixels");
   G__memvar_setup((void*)((long)(&p->meanForExposedPixels)-(long)(p)),102,0,0,-1,-1,-1,1,"meanForExposedPixels=",0,"mean for exposed vixels");
   G__memvar_setup((void*)((long)(&p->rmsForExposedPixels)-(long)(p)),102,0,0,-1,-1,-1,1,"rmsForExposedPixels=",0,"rms for exposed vixels");
   G__memvar_setup((void*)((long)(&p->meanForOverscanPixels)-(long)(p)),102,0,0,-1,-1,-1,1,"meanForOverscanPixels=",0,"mean for masked vixels");
   G__memvar_setup((void*)((long)(&p->rmsForOverscanPixels)-(long)(p)),102,0,0,-1,-1,-1,1,"rmsForOverscanPixels=",0,"rms for masked vixels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamConfigCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMaxCamConfigCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMaxCamConfig(void) {
   /* MaxCamConfig */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MaxCamConfigCintLN_MaxCamConfig));
   G__memfunc_setup("MaxCamConfig",1165,G__MaxCamConfigCint_177_0_1, 105, G__get_linked_tagnum(&G__MaxCamConfigCintLN_MaxCamConfig), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxCamConfig",1165,G__MaxCamConfigCint_177_0_2, 105, G__get_linked_tagnum(&G__MaxCamConfigCintLN_MaxCamConfig), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxCamConfig",1165,G__MaxCamConfigCint_177_0_3, 105, G__get_linked_tagnum(&G__MaxCamConfigCintLN_MaxCamConfig), -1, 0, 1, 1, 1, 0, "u 'MaxCamConfig' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MaxCamConfigCint_177_0_4, 85, G__get_linked_tagnum(&G__MaxCamConfigCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MaxCamConfig::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MaxCamConfigCint_177_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamConfig::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MaxCamConfigCint_177_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MaxCamConfig::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MaxCamConfigCint_177_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MaxCamConfig::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MaxCamConfigCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MaxCamConfigCint_177_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MaxCamConfigCint_177_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamConfig::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MaxCamConfigCint_177_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MaxCamConfig::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MaxCamConfigCint_177_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamConfig::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MaxCamConfigCint_177_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MaxCamConfig::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MaxCamConfig", 1291, G__MaxCamConfigCint_177_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MaxCamConfigCint_177_0_17, (int) ('u'), G__get_linked_tagnum(&G__MaxCamConfigCintLN_MaxCamConfig), -1, 1, 1, 1, 1, 0, "u 'MaxCamConfig' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMaxCamConfigCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMaxCamConfigCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMaxCamConfigCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MaxCamConfigCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MaxCamConfigCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MaxCamConfigCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MaxCamConfigCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MaxCamConfigCintLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__MaxCamConfigCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__MaxCamConfigCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MaxCamConfigCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamConfigCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MaxCamConfigCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamConfigCintLN_MaxCamConfig = { "MaxCamConfig" , 99 , -1 };
G__linked_taginfo G__MaxCamConfigCintLN_MaxCamConfigcLcLFrType = { "MaxCamConfig::FrType" , 101 , -1 };
G__linked_taginfo G__MaxCamConfigCintLN_MaxCamConfigcLcLClType = { "MaxCamConfig::ClType" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMaxCamConfigCint() {
  G__MaxCamConfigCintLN_TClass.tagnum = -1 ;
  G__MaxCamConfigCintLN_TBuffer.tagnum = -1 ;
  G__MaxCamConfigCintLN_TMemberInspector.tagnum = -1 ;
  G__MaxCamConfigCintLN_TObject.tagnum = -1 ;
  G__MaxCamConfigCintLN_TNamed.tagnum = -1 ;
  G__MaxCamConfigCintLN_TString.tagnum = -1 ;
  G__MaxCamConfigCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MaxCamConfigCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamConfigCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MaxCamConfigCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamConfigCintLN_MaxCamConfig.tagnum = -1 ;
  G__MaxCamConfigCintLN_MaxCamConfigcLcLFrType.tagnum = -1 ;
  G__MaxCamConfigCintLN_MaxCamConfigcLcLClType.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMaxCamConfigCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MaxCamConfigCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__MaxCamConfigCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MaxCamConfigCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MaxCamConfigCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__MaxCamConfigCintLN_TNamed);
   G__get_linked_tagnum_fwd(&G__MaxCamConfigCintLN_TString);
   G__get_linked_tagnum_fwd(&G__MaxCamConfigCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamConfigCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamConfigCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamConfigCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MaxCamConfigCintLN_MaxCamConfig),sizeof(MaxCamConfig),-1,63232,(char*)NULL,G__setup_memvarMaxCamConfig,G__setup_memfuncMaxCamConfig);
   G__get_linked_tagnum_fwd(&G__MaxCamConfigCintLN_MaxCamConfigcLcLFrType);
   G__get_linked_tagnum_fwd(&G__MaxCamConfigCintLN_MaxCamConfigcLcLClType);
}
extern "C" void G__cpp_setupMaxCamConfigCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupMaxCamConfigCint()");
  G__set_cpp_environmentMaxCamConfigCint();
  G__cpp_setup_tagtableMaxCamConfigCint();

  G__cpp_setup_inheritanceMaxCamConfigCint();

  G__cpp_setup_typetableMaxCamConfigCint();

  G__cpp_setup_memvarMaxCamConfigCint();

  G__cpp_setup_memfuncMaxCamConfigCint();
  G__cpp_setup_globalMaxCamConfigCint();
  G__cpp_setup_funcMaxCamConfigCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMaxCamConfigCint();
  return;
}
class G__cpp_setup_initMaxCamConfigCint {
  public:
    G__cpp_setup_initMaxCamConfigCint() { G__add_setup_func("MaxCamConfigCint",(G__incsetup)(&G__cpp_setupMaxCamConfigCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMaxCamConfigCint() { G__remove_setup_func("MaxCamConfigCint"); }
};
G__cpp_setup_initMaxCamConfigCint G__cpp_setup_initializerMaxCamConfigCint;

