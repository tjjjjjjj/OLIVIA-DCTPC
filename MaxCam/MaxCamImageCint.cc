//
// File generated by rootcint at Tue Aug  2 13:54:53 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME MaxCamImageCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MaxCamImageCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MaxCamImage_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MaxCamImage(void *p = 0);
   static void *newArray_MaxCamImage(Long_t size, void *p);
   static void delete_MaxCamImage(void *p);
   static void deleteArray_MaxCamImage(void *p);
   static void destruct_MaxCamImage(void *p);
   static void directoryAutoAdd_MaxCamImage(void *obj, TDirectory *dir);
   static void streamer_MaxCamImage(TBuffer &buf, void *obj);
   static Long64_t merge_MaxCamImage(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MaxCamImage*)
   {
      ::MaxCamImage *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MaxCamImage >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MaxCamImage", ::MaxCamImage::Class_Version(), "./MaxCamImage.hh", 7,
                  typeid(::MaxCamImage), DefineBehavior(ptr, ptr),
                  &::MaxCamImage::Dictionary, isa_proxy, 0,
                  sizeof(::MaxCamImage) );
      instance.SetNew(&new_MaxCamImage);
      instance.SetNewArray(&newArray_MaxCamImage);
      instance.SetDelete(&delete_MaxCamImage);
      instance.SetDeleteArray(&deleteArray_MaxCamImage);
      instance.SetDestructor(&destruct_MaxCamImage);
      instance.SetDirectoryAutoAdd(&directoryAutoAdd_MaxCamImage);
      instance.SetStreamerFunc(&streamer_MaxCamImage);
      instance.SetMerge(&merge_MaxCamImage);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MaxCamImage*)
   {
      return GenerateInitInstanceLocal((::MaxCamImage*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MaxCamImage*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *MaxCamImage::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MaxCamImage::Class_Name()
{
   return "MaxCamImage";
}

//______________________________________________________________________________
const char *MaxCamImage::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MaxCamImage*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MaxCamImage::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MaxCamImage*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MaxCamImage::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MaxCamImage*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MaxCamImage::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MaxCamImage*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void MaxCamImage::Streamer(TBuffer &R__b)
{
   // Stream an object of class MaxCamImage.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TH2F::Streamer(R__b);
      R__b >> _cameraID;
      R__b.CheckByteCount(R__s, R__c, MaxCamImage::IsA());
   } else {
      R__c = R__b.WriteVersion(MaxCamImage::IsA(), kTRUE);
      TH2F::Streamer(R__b);
      R__b << _cameraID;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MaxCamImage::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MaxCamImage.
      TClass *R__cl = ::MaxCamImage::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_cameraID", &_cameraID);
      TH2F::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MaxCamImage(void *p) {
      return  p ? new(p) ::MaxCamImage : new ::MaxCamImage;
   }
   static void *newArray_MaxCamImage(Long_t nElements, void *p) {
      return p ? new(p) ::MaxCamImage[nElements] : new ::MaxCamImage[nElements];
   }
   // Wrapper around operator delete
   static void delete_MaxCamImage(void *p) {
      delete ((::MaxCamImage*)p);
   }
   static void deleteArray_MaxCamImage(void *p) {
      delete [] ((::MaxCamImage*)p);
   }
   static void destruct_MaxCamImage(void *p) {
      typedef ::MaxCamImage current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the directory auto add.
   static void directoryAutoAdd_MaxCamImage(void *p, TDirectory *dir) {
      ((::MaxCamImage*)p)->DirectoryAutoAdd(dir);
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MaxCamImage(TBuffer &buf, void *obj) {
      ((::MaxCamImage*)obj)->::MaxCamImage::Streamer(buf);
   }
   // Wrapper around the merge function.
   static Long64_t  merge_MaxCamImage(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::MaxCamImage*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::MaxCamImage

/********************************************************
* MaxCamImageCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMaxCamImageCint();

extern "C" void G__set_cpp_environmentMaxCamImageCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("MaxCamImage.hh");
  G__cpp_reset_tagtableMaxCamImageCint();
}
#include <new>
extern "C" int G__cpp_dllrevMaxCamImageCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MaxCamImage */
static int G__MaxCamImageCint_216_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamImage* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MaxCamImage((TH2F*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) MaxCamImage((TH2F*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamImageCintLN_MaxCamImage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamImageCint_216_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamImage* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamImage[n];
     } else {
       p = new((void*) gvp) MaxCamImage[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamImage;
     } else {
       p = new((void*) gvp) MaxCamImage;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamImageCintLN_MaxCamImage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamImageCint_216_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamImage* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MaxCamImage(*(MaxCamImage*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MaxCamImage(*(MaxCamImage*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamImageCintLN_MaxCamImage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamImageCint_216_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((MaxCamImage*) G__getstructoffset())->getCameraID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamImageCint_216_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MaxCamImage::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamImageCint_216_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamImage::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamImageCint_216_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MaxCamImage::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamImageCint_216_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MaxCamImage::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamImageCint_216_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamImage*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamImageCint_216_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamImage::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamImageCint_216_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MaxCamImage::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamImageCint_216_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamImage::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamImageCint_216_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MaxCamImage::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MaxCamImage G__TMaxCamImage;
static int G__MaxCamImageCint_216_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MaxCamImage*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MaxCamImage*) (soff+(sizeof(MaxCamImage)*i)))->~G__TMaxCamImage();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MaxCamImage*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MaxCamImage*) (soff))->~G__TMaxCamImage();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MaxCamImage */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMaxCamImageCint {
 public:
  G__Sizep2memfuncMaxCamImageCint(): p(&G__Sizep2memfuncMaxCamImageCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMaxCamImageCint::*p)();
};

size_t G__get_sizep2memfuncMaxCamImageCint()
{
  G__Sizep2memfuncMaxCamImageCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMaxCamImageCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MaxCamImageCintLN_MaxCamImage))) {
     MaxCamImage *G__Lderived;
     G__Lderived=(MaxCamImage*)0x1000;
     {
       TH2F *G__Lpbase=(TH2F*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamImageCintLN_MaxCamImage),G__get_linked_tagnum(&G__MaxCamImageCintLN_TH2F),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TH2 *G__Lpbase=(TH2*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamImageCintLN_MaxCamImage),G__get_linked_tagnum(&G__MaxCamImageCintLN_TH2),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TH1 *G__Lpbase=(TH1*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamImageCintLN_MaxCamImage),G__get_linked_tagnum(&G__MaxCamImageCintLN_TH1),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamImageCintLN_MaxCamImage),G__get_linked_tagnum(&G__MaxCamImageCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamImageCintLN_MaxCamImage),G__get_linked_tagnum(&G__MaxCamImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamImageCintLN_MaxCamImage),G__get_linked_tagnum(&G__MaxCamImageCintLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamImageCintLN_MaxCamImage),G__get_linked_tagnum(&G__MaxCamImageCintLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamImageCintLN_MaxCamImage),G__get_linked_tagnum(&G__MaxCamImageCintLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TArrayF *G__Lpbase=(TArrayF*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamImageCintLN_MaxCamImage),G__get_linked_tagnum(&G__MaxCamImageCintLN_TArrayF),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TArray *G__Lpbase=(TArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamImageCintLN_MaxCamImage),G__get_linked_tagnum(&G__MaxCamImageCintLN_TArray),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMaxCamImageCint() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MaxCamImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MaxCamImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__MaxCamImageCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__MaxCamImageCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__MaxCamImageCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__MaxCamImageCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MaxCamImage */
static void G__setup_memvarMaxCamImage(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MaxCamImageCintLN_MaxCamImage));
   { MaxCamImage *p; p=(MaxCamImage*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"_cameraID=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamImageCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMaxCamImageCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMaxCamImage(void) {
   /* MaxCamImage */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MaxCamImageCintLN_MaxCamImage));
   G__memfunc_setup("MaxCamImage",1050,G__MaxCamImageCint_216_0_1, 105, G__get_linked_tagnum(&G__MaxCamImageCintLN_MaxCamImage), -1, 0, 2, 1, 1, 0, 
"U 'TH2F' - 0 - image h - - 0 - cameraID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxCamImage",1050,G__MaxCamImageCint_216_0_2, 105, G__get_linked_tagnum(&G__MaxCamImageCintLN_MaxCamImage), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxCamImage",1050,G__MaxCamImageCint_216_0_3, 105, G__get_linked_tagnum(&G__MaxCamImageCintLN_MaxCamImage), -1, 0, 1, 1, 1, 0, "u 'MaxCamImage' - 1 - image", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCameraID",1046,G__MaxCamImageCint_216_0_4, 104, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MaxCamImageCint_216_0_5, 85, G__get_linked_tagnum(&G__MaxCamImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MaxCamImage::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MaxCamImageCint_216_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamImage::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MaxCamImageCint_216_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MaxCamImage::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MaxCamImageCint_216_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MaxCamImage::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MaxCamImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MaxCamImageCint_216_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MaxCamImageCint_216_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamImage::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MaxCamImageCint_216_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MaxCamImage::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MaxCamImageCint_216_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamImage::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MaxCamImageCint_216_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MaxCamImage::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MaxCamImage", 1176, G__MaxCamImageCint_216_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMaxCamImageCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMaxCamImageCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMaxCamImageCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MaxCamImageCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_TArray = { "TArray" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_TAttLine = { "TAttLine" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_TAttFill = { "TAttFill" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_TAttMarker = { "TAttMarker" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_TH2 = { "TH2" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__MaxCamImageCintLN_MaxCamImage = { "MaxCamImage" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMaxCamImageCint() {
  G__MaxCamImageCintLN_TClass.tagnum = -1 ;
  G__MaxCamImageCintLN_TBuffer.tagnum = -1 ;
  G__MaxCamImageCintLN_TMemberInspector.tagnum = -1 ;
  G__MaxCamImageCintLN_TObject.tagnum = -1 ;
  G__MaxCamImageCintLN_TNamed.tagnum = -1 ;
  G__MaxCamImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MaxCamImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MaxCamImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamImageCintLN_TArray.tagnum = -1 ;
  G__MaxCamImageCintLN_TAttLine.tagnum = -1 ;
  G__MaxCamImageCintLN_TAttFill.tagnum = -1 ;
  G__MaxCamImageCintLN_TAttMarker.tagnum = -1 ;
  G__MaxCamImageCintLN_TArrayF.tagnum = -1 ;
  G__MaxCamImageCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__MaxCamImageCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__MaxCamImageCintLN_TH1.tagnum = -1 ;
  G__MaxCamImageCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__MaxCamImageCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__MaxCamImageCintLN_TH2.tagnum = -1 ;
  G__MaxCamImageCintLN_TH2F.tagnum = -1 ;
  G__MaxCamImageCintLN_MaxCamImage.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMaxCamImageCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_TNamed);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_TArray);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_TAttLine);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_TAttFill);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_TAttMarker);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_TH1);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_TH2);
   G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_TH2F);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MaxCamImageCintLN_MaxCamImage),sizeof(MaxCamImage),-1,63232,(char*)NULL,G__setup_memvarMaxCamImage,G__setup_memfuncMaxCamImage);
}
extern "C" void G__cpp_setupMaxCamImageCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupMaxCamImageCint()");
  G__set_cpp_environmentMaxCamImageCint();
  G__cpp_setup_tagtableMaxCamImageCint();

  G__cpp_setup_inheritanceMaxCamImageCint();

  G__cpp_setup_typetableMaxCamImageCint();

  G__cpp_setup_memvarMaxCamImageCint();

  G__cpp_setup_memfuncMaxCamImageCint();
  G__cpp_setup_globalMaxCamImageCint();
  G__cpp_setup_funcMaxCamImageCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMaxCamImageCint();
  return;
}
class G__cpp_setup_initMaxCamImageCint {
  public:
    G__cpp_setup_initMaxCamImageCint() { G__add_setup_func("MaxCamImageCint",(G__incsetup)(&G__cpp_setupMaxCamImageCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMaxCamImageCint() { G__remove_setup_func("MaxCamImageCint"); }
};
G__cpp_setup_initMaxCamImageCint G__cpp_setup_initializerMaxCamImageCint;

