//
// File generated by rootcint at Tue Jul 12 17:18:33 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME MaxCamTrackCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MaxCamTrackCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MaxCamTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MaxCamTrack(void *p = 0);
   static void *newArray_MaxCamTrack(Long_t size, void *p);
   static void delete_MaxCamTrack(void *p);
   static void deleteArray_MaxCamTrack(void *p);
   static void destruct_MaxCamTrack(void *p);
   static void streamer_MaxCamTrack(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MaxCamTrack*)
   {
      ::MaxCamTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MaxCamTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MaxCamTrack", ::MaxCamTrack::Class_Version(), "./MaxCamTrack.hh", 14,
                  typeid(::MaxCamTrack), DefineBehavior(ptr, ptr),
                  &::MaxCamTrack::Dictionary, isa_proxy, 0,
                  sizeof(::MaxCamTrack) );
      instance.SetNew(&new_MaxCamTrack);
      instance.SetNewArray(&newArray_MaxCamTrack);
      instance.SetDelete(&delete_MaxCamTrack);
      instance.SetDeleteArray(&deleteArray_MaxCamTrack);
      instance.SetDestructor(&destruct_MaxCamTrack);
      instance.SetStreamerFunc(&streamer_MaxCamTrack);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MaxCamTrack*)
   {
      return GenerateInitInstanceLocal((::MaxCamTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MaxCamTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *MaxCamTrack::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MaxCamTrack::Class_Name()
{
   return "MaxCamTrack";
}

//______________________________________________________________________________
const char *MaxCamTrack::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MaxCamTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MaxCamTrack::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MaxCamTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MaxCamTrack::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MaxCamTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MaxCamTrack::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MaxCamTrack*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void MaxCamTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class MaxCamTrack.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      {
         vector<TF1*> &R__stl =  trackList;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TF1));
         if (R__tcl1==0) {
            Error("trackList streamer","Missing the TClass object for TF1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TF1* R__t;
            R__t = (TF1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b >> _hphi;
      R__b >> _image;
      R__b >> _imageth;
      R__b >> _imagephi;
      R__b >> _th;
      R__b >> _npixel;
      R__b >> _nx;
      R__b >> _ny;
      R__b >> _xratio;
      R__b >> _yratio;
      R__b >> _ftrack;
      R__b >> _i0;
      R__b >> _j0;
      {
         vector<int> &R__stl =  _wireBinList;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<int> &R__stl =  _peakList;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      _wireCoord.Streamer(R__b);
      R__b >> _hphibins;
      R__b >> _hphimin;
      R__b >> _hphimax;
      R__b >> _pihalf;
      R__b >> _yroi;
      R__b >> _phiroi;
      R__b.CheckByteCount(R__s, R__c, MaxCamTrack::IsA());
   } else {
      R__c = R__b.WriteVersion(MaxCamTrack::IsA(), kTRUE);
      TObject::Streamer(R__b);
      {
         vector<TF1*> &R__stl =  trackList;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TF1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << (TObject*)_hphi;
      R__b << (TObject*)_image;
      R__b << (TObject*)_imageth;
      R__b << (TObject*)_imagephi;
      R__b << _th;
      R__b << _npixel;
      R__b << _nx;
      R__b << _ny;
      R__b << _xratio;
      R__b << _yratio;
      R__b << _ftrack;
      R__b << _i0;
      R__b << _j0;
      {
         vector<int> &R__stl =  _wireBinList;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<int> &R__stl =  _peakList;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      _wireCoord.Streamer(R__b);
      R__b << _hphibins;
      R__b << _hphimin;
      R__b << _hphimax;
      R__b << _pihalf;
      R__b << _yroi;
      R__b << _phiroi;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MaxCamTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MaxCamTrack.
      TClass *R__cl = ::MaxCamTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackList", (void*)&trackList);
      R__insp.InspectMember("vector<TF1*>", (void*)&trackList, "trackList.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_hphi", &_hphi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_image", &_image);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_imageth", &_imageth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_imagephi", &_imagephi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_th", &_th);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_npixel", &_npixel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nx", &_nx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_ny", &_ny);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_xratio", &_xratio);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_yratio", &_yratio);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_ftrack", &_ftrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_i0", &_i0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_j0", &_j0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_wireBinList", (void*)&_wireBinList);
      R__insp.InspectMember("vector<int>", (void*)&_wireBinList, "_wireBinList.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_peakList", (void*)&_peakList);
      R__insp.InspectMember("vector<int>", (void*)&_peakList, "_peakList.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_wireCoord", &_wireCoord);
      R__insp.InspectMember(_wireCoord, "_wireCoord.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_hphibins", &_hphibins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_hphimin", &_hphimin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_hphimax", &_hphimax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pihalf", &_pihalf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_yroi", &_yroi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_phiroi", &_phiroi);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MaxCamTrack(void *p) {
      return  p ? new(p) ::MaxCamTrack : new ::MaxCamTrack;
   }
   static void *newArray_MaxCamTrack(Long_t nElements, void *p) {
      return p ? new(p) ::MaxCamTrack[nElements] : new ::MaxCamTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_MaxCamTrack(void *p) {
      delete ((::MaxCamTrack*)p);
   }
   static void deleteArray_MaxCamTrack(void *p) {
      delete [] ((::MaxCamTrack*)p);
   }
   static void destruct_MaxCamTrack(void *p) {
      typedef ::MaxCamTrack current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MaxCamTrack(TBuffer &buf, void *obj) {
      ((::MaxCamTrack*)obj)->::MaxCamTrack::Streamer(buf);
   }
} // end of namespace ROOT for class ::MaxCamTrack

namespace ROOT {
   void vectorlETF1mUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETF1mUgR_Dictionary();
   static void *new_vectorlETF1mUgR(void *p = 0);
   static void *newArray_vectorlETF1mUgR(Long_t size, void *p);
   static void delete_vectorlETF1mUgR(void *p);
   static void deleteArray_vectorlETF1mUgR(void *p);
   static void destruct_vectorlETF1mUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TF1*>*)
   {
      vector<TF1*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TF1*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TF1*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TF1*>), DefineBehavior(ptr, ptr),
                  0, &vectorlETF1mUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TF1*>) );
      instance.SetNew(&new_vectorlETF1mUgR);
      instance.SetNewArray(&newArray_vectorlETF1mUgR);
      instance.SetDelete(&delete_vectorlETF1mUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETF1mUgR);
      instance.SetDestructor(&destruct_vectorlETF1mUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TF1*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TF1*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETF1mUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TF1*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETF1mUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TF1*> : new vector<TF1*>;
   }
   static void *newArray_vectorlETF1mUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TF1*>[nElements] : new vector<TF1*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETF1mUgR(void *p) {
      delete ((vector<TF1*>*)p);
   }
   static void deleteArray_vectorlETF1mUgR(void *p) {
      delete [] ((vector<TF1*>*)p);
   }
   static void destruct_vectorlETF1mUgR(void *p) {
      typedef vector<TF1*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TF1*>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

/********************************************************
* MaxCamTrackCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMaxCamTrackCint();

extern "C" void G__set_cpp_environmentMaxCamTrackCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("MaxCamTrack.hh");
  G__cpp_reset_tagtableMaxCamTrackCint();
}
#include <new>
extern "C" int G__cpp_dllrevMaxCamTrackCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MaxCamTrack */
static int G__MaxCamTrackCint_239_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamTrack[n];
     } else {
       p = new((void*) gvp) MaxCamTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamTrack;
     } else {
       p = new((void*) gvp) MaxCamTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamTrackCintLN_MaxCamTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamTrack((TH2F*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MaxCamTrack((TH2F*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamTrack((TH2F*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MaxCamTrack((TH2F*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamTrackCintLN_MaxCamTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MaxCamTrack(*(MaxCamTrack*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MaxCamTrack(*(MaxCamTrack*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamTrackCintLN_MaxCamTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamTrack*) G__getstructoffset())->setImage((TH2F*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamTrack*) G__getstructoffset())->setThreshold((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamTrack*) G__getstructoffset())->checkThresholdAndNeighbors();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamTrack*) G__getstructoffset())->findMaxBin();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MaxCamTrack*) G__getstructoffset())->findSlope((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MaxCamTrack*) G__getstructoffset())->findSlope((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MaxCamTrack*) G__getstructoffset())->findSlope();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamTrack*) G__getstructoffset())->fitTrack();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamTrack*) G__getstructoffset())->cleanUpPixels();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MaxCamTrack*) G__getstructoffset())->getTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MaxCamTrack*) G__getstructoffset())->getImage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MaxCamTrack*) G__getstructoffset())->getFitImage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MaxCamTrack*) G__getstructoffset())->nTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MaxCamTrack*) G__getstructoffset())->getTrack((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MaxCamTrack*) G__getstructoffset())->makeTracks((TCanvas*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MaxCamTrack*) G__getstructoffset())->makeTracks();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((MaxCamTrack*) G__getstructoffset())->makeResiduals((int) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (float) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((MaxCamTrack*) G__getstructoffset())->makeResiduals((int) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MaxCamTrack*) G__getstructoffset())->getAngleHisto());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamTrack*) G__getstructoffset())->setWireBinList(*((vector<int>*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int>* pobj;
         vector<int> xobj = ((MaxCamTrack*) G__getstructoffset())->getWireBinList();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamTrack*) G__getstructoffset())->setWireCoordinate(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((MaxCamTrack*) G__getstructoffset())->getWireCoordinate();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamTrack*) G__getstructoffset())->setHoughHistogram((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamTrack*) G__getstructoffset())->plotDebug((TCanvas*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamTrack*) G__getstructoffset())->clearMemory();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector2* pobj;
         TVector2 xobj = MaxCamTrack::distanceFromPoint((TF1*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
         pobj = new TVector2(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamTrack*) G__getstructoffset())->setCleaningSpan((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MaxCamTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MaxCamTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MaxCamTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MaxCamTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamTrackCint_239_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MaxCamTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MaxCamTrack G__TMaxCamTrack;
static int G__MaxCamTrackCint_239_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MaxCamTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MaxCamTrack*) (soff+(sizeof(MaxCamTrack)*i)))->~G__TMaxCamTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MaxCamTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MaxCamTrack*) (soff))->~G__TMaxCamTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MaxCamTrackCint_239_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamTrack* dest = (MaxCamTrack*) G__getstructoffset();
   *dest = *(MaxCamTrack*) libp->para[0].ref;
   const MaxCamTrack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MaxCamTrack */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMaxCamTrackCint {
 public:
  G__Sizep2memfuncMaxCamTrackCint(): p(&G__Sizep2memfuncMaxCamTrackCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMaxCamTrackCint::*p)();
};

size_t G__get_sizep2memfuncMaxCamTrackCint()
{
  G__Sizep2memfuncMaxCamTrackCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMaxCamTrackCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MaxCamTrackCintLN_MaxCamTrack))) {
     MaxCamTrack *G__Lderived;
     G__Lderived=(MaxCamTrack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamTrackCintLN_MaxCamTrack),G__get_linked_tagnum(&G__MaxCamTrackCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMaxCamTrackCint() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamTrackCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamTrackCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamTrackCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamTrackCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TF1*>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamTrackCintLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamTrackCintLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamTrackCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamTrackCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamTrackCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MaxCamTrack */
static void G__setup_memvarMaxCamTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MaxCamTrackCintLN_MaxCamTrack));
   { MaxCamTrack *p; p=(MaxCamTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->trackList)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__MaxCamTrackCintLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR),G__defined_typename("vector<TF1*>"),-1,1,"trackList=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamTrackCintLN_TH1F),-1,-1,4,"_hphi=",0,"phi histogram");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamTrackCintLN_TH2F),-1,-1,4,"_image=",0,"Pointer to original (calibrated) image");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamTrackCintLN_TH2F),-1,-1,4,"_imageth=",0,"Image after applied threshold.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamTrackCintLN_TH2F),-1,-1,4,"_imagephi=",0,"Array of phi values for each pixel");
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"_th=",0,"Threshold for accepting pixel in track finding");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_npixel=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_nx=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_ny=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"_xratio=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"_yratio=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamTrackCintLN_TF1),-1,-1,4,"_ftrack=",0,"Fitted track");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_i0=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_j0=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MaxCamTrackCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"_wireBinList=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MaxCamTrackCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"_peakList=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MaxCamTrackCintLN_TString),-1,-1,4,"_wireCoord=",0,"wire coordinate (x or y - assumes wires are parallel either with y or x axis)");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_hphibins=",0,"number of bins for Hough transform histogram");
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"_hphimin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"_hphimax=",0,"min, max for Hough transform histogram");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_pihalf=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"_yroi=",0,"Size of y band for selecting pixels.");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_phiroi=",0,"Width of phi histogram used to compute mean slope at track search stage.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamTrackCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMaxCamTrackCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMaxCamTrack(void) {
   /* MaxCamTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MaxCamTrackCintLN_MaxCamTrack));
   G__memfunc_setup("MaxCamTrack",1068,G__MaxCamTrackCint_239_0_1, 105, G__get_linked_tagnum(&G__MaxCamTrackCintLN_MaxCamTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxCamTrack",1068,G__MaxCamTrackCint_239_0_2, 105, G__get_linked_tagnum(&G__MaxCamTrackCintLN_MaxCamTrack), -1, 0, 2, 1, 1, 0, 
"U 'TH2F' - 0 - image g - - 0 'false' rotate90deg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxCamTrack",1068,G__MaxCamTrackCint_239_0_3, 105, G__get_linked_tagnum(&G__MaxCamTrackCintLN_MaxCamTrack), -1, 0, 1, 1, 1, 0, "u 'MaxCamTrack' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setImage",815,G__MaxCamTrackCint_239_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TH2F' - 0 - image", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThreshold",1273,G__MaxCamTrackCint_239_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - th", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkThresholdAndNeighbors",2655,G__MaxCamTrackCint_239_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findMaxBin",992,G__MaxCamTrackCint_239_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findSlope",932,G__MaxCamTrackCint_239_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 '-1' i i - - 0 '-1' j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitTrack",824,G__MaxCamTrackCint_239_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cleanUpPixels",1341,G__MaxCamTrackCint_239_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__MaxCamTrackCint_239_0_11, 85, G__get_linked_tagnum(&G__MaxCamTrackCintLN_TF1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getImage",803,G__MaxCamTrackCint_239_0_12, 85, G__get_linked_tagnum(&G__MaxCamTrackCintLN_TH2F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitImage",1094,G__MaxCamTrackCint_239_0_13, 85, G__get_linked_tagnum(&G__MaxCamTrackCintLN_TH2F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nTracks",726,G__MaxCamTrackCint_239_0_14, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__MaxCamTrackCint_239_0_15, 85, G__get_linked_tagnum(&G__MaxCamTrackCintLN_TF1), -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeTracks",1030,G__MaxCamTrackCint_239_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TCanvas' - 0 '0' dbgCanvas", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeResiduals",1354,G__MaxCamTrackCint_239_0_17, 85, G__get_linked_tagnum(&G__MaxCamTrackCintLN_TH1F), -1, 0, 3, 1, 1, 0, 
"i - - 0 - itr u 'TString' - 0 - opt "
"f - - 0 '-1' width", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAngleHisto",1326,G__MaxCamTrackCint_239_0_18, 85, G__get_linked_tagnum(&G__MaxCamTrackCintLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWireBinList",1432,G__MaxCamTrackCint_239_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<int,allocator<int> >' 'vector<int>' 0 - wbl u 'TString' - 0 - wc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireBinList",1420,G__MaxCamTrackCint_239_0_20, 117, G__get_linked_tagnum(&G__MaxCamTrackCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWireCoordinate",1771,G__MaxCamTrackCint_239_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - wc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireCoordinate",1759,G__MaxCamTrackCint_239_0_22, 117, G__get_linked_tagnum(&G__MaxCamTrackCintLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHoughHistogram",1781,G__MaxCamTrackCint_239_0_23, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - nb f - - 0 - min "
"f - - 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plotDebug",934,G__MaxCamTrackCint_239_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TCanvas' - 0 - dbgCanvas", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearMemory",1152,G__MaxCamTrackCint_239_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distanceFromPoint",1769,G__MaxCamTrackCint_239_0_26, 117, G__get_linked_tagnum(&G__MaxCamTrackCintLN_TVector2), -1, 0, 3, 3, 1, 0, 
"U 'TF1' - 0 - t d - - 0 - x "
"d - - 0 - y", (char*)NULL, (void*) G__func2void( (TVector2 (*)(TF1*, double, double))(&MaxCamTrack::distanceFromPoint) ), 0);
   G__memfunc_setup("setCleaningSpan",1535,G__MaxCamTrackCint_239_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - dist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNew",518,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 4, 0, 
"i - - 0 - ix i - - 0 - iy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MaxCamTrackCint_239_0_29, 85, G__get_linked_tagnum(&G__MaxCamTrackCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MaxCamTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MaxCamTrackCint_239_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MaxCamTrackCint_239_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MaxCamTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MaxCamTrackCint_239_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MaxCamTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MaxCamTrackCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MaxCamTrackCint_239_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MaxCamTrackCint_239_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MaxCamTrackCint_239_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MaxCamTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MaxCamTrackCint_239_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MaxCamTrackCint_239_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MaxCamTrack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MaxCamTrack", 1194, G__MaxCamTrackCint_239_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MaxCamTrackCint_239_0_42, (int) ('u'), G__get_linked_tagnum(&G__MaxCamTrackCintLN_MaxCamTrack), -1, 1, 1, 1, 1, 0, "u 'MaxCamTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMaxCamTrackCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMaxCamTrackCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMaxCamTrackCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MaxCamTrackCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_TVector2 = { "TVector2" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_MaxCamTrack = { "MaxCamTrack" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR = { "vector<TF1*,allocator<TF1*> >" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TF1*,allocator<TF1*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__MaxCamTrackCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMaxCamTrackCint() {
  G__MaxCamTrackCintLN_TClass.tagnum = -1 ;
  G__MaxCamTrackCintLN_TBuffer.tagnum = -1 ;
  G__MaxCamTrackCintLN_TMemberInspector.tagnum = -1 ;
  G__MaxCamTrackCintLN_TObject.tagnum = -1 ;
  G__MaxCamTrackCintLN_TString.tagnum = -1 ;
  G__MaxCamTrackCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MaxCamTrackCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamTrackCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MaxCamTrackCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamTrackCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__MaxCamTrackCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__MaxCamTrackCintLN_TF1.tagnum = -1 ;
  G__MaxCamTrackCintLN_TH1F.tagnum = -1 ;
  G__MaxCamTrackCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__MaxCamTrackCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__MaxCamTrackCintLN_TH2F.tagnum = -1 ;
  G__MaxCamTrackCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__MaxCamTrackCintLN_TVector2.tagnum = -1 ;
  G__MaxCamTrackCintLN_TCanvas.tagnum = -1 ;
  G__MaxCamTrackCintLN_MaxCamTrack.tagnum = -1 ;
  G__MaxCamTrackCintLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR.tagnum = -1 ;
  G__MaxCamTrackCintLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamTrackCintLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__MaxCamTrackCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMaxCamTrackCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_TString);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_TF1);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_TH1F);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_TH2F);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_TVector2);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_TCanvas);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_MaxCamTrack),sizeof(MaxCamTrack),-1,63232,(char*)NULL,G__setup_memvarMaxCamTrack,G__setup_memfuncMaxCamTrack);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamTrackCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupMaxCamTrackCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupMaxCamTrackCint()");
  G__set_cpp_environmentMaxCamTrackCint();
  G__cpp_setup_tagtableMaxCamTrackCint();

  G__cpp_setup_inheritanceMaxCamTrackCint();

  G__cpp_setup_typetableMaxCamTrackCint();

  G__cpp_setup_memvarMaxCamTrackCint();

  G__cpp_setup_memfuncMaxCamTrackCint();
  G__cpp_setup_globalMaxCamTrackCint();
  G__cpp_setup_funcMaxCamTrackCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMaxCamTrackCint();
  return;
}
class G__cpp_setup_initMaxCamTrackCint {
  public:
    G__cpp_setup_initMaxCamTrackCint() { G__add_setup_func("MaxCamTrackCint",(G__incsetup)(&G__cpp_setupMaxCamTrackCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMaxCamTrackCint() { G__remove_setup_func("MaxCamTrackCint"); }
};
G__cpp_setup_initMaxCamTrackCint G__cpp_setup_initializerMaxCamTrackCint;

