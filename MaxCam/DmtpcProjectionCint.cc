//
// File generated by rootcint at Fri Jul 15 15:52:50 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME DmtpcProjectionCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "DmtpcProjectionCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void DmtpcProjection_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DmtpcProjection(void *p = 0);
   static void *newArray_DmtpcProjection(Long_t size, void *p);
   static void delete_DmtpcProjection(void *p);
   static void deleteArray_DmtpcProjection(void *p);
   static void destruct_DmtpcProjection(void *p);
   static void streamer_DmtpcProjection(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::DmtpcProjection*)
   {
      ::DmtpcProjection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DmtpcProjection >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DmtpcProjection", ::DmtpcProjection::Class_Version(), "./DmtpcProjection.hh", 25,
                  typeid(::DmtpcProjection), DefineBehavior(ptr, ptr),
                  &::DmtpcProjection::Dictionary, isa_proxy, 0,
                  sizeof(::DmtpcProjection) );
      instance.SetNew(&new_DmtpcProjection);
      instance.SetNewArray(&newArray_DmtpcProjection);
      instance.SetDelete(&delete_DmtpcProjection);
      instance.SetDeleteArray(&deleteArray_DmtpcProjection);
      instance.SetDestructor(&destruct_DmtpcProjection);
      instance.SetStreamerFunc(&streamer_DmtpcProjection);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::DmtpcProjection*)
   {
      return GenerateInitInstanceLocal((::DmtpcProjection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DmtpcProjection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *DmtpcProjection::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *DmtpcProjection::Class_Name()
{
   return "DmtpcProjection";
}

//______________________________________________________________________________
const char *DmtpcProjection::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DmtpcProjection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DmtpcProjection::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DmtpcProjection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DmtpcProjection::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DmtpcProjection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DmtpcProjection::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DmtpcProjection*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void DmtpcProjection::Streamer(TBuffer &R__b)
{
   // Stream an object of class DmtpcProjection.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> _long_profile;
      R__b >> _long_profile_interpolated;
      R__b >> _tranv_profile;
      R__b >> _spacer_sigma;
      {
         vector<double> &R__stl =  _long_spacers;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  _tranv_spacers;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  _long_spacer_widths;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  _tranv_spacer_widths;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> _EProfile;
      R__b >> _EFitProfile;
      R__b >> _njumps;
      R__b >> _width;
      R__b >> _phi;
      R__b >> _start_cutoff;
      R__b >> _end_cutoff;
      R__b >> _flip_spacers;
      R__b >> _max_interpolated;
      R__b >> _theta_param;
      R__b.CheckByteCount(R__s, R__c, DmtpcProjection::IsA());
   } else {
      R__c = R__b.WriteVersion(DmtpcProjection::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << _long_profile;
      R__b << _long_profile_interpolated;
      R__b << _tranv_profile;
      R__b << _spacer_sigma;
      {
         vector<double> &R__stl =  _long_spacers;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  _tranv_spacers;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  _long_spacer_widths;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  _tranv_spacer_widths;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << _EProfile;
      R__b << _EFitProfile;
      R__b << _njumps;
      R__b << _width;
      R__b << _phi;
      R__b << _start_cutoff;
      R__b << _end_cutoff;
      R__b << _flip_spacers;
      R__b << _max_interpolated;
      R__b << _theta_param;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void DmtpcProjection::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DmtpcProjection.
      TClass *R__cl = ::DmtpcProjection::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_long_profile", &_long_profile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_long_profile_interpolated", &_long_profile_interpolated);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_tranv_profile", &_tranv_profile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_userfunc", &_userfunc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_spacer_sigma", &_spacer_sigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_long_spacers", (void*)&_long_spacers);
      R__insp.InspectMember("vector<double>", (void*)&_long_spacers, "_long_spacers.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_tranv_spacers", (void*)&_tranv_spacers);
      R__insp.InspectMember("vector<double>", (void*)&_tranv_spacers, "_tranv_spacers.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_long_spacer_widths", (void*)&_long_spacer_widths);
      R__insp.InspectMember("vector<double>", (void*)&_long_spacer_widths, "_long_spacer_widths.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_tranv_spacer_widths", (void*)&_tranv_spacer_widths);
      R__insp.InspectMember("vector<double>", (void*)&_tranv_spacer_widths, "_tranv_spacer_widths.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_EProfile", &_EProfile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_EFitProfile", &_EFitProfile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_njumps", &_njumps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_width", &_width);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_phi", &_phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_start_cutoff", &_start_cutoff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_end_cutoff", &_end_cutoff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_flip_spacers", &_flip_spacers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_max_interpolated", &_max_interpolated);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_theta_param", &_theta_param);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_srim", &_srim);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_DmtpcProjection(void *p) {
      return  p ? new(p) ::DmtpcProjection : new ::DmtpcProjection;
   }
   static void *newArray_DmtpcProjection(Long_t nElements, void *p) {
      return p ? new(p) ::DmtpcProjection[nElements] : new ::DmtpcProjection[nElements];
   }
   // Wrapper around operator delete
   static void delete_DmtpcProjection(void *p) {
      delete ((::DmtpcProjection*)p);
   }
   static void deleteArray_DmtpcProjection(void *p) {
      delete [] ((::DmtpcProjection*)p);
   }
   static void destruct_DmtpcProjection(void *p) {
      typedef ::DmtpcProjection current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_DmtpcProjection(TBuffer &buf, void *obj) {
      ((::DmtpcProjection*)obj)->::DmtpcProjection::Streamer(buf);
   }
} // end of namespace ROOT for class ::DmtpcProjection

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

/********************************************************
* DmtpcProjectionCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableDmtpcProjectionCint();

extern "C" void G__set_cpp_environmentDmtpcProjectionCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("DmtpcProjection.hh");
  G__cpp_reset_tagtableDmtpcProjectionCint();
}
#include <new>
extern "C" int G__cpp_dllrevDmtpcProjectionCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* DmtpcProjection */
static int G__DmtpcProjectionCint_249_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DmtpcProjection* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DmtpcProjection(
(DmtpcSkimEvent*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (DmtpcGainMap*) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (double) G__double(libp->para[5])
, (int) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) DmtpcProjection(
(DmtpcSkimEvent*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (DmtpcGainMap*) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (double) G__double(libp->para[5])
, (int) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DmtpcProjection(
(DmtpcSkimEvent*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (DmtpcGainMap*) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (double) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) DmtpcProjection(
(DmtpcSkimEvent*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (DmtpcGainMap*) G__int(libp->para[3])
, (bool) G__int(libp->para[4]), (double) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DmtpcProjection(
(DmtpcSkimEvent*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (DmtpcGainMap*) G__int(libp->para[3])
, (bool) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) DmtpcProjection(
(DmtpcSkimEvent*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (DmtpcGainMap*) G__int(libp->para[3])
, (bool) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DmtpcProjection(
(DmtpcSkimEvent*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (DmtpcGainMap*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) DmtpcProjection(
(DmtpcSkimEvent*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (DmtpcGainMap*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DmtpcProjection(
(DmtpcSkimEvent*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) DmtpcProjection(
(DmtpcSkimEvent*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_DmtpcProjection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DmtpcProjection* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DmtpcProjection(
(MaxCamClusterImage*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (DmtpcGainMap*) G__int(libp->para[5])
, (bool) G__int(libp->para[6]), (double) G__double(libp->para[7])
, (int) G__int(libp->para[8]));
     } else {
       p = new((void*) gvp) DmtpcProjection(
(MaxCamClusterImage*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (DmtpcGainMap*) G__int(libp->para[5])
, (bool) G__int(libp->para[6]), (double) G__double(libp->para[7])
, (int) G__int(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DmtpcProjection(
(MaxCamClusterImage*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (DmtpcGainMap*) G__int(libp->para[5])
, (bool) G__int(libp->para[6]), (double) G__double(libp->para[7]));
     } else {
       p = new((void*) gvp) DmtpcProjection(
(MaxCamClusterImage*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (DmtpcGainMap*) G__int(libp->para[5])
, (bool) G__int(libp->para[6]), (double) G__double(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DmtpcProjection(
(MaxCamClusterImage*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (DmtpcGainMap*) G__int(libp->para[5])
, (bool) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) DmtpcProjection(
(MaxCamClusterImage*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (DmtpcGainMap*) G__int(libp->para[5])
, (bool) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DmtpcProjection(
(MaxCamClusterImage*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (DmtpcGainMap*) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) DmtpcProjection(
(MaxCamClusterImage*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (DmtpcGainMap*) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DmtpcProjection(
(MaxCamClusterImage*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) DmtpcProjection(
(MaxCamClusterImage*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_DmtpcProjection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DmtpcProjection* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DmtpcProjection[n];
     } else {
       p = new((void*) gvp) DmtpcProjection[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DmtpcProjection;
     } else {
       p = new((void*) gvp) DmtpcProjection;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_DmtpcProjection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DmtpcProjection*) G__getstructoffset())->getLongitudinalProfile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DmtpcProjection*) G__getstructoffset())->getInterpolatedLongitudinalProfile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DmtpcProjection*) G__getstructoffset())->getTransverseProfile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DmtpcProjection*) G__getstructoffset())->getTransverseProfile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DmtpcProjection*) G__getstructoffset())->getEInterpolatedProfile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const DmtpcProjection*) G__getstructoffset())->getEFitProfile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DmtpcProjection*) G__getstructoffset())->getEFitProfile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcProjection*) G__getstructoffset())->getWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((DmtpcProjection*) G__getstructoffset())->longitudinalFit((TF1*) G__int(libp->para[0]), (vector<string>*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((DmtpcProjection*) G__getstructoffset())->longitudinalFit((TF1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) ((DmtpcProjection*) G__getstructoffset())->EFit((TF1*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (vector<string>*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((DmtpcProjection*) G__getstructoffset())->EFit((TF1*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((DmtpcProjection*) G__getstructoffset())->EFit((TF1*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((DmtpcProjection*) G__getstructoffset())->EFit((TF1*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((DmtpcProjection*) G__getstructoffset())->EFit((TF1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DmtpcProjection*) G__getstructoffset())->getUserFunc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcProjection*) G__getstructoffset())->getNJumps());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcProjection*) G__getstructoffset())->getJumpLowBin((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcProjection*) G__getstructoffset())->getJumpHighBin((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcProjection*) G__getstructoffset())->getNStartIgnore());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const DmtpcProjection*) G__getstructoffset())->getNEndIgnore());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DmtpcProjection*) G__getstructoffset())->setStartCutoff((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DmtpcProjection*) G__getstructoffset())->setEndCutoff((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcProjection*) G__getstructoffset())->getLongitudinalSpacer((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcProjection*) G__getstructoffset())->getLongitudinalSpacerWidth((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcProjection*) G__getstructoffset())->getNLongitudinalSpacers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcProjection*) G__getstructoffset())->getSpacerSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const DmtpcProjection*) G__getstructoffset())->doLineFit((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const DmtpcProjection*) G__getstructoffset())->doLineFit());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) ((const DmtpcProjection*) G__getstructoffset())->doSRIMFit((DmtpcSRIMProjection::PARTICLE) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (const char*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((const DmtpcProjection*) G__getstructoffset())->doSRIMFit((DmtpcSRIMProjection::PARTICLE) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((const DmtpcProjection*) G__getstructoffset())->doSRIMLineFit((MaxCamSRIM*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (const char*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((const DmtpcProjection*) G__getstructoffset())->doSRIMLineFit((MaxCamSRIM*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcProjection*) G__getstructoffset())->lineFitFn((double*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcProjection*) G__getstructoffset())->SRIMfitFn((double*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const DmtpcProjection*) G__getstructoffset())->SRIMLineFitFn((double*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DmtpcProjection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DmtpcProjection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DmtpcProjection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DmtpcProjection::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DmtpcProjection*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DmtpcProjection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DmtpcProjection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DmtpcProjection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcProjectionCint_249_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DmtpcProjection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DmtpcProjectionCint_249_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DmtpcProjection* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DmtpcProjection(*(DmtpcProjection*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_DmtpcProjection));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DmtpcProjection G__TDmtpcProjection;
static int G__DmtpcProjectionCint_249_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DmtpcProjection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DmtpcProjection*) (soff+(sizeof(DmtpcProjection)*i)))->~G__TDmtpcProjection();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DmtpcProjection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DmtpcProjection*) (soff))->~G__TDmtpcProjection();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DmtpcProjectionCint_249_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DmtpcProjection* dest = (DmtpcProjection*) G__getstructoffset();
   *dest = *(DmtpcProjection*) libp->para[0].ref;
   const DmtpcProjection& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* DmtpcProjection */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDmtpcProjectionCint {
 public:
  G__Sizep2memfuncDmtpcProjectionCint(): p(&G__Sizep2memfuncDmtpcProjectionCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDmtpcProjectionCint::*p)();
};

size_t G__get_sizep2memfuncDmtpcProjectionCint()
{
  G__Sizep2memfuncDmtpcProjectionCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDmtpcProjectionCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DmtpcProjectionCintLN_DmtpcProjection))) {
     DmtpcProjection *G__Lderived;
     G__Lderived=(DmtpcProjection*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DmtpcProjectionCintLN_DmtpcProjection),G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DmtpcProjectionCintLN_DmtpcProjection),G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDmtpcProjectionCint() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double> >",117,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* DmtpcProjection */
static void G__setup_memvarDmtpcProjection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcProjectionCintLN_DmtpcProjection));
   { DmtpcProjection *p; p=(DmtpcProjection*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TH1),-1,-1,4,"_long_profile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TH1),-1,-1,4,"_long_profile_interpolated=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TH1),-1,-1,4,"_tranv_profile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TF1),-1,-1,4,"_userfunc=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_spacer_sigma=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"_long_spacers=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"_tranv_spacers=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"_long_spacer_widths=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"_tranv_spacer_widths=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TGraphErrors),-1,-1,4,"_EProfile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TGraphErrors),-1,-1,4,"_EFitProfile=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_njumps=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_width=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_phi=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_start_cutoff=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_end_cutoff=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_flip_spacers=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_max_interpolated=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_theta_param=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_MaxCamSRIM),-1,-1,4,"_srim=",0,"!  //for fitting; ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDmtpcProjectionCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncDmtpcProjection(void) {
   /* DmtpcProjection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcProjectionCintLN_DmtpcProjection));
   G__memfunc_setup("DmtpcProjection",1557,G__DmtpcProjectionCint_249_0_1, 105, G__get_linked_tagnum(&G__DmtpcProjectionCintLN_DmtpcProjection), -1, 0, 7, 1, 1, 0, 
"U 'DmtpcSkimEvent' - 0 - e i - - 0 - c "
"i - - 0 - i U 'DmtpcGainMap' - 10 '0' gm "
"g - - 0 'false' flip d - - 0 '1' spacer_sigma "
"i - - 0 '10' ninterp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DmtpcProjection",1557,G__DmtpcProjectionCint_249_0_2, 105, G__get_linked_tagnum(&G__DmtpcProjectionCintLN_DmtpcProjection), -1, 0, 9, 1, 1, 0, 
"U 'MaxCamClusterImage' - 10 - clust i - - 0 - track "
"d - - 0 - phi d - - 0 - x "
"d - - 0 - y U 'DmtpcGainMap' - 10 '0' gm "
"g - - 0 'false' flip d - - 0 '1' spacer_sigma "
"i - - 0 '10' ninterp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DmtpcProjection",1557,G__DmtpcProjectionCint_249_0_3, 105, G__get_linked_tagnum(&G__DmtpcProjectionCintLN_DmtpcProjection), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLongitudinalProfile",2299,G__DmtpcProjectionCint_249_0_4, 85, G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TH1), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInterpolatedLongitudinalProfile",3558,G__DmtpcProjectionCint_249_0_5, 85, G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TH1), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTransverseProfile",2110,G__DmtpcProjectionCint_249_0_6, 85, G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TH1), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTransverseProfile",2110,G__DmtpcProjectionCint_249_0_7, 85, G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TH1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEInterpolatedProfile",2369,G__DmtpcProjectionCint_249_0_8, 85, G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TGraphErrors), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEFitProfile",1401,G__DmtpcProjectionCint_249_0_9, 85, G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TGraphErrors), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEFitProfile",1401,G__DmtpcProjectionCint_249_0_10, 85, G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TGraphErrors), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWidth",832,G__DmtpcProjectionCint_249_0_11, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("longitudinalFit",1581,G__DmtpcProjectionCint_249_0_12, 85, G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TF1), -1, 0, 2, 1, 1, 0, 
"U 'TF1' - 0 - function U 'vector<string,allocator<string> >' 'vector<string>' 0 '0' minuit_cmds", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EFit",360,G__DmtpcProjectionCint_249_0_13, 85, G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TF1), -1, 0, 5, 1, 1, 0, 
"U 'TF1' - 0 - function U 'TF1' - 0 '0' rangefn_guess "
"d - - 0 '0.2' jump_limits d - - 0 '0.05' jump_error "
"U 'vector<string,allocator<string> >' 'vector<string>' 0 '0' minuit_cmds", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUserFunc",1131,G__DmtpcProjectionCint_249_0_14, 85, G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TF1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNJumps",925,G__DmtpcProjectionCint_249_0_15, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getJumpLowBin",1319,G__DmtpcProjectionCint_249_0_16, 105, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getJumpHighBin",1397,G__DmtpcProjectionCint_249_0_17, 105, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNStartIgnore",1536,G__DmtpcProjectionCint_249_0_18, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNEndIgnore",1289,G__DmtpcProjectionCint_249_0_19, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStartCutoff",1473,G__DmtpcProjectionCint_249_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - start_cutoff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEndCutoff",1226,G__DmtpcProjectionCint_249_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - end_cutoff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLongitudinalSpacer",2184,G__DmtpcProjectionCint_249_0_22, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLongitudinalSpacerWidth",2696,G__DmtpcProjectionCint_249_0_23, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLongitudinalSpacers",2377,G__DmtpcProjectionCint_249_0_24, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSpacerSigma",1423,G__DmtpcProjectionCint_249_0_25, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doLineFit",894,G__DmtpcProjectionCint_249_0_26, 85, G__get_linked_tagnum(&G__DmtpcProjectionCintLN_DmtpcProjectioncLcLLineFitParams), -1, 0, 1, 1, 1, 8, "C - - 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doSRIMFit",817,G__DmtpcProjectionCint_249_0_27, 85, G__get_linked_tagnum(&G__DmtpcProjectionCintLN_DmtpcProjectioncLcLSRIMFitParams), -1, 0, 5, 1, 1, 8, 
"i 'DmtpcSRIMProjection::PARTICLE' - 0 - type d - - 0 - lengthcal "
"d - - 0 - gain d - - 0 - pressure "
"C - - 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doSRIMLineFit",1209,G__DmtpcProjectionCint_249_0_28, 85, G__get_linked_tagnum(&G__DmtpcProjectionCintLN_DmtpcProjectioncLcLSRIMLineFitParams), -1, 0, 4, 1, 1, 8, 
"U 'MaxCamSRIM' - 0 - sr d - - 0 - lengthcal "
"d - - 0 - gain C - - 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lineFitFn",895,G__DmtpcProjectionCint_249_0_29, 100, -1, -1, 0, 1, 1, 1, 8, "D - - 10 - xx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SRIMfitFn",818,G__DmtpcProjectionCint_249_0_30, 100, -1, -1, 0, 1, 1, 1, 8, "D - - 10 - xx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SRIMLineFitFn",1178,G__DmtpcProjectionCint_249_0_31, 100, -1, -1, 0, 1, 1, 1, 8, "D - - 10 - xx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 9, 1, 4, 0, 
"U 'MaxCamClusterImage' - 10 - clust i - - 0 - track "
"d - - 0 - phi d - - 0 - x "
"d - - 0 - y U 'DmtpcGainMap' - 10 - gm "
"g - - 0 'false' flip d - - 0 '1' spacer_sigma "
"i - - 0 '10' ninterp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DmtpcProjectionCint_249_0_33, 85, G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DmtpcProjection::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DmtpcProjectionCint_249_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DmtpcProjection::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DmtpcProjectionCint_249_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DmtpcProjection::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DmtpcProjectionCint_249_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DmtpcProjection::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DmtpcProjectionCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DmtpcProjectionCint_249_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DmtpcProjectionCint_249_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DmtpcProjection::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DmtpcProjectionCint_249_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DmtpcProjection::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DmtpcProjectionCint_249_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DmtpcProjection::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DmtpcProjectionCint_249_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DmtpcProjection::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("DmtpcProjection", 1557, G__DmtpcProjectionCint_249_0_45, (int) ('i'), G__get_linked_tagnum(&G__DmtpcProjectionCintLN_DmtpcProjection), -1, 0, 1, 1, 1, 0, "u 'DmtpcProjection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DmtpcProjection", 1683, G__DmtpcProjectionCint_249_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DmtpcProjectionCint_249_0_47, (int) ('u'), G__get_linked_tagnum(&G__DmtpcProjectionCintLN_DmtpcProjection), -1, 1, 1, 1, 1, 0, "u 'DmtpcProjection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDmtpcProjectionCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDmtpcProjectionCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDmtpcProjectionCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DmtpcProjectionCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR = { "vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_MaxCamSRIM = { "MaxCamSRIM" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_DmtpcSRIMProjection = { "DmtpcSRIMProjection" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_DmtpcSRIMProjectioncLcLPARTICLE = { "DmtpcSRIMProjection::PARTICLE" , 101 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_TGraphErrors = { "TGraphErrors" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_DmtpcGainMap = { "DmtpcGainMap" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_DmtpcSkimEvent = { "DmtpcSkimEvent" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_MaxCamClusterImage = { "MaxCamClusterImage" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_DmtpcProjection = { "DmtpcProjection" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_DmtpcProjectioncLcLLineFitParams = { "DmtpcProjection::LineFitParams" , 115 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_DmtpcProjectioncLcLSRIMLineFitParams = { "DmtpcProjection::SRIMLineFitParams" , 115 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_DmtpcProjectioncLcLSRIMFitParams = { "DmtpcProjection::SRIMFitParams" , 115 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDmtpcProjectionCint() {
  G__DmtpcProjectionCintLN_TClass.tagnum = -1 ;
  G__DmtpcProjectionCintLN_TBuffer.tagnum = -1 ;
  G__DmtpcProjectionCintLN_TMemberInspector.tagnum = -1 ;
  G__DmtpcProjectionCintLN_TObject.tagnum = -1 ;
  G__DmtpcProjectionCintLN_TNamed.tagnum = -1 ;
  G__DmtpcProjectionCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__DmtpcProjectionCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcProjectionCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcProjectionCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__DmtpcProjectionCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__DmtpcProjectionCintLN_TH1.tagnum = -1 ;
  G__DmtpcProjectionCintLN_TF1.tagnum = -1 ;
  G__DmtpcProjectionCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcProjectionCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__DmtpcProjectionCintLN_MaxCamSRIM.tagnum = -1 ;
  G__DmtpcProjectionCintLN_DmtpcSRIMProjection.tagnum = -1 ;
  G__DmtpcProjectionCintLN_DmtpcSRIMProjectioncLcLPARTICLE.tagnum = -1 ;
  G__DmtpcProjectionCintLN_TGraphErrors.tagnum = -1 ;
  G__DmtpcProjectionCintLN_DmtpcGainMap.tagnum = -1 ;
  G__DmtpcProjectionCintLN_DmtpcSkimEvent.tagnum = -1 ;
  G__DmtpcProjectionCintLN_MaxCamClusterImage.tagnum = -1 ;
  G__DmtpcProjectionCintLN_DmtpcProjection.tagnum = -1 ;
  G__DmtpcProjectionCintLN_DmtpcProjectioncLcLLineFitParams.tagnum = -1 ;
  G__DmtpcProjectionCintLN_DmtpcProjectioncLcLSRIMLineFitParams.tagnum = -1 ;
  G__DmtpcProjectionCintLN_DmtpcProjectioncLcLSRIMFitParams.tagnum = -1 ;
  G__DmtpcProjectionCintLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDmtpcProjectionCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_TNamed);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_TH1);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_TF1);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_MaxCamSRIM);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_DmtpcSRIMProjection);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_DmtpcSRIMProjectioncLcLPARTICLE);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_TGraphErrors);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_DmtpcGainMap);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_DmtpcSkimEvent);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_MaxCamClusterImage);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_DmtpcProjection),sizeof(DmtpcProjection),-1,62720,(char*)NULL,G__setup_memvarDmtpcProjection,G__setup_memfuncDmtpcProjection);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_DmtpcProjectioncLcLLineFitParams);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_DmtpcProjectioncLcLSRIMLineFitParams);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_DmtpcProjectioncLcLSRIMFitParams);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcProjectionCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupDmtpcProjectionCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupDmtpcProjectionCint()");
  G__set_cpp_environmentDmtpcProjectionCint();
  G__cpp_setup_tagtableDmtpcProjectionCint();

  G__cpp_setup_inheritanceDmtpcProjectionCint();

  G__cpp_setup_typetableDmtpcProjectionCint();

  G__cpp_setup_memvarDmtpcProjectionCint();

  G__cpp_setup_memfuncDmtpcProjectionCint();
  G__cpp_setup_globalDmtpcProjectionCint();
  G__cpp_setup_funcDmtpcProjectionCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDmtpcProjectionCint();
  return;
}
class G__cpp_setup_initDmtpcProjectionCint {
  public:
    G__cpp_setup_initDmtpcProjectionCint() { G__add_setup_func("DmtpcProjectionCint",(G__incsetup)(&G__cpp_setupDmtpcProjectionCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDmtpcProjectionCint() { G__remove_setup_func("DmtpcProjectionCint"); }
};
G__cpp_setup_initDmtpcProjectionCint G__cpp_setup_initializerDmtpcProjectionCint;

