//
// File generated by rootcint at Tue Jul 12 17:19:15 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME MaxCamClusterImageCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MaxCamClusterImageCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MaxCamClusterImage_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MaxCamClusterImage(void *p = 0);
   static void *newArray_MaxCamClusterImage(Long_t size, void *p);
   static void delete_MaxCamClusterImage(void *p);
   static void deleteArray_MaxCamClusterImage(void *p);
   static void destruct_MaxCamClusterImage(void *p);
   static void streamer_MaxCamClusterImage(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MaxCamClusterImage*)
   {
      ::MaxCamClusterImage *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MaxCamClusterImage >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MaxCamClusterImage", ::MaxCamClusterImage::Class_Version(), "./MaxCamClusterImage.hh", 21,
                  typeid(::MaxCamClusterImage), DefineBehavior(ptr, ptr),
                  &::MaxCamClusterImage::Dictionary, isa_proxy, 0,
                  sizeof(::MaxCamClusterImage) );
      instance.SetNew(&new_MaxCamClusterImage);
      instance.SetNewArray(&newArray_MaxCamClusterImage);
      instance.SetDelete(&delete_MaxCamClusterImage);
      instance.SetDeleteArray(&deleteArray_MaxCamClusterImage);
      instance.SetDestructor(&destruct_MaxCamClusterImage);
      instance.SetStreamerFunc(&streamer_MaxCamClusterImage);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MaxCamClusterImage*)
   {
      return GenerateInitInstanceLocal((::MaxCamClusterImage*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MaxCamClusterImage*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *MaxCamClusterImage::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MaxCamClusterImage::Class_Name()
{
   return "MaxCamClusterImage";
}

//______________________________________________________________________________
const char *MaxCamClusterImage::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MaxCamClusterImage*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MaxCamClusterImage::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MaxCamClusterImage*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MaxCamClusterImage::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MaxCamClusterImage*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MaxCamClusterImage::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MaxCamClusterImage*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void MaxCamClusterImage::Streamer(TBuffer &R__b)
{
   // Stream an object of class MaxCamClusterImage.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> _image;
      {
         vector<vector<int> > &R__stl =  _pixels;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_pixels streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<vector<int> > &R__stl =  _pixelsred;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_pixelsred streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b >> _nbinsx;
      R__b >> _nbinsy;
      R__b >> _nbins;
      R__b >> _time;
      R__b >> image_rms;
      R__b.CheckByteCount(R__s, R__c, MaxCamClusterImage::IsA());
   } else {
      R__c = R__b.WriteVersion(MaxCamClusterImage::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << _image;
      {
         vector<vector<int> > &R__stl =  _pixels;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_pixels streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<vector<int> > &R__stl =  _pixelsred;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("_pixelsred streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            vector<vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      R__b << _nbinsx;
      R__b << _nbinsy;
      R__b << _nbins;
      R__b << _time;
      R__b << image_rms;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MaxCamClusterImage::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MaxCamClusterImage.
      TClass *R__cl = ::MaxCamClusterImage::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_image", &_image);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pixels", (void*)&_pixels);
      R__insp.InspectMember("vector<vector<int> >", (void*)&_pixels, "_pixels.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pixelsred", (void*)&_pixelsred);
      R__insp.InspectMember("vector<vector<int> >", (void*)&_pixelsred, "_pixelsred.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nbinsx", &_nbinsx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nbinsy", &_nbinsy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nbins", &_nbins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_time", &_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "image_rms", &image_rms);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MaxCamClusterImage(void *p) {
      return  p ? new(p) ::MaxCamClusterImage : new ::MaxCamClusterImage;
   }
   static void *newArray_MaxCamClusterImage(Long_t nElements, void *p) {
      return p ? new(p) ::MaxCamClusterImage[nElements] : new ::MaxCamClusterImage[nElements];
   }
   // Wrapper around operator delete
   static void delete_MaxCamClusterImage(void *p) {
      delete ((::MaxCamClusterImage*)p);
   }
   static void deleteArray_MaxCamClusterImage(void *p) {
      delete [] ((::MaxCamClusterImage*)p);
   }
   static void destruct_MaxCamClusterImage(void *p) {
      typedef ::MaxCamClusterImage current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MaxCamClusterImage(TBuffer &buf, void *obj) {
      ((::MaxCamClusterImage*)obj)->::MaxCamClusterImage::Streamer(buf);
   }
} // end of namespace ROOT for class ::MaxCamClusterImage

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

namespace ROOT {
   void vectorlEvectorlEintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEintgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEintgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEintgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEintgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEintgRsPgR(void *p);
   static void destruct_vectorlEvectorlEintgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<int> >*)
   {
      vector<vector<int> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<int> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<int> >", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<int> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEintgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<int> >) );
      instance.SetNew(&new_vectorlEvectorlEintgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEintgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEintgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEintgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEintgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<int> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<int> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEintgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<int> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEintgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<int> > : new vector<vector<int> >;
   }
   static void *newArray_vectorlEvectorlEintgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<int> >[nElements] : new vector<vector<int> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEintgRsPgR(void *p) {
      delete ((vector<vector<int> >*)p);
   }
   static void deleteArray_vectorlEvectorlEintgRsPgR(void *p) {
      delete [] ((vector<vector<int> >*)p);
   }
   static void destruct_vectorlEvectorlEintgRsPgR(void *p) {
      typedef vector<vector<int> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<int> >

/********************************************************
* MaxCamClusterImageCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMaxCamClusterImageCint();

extern "C" void G__set_cpp_environmentMaxCamClusterImageCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("MaxCamClusterImage.hh");
  G__cpp_reset_tagtableMaxCamClusterImageCint();
}
#include <new>
extern "C" int G__cpp_dllrevMaxCamClusterImageCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MaxCamClusterImage */
static int G__MaxCamClusterImageCint_318_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamClusterImage* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamClusterImage[n];
     } else {
       p = new((void*) gvp) MaxCamClusterImage[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamClusterImage;
     } else {
       p = new((void*) gvp) MaxCamClusterImage;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_MaxCamClusterImage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamClusterImage* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MaxCamClusterImage((TH2*) G__int(libp->para[0]), (TDatime*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) MaxCamClusterImage((TH2*) G__int(libp->para[0]), (TDatime*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_MaxCamClusterImage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamClusterImage* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MaxCamClusterImage((TH2*) G__int(libp->para[0]), (TTimeStamp*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) MaxCamClusterImage((TH2*) G__int(libp->para[0]), (TTimeStamp*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_MaxCamClusterImage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((MaxCamClusterImage*) G__getstructoffset())->addCluster(*((vector<int>*) G__int(libp->para[0])), *((vector<int>*) G__int(libp->para[1]))
, (vector<vector<char> >*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MaxCamClusterImage*) G__getstructoffset())->addCluster(*((vector<int>*) G__int(libp->para[0])), *((vector<int>*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      ((MaxCamClusterImage*) G__getstructoffset())->addCluster(*((vector<int>*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MaxCamClusterImage*) G__getstructoffset())->getNCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MaxCamClusterImage*) G__getstructoffset())->getIntegral((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const MaxCamClusterImage*) G__getstructoffset())->getIntegralWithGainMap((int) G__int(libp->para[0]), (DmtpcGainMap*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const MaxCamClusterImage*) G__getstructoffset())->getIntegralWithGainMap((int) G__int(libp->para[0]), (DmtpcGainMap*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MaxCamClusterImage*) G__getstructoffset())->getLength((int) G__int(libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3])
, *(double*) G__Doubleref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MaxCamClusterImage*) G__getstructoffset())->getDiffusedLength((int) G__int(libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3])
, *(double*) G__Doubleref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MaxCamClusterImage*) G__getstructoffset())->getPhi((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MaxCamClusterImage*) G__getstructoffset())->getXY((int) G__int(libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((const MaxCamClusterImage*) G__getstructoffset())->isInCluster((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((const MaxCamClusterImage*) G__getstructoffset())->isInCluster((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MaxCamClusterImage*) G__getstructoffset())->isContainedInRegion((int) G__int(libp->para[0]), (TCutG*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MaxCamClusterImage*) G__getstructoffset())->hitsVeto((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MaxCamClusterImage*) G__getstructoffset())->crossesCameras((int) G__int(libp->para[0]), (DmtpcStitchInfo*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MaxCamClusterImage*) G__getstructoffset())->hitsInactive((int) G__int(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamClusterImage*) G__getstructoffset())->applyRedThreshold((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MaxCamClusterImage*) G__getstructoffset())->intersectsRegion((int) G__int(libp->para[0]), (TCutG*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<int> >* pobj;
         const vector<vector<int> > xobj = ((const MaxCamClusterImage*) G__getstructoffset())->getClusters();
         pobj = new vector<vector<int> >(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int>* pobj;
         const vector<int> xobj = ((const MaxCamClusterImage*) G__getstructoffset())->getCluster((int) G__int(libp->para[0]));
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int>* pobj;
         const vector<int> xobj = ((const MaxCamClusterImage*) G__getstructoffset())->getClusterRed((int) G__int(libp->para[0]));
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getTheta((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MaxCamClusterImage*) G__getstructoffset())->getTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->getImage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamClusterImage*) G__getstructoffset())->forgetImage();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamClusterImage*) G__getstructoffset())->setImage((TH2*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamClusterImage*) G__getstructoffset())->changeImage((TH2*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamClusterImage*) G__getstructoffset())->changeImageWithThreshold((TH2*) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamClusterImage*) G__getstructoffset())->setTime((TDatime*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamClusterImage*) G__getstructoffset())->setTime((TTimeStamp*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamClusterImage*) G__getstructoffset())->getEllipseAxes((int) G__int(libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getEnergyDensity((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((MaxCamClusterImage*) G__getstructoffset())->morphologicalOperation((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (bool) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((MaxCamClusterImage*) G__getstructoffset())->morphologicalOperation((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const MaxCamClusterImage*) G__getstructoffset())->getPhi2((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const MaxCamClusterImage*) G__getstructoffset())->getPhi2((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const MaxCamClusterImage*) G__getstructoffset())->getPhi2((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MaxCamClusterImage*) G__getstructoffset())->getPhi3((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MaxCamClusterImage*) G__getstructoffset())->getPhi4((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getLength2((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getLength2((int) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getSkewness((int) G__int(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MaxCamClusterImage*) G__getstructoffset())->getAsymmetry((int) G__int(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MaxCamClusterImage*) G__getstructoffset())->hitsEdge((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getCygnusAngle(
(int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (MaxCamClusterImage::CAMERA_ORIENTATION) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6])));
      break;
   case 6:
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getCygnusAngle((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (MaxCamClusterImage::CAMERA_ORIENTATION) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getCygnusAngle((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (MaxCamClusterImage::CAMERA_ORIENTATION) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getCygnusAngle((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (MaxCamClusterImage::CAMERA_ORIENTATION) G__int(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getCygnusAngle((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (MaxCamClusterImage::CAMERA_ORIENTATION) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamClusterImage*) G__getstructoffset())->getRADec(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (TDatime*) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (MaxCamClusterImage::CAMERA_ORIENTATION) G__int(libp->para[6]), *(double*) G__Doubleref(&libp->para[7])
, *(double*) G__Doubleref(&libp->para[8]), *(double*) G__Doubleref(&libp->para[9])
, *(double*) G__Doubleref(&libp->para[10]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getMean((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getRMS((int) G__int(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getMax((int) G__int(libp->para[0]), (int*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getMax((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((MaxCamClusterImage*) G__getstructoffset())->getNumNeighbors((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((MaxCamClusterImage*) G__getstructoffset())->getNumNeighbors((int) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MaxCamClusterImage*) G__getstructoffset())->drawCluster((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MaxCamClusterImage*) G__getstructoffset())->drawCluster((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      {
         const list<TGraph*>* pobj;
         const list<TGraph*> xobj = ((const MaxCamClusterImage*) G__getstructoffset())->getClusterBoundary((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (bool) G__int(libp->para[4]));
         pobj = new list<TGraph*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 4:
      {
         const list<TGraph*>* pobj;
         const list<TGraph*> xobj = ((const MaxCamClusterImage*) G__getstructoffset())->getClusterBoundary((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (bool) G__int(libp->para[3]));
         pobj = new list<TGraph*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const list<TGraph*>* pobj;
         const list<TGraph*> xobj = ((const MaxCamClusterImage*) G__getstructoffset())->getClusterBoundary((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
         pobj = new list<TGraph*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         const list<TGraph*>* pobj;
         const list<TGraph*> xobj = ((const MaxCamClusterImage*) G__getstructoffset())->getClusterBoundary((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new list<TGraph*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         const list<TGraph*>* pobj;
         const list<TGraph*> xobj = ((const MaxCamClusterImage*) G__getstructoffset())->getClusterBoundary((int) G__int(libp->para[0]));
         pobj = new list<TGraph*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((const MaxCamClusterImage*) G__getstructoffset())->getClusterPerimeter((int) G__int(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const MaxCamClusterImage*) G__getstructoffset())->getClusterPerimeter((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamClusterImage*) G__getstructoffset())->drawRegion((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((const MaxCamClusterImage*) G__getstructoffset())->clusterBounds((int) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (int*) G__int(libp->para[2]), (int*) G__int(libp->para[3])
, (int*) G__int(libp->para[4]), (int) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((const MaxCamClusterImage*) G__getstructoffset())->clusterBounds((int) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (int*) G__int(libp->para[2]), (int*) G__int(libp->para[3])
, (int*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((const MaxCamClusterImage*) G__getstructoffset())->getXYFromBinNo((int) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (int*) G__int(libp->para[2]), (bool) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((const MaxCamClusterImage*) G__getstructoffset())->getXYFromBinNo((int) G__int(libp->para[0]), (int*) G__int(libp->para[1])
, (int*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MaxCamClusterImage*) G__getstructoffset())->getMinMaxPosition((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getMoment((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])
, *((TString*) G__int(libp->para[4]))));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getMoment((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getMoment((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getMoment2((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (char*) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getMoment2((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getMoment2((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((MaxCamClusterImage*) G__getstructoffset())->getMomentsUnbinned((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (int*) G__int(libp->para[3])
, (double*) G__int(libp->para[4]), (bool) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((MaxCamClusterImage*) G__getstructoffset())->getMomentsUnbinned((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (int*) G__int(libp->para[3])
, (double*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      ((MaxCamClusterImage*) G__getstructoffset())->getMoments(
(int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (int*) G__int(libp->para[3])
, (double*) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (char*) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((MaxCamClusterImage*) G__getstructoffset())->getMoments((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (int*) G__int(libp->para[3])
, (double*) G__int(libp->para[4]), (int) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((MaxCamClusterImage*) G__getstructoffset())->getMoments((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (int*) G__int(libp->para[3])
, (double*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((MaxCamClusterImage*) G__getstructoffset())->getRayleigh((int) G__int(libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), (char*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((MaxCamClusterImage*) G__getstructoffset())->getRayleigh((int) G__int(libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->projectCluster((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), *((TString*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->projectCluster((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->getClusterHist(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (DmtpcGainMap*) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (const char*) G__int(libp->para[5])
, (bool) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->getClusterHist((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (DmtpcGainMap*) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (const char*) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->getClusterHist((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (DmtpcGainMap*) G__int(libp->para[3])
, (double) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->getClusterHist((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (DmtpcGainMap*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->getClusterHist((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->getClusterHist((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->getClusterHist((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->projectClusterInterpolate(
(int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (DmtpcGainMap*) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (const char*) G__int(libp->para[6]), (double*) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->projectClusterInterpolate(
(int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (DmtpcGainMap*) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (const char*) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->projectClusterInterpolate((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (DmtpcGainMap*) G__int(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->projectClusterInterpolate((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (DmtpcGainMap*) G__int(libp->para[3])
, (double) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->projectClusterInterpolate((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (DmtpcGainMap*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->projectClusterInterpolate((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->projectClusterInterpolate((int) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->getLeftProj((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->getLeftProj((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->getLeftProj((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((const MaxCamClusterImage*) G__getstructoffset())->getLeftProj((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamClusterImage*) G__getstructoffset())->mergeTracks((unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamClusterImage*) G__getstructoffset())->getIntegral2((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((const MaxCamClusterImage*) G__getstructoffset())->meanRmsNoClustersNoHotSingle((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((const MaxCamClusterImage*) G__getstructoffset())->meanRmsNoClustersNoHotSingle((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MaxCamClusterImage*) G__getstructoffset())->changeHistType((char) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MaxCamClusterImage*) G__getstructoffset())->changeHistType();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MaxCamClusterImage*) G__getstructoffset())->roundValues((bool) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MaxCamClusterImage*) G__getstructoffset())->roundValues((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MaxCamClusterImage*) G__getstructoffset())->roundValues();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MaxCamClusterImage::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamClusterImage::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MaxCamClusterImage::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MaxCamClusterImage::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamClusterImage*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamClusterImage::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MaxCamClusterImage::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamClusterImage::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterImageCint_318_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MaxCamClusterImage::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MaxCamClusterImageCint_318_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MaxCamClusterImage* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MaxCamClusterImage(*(MaxCamClusterImage*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_MaxCamClusterImage));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MaxCamClusterImage G__TMaxCamClusterImage;
static int G__MaxCamClusterImageCint_318_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MaxCamClusterImage*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MaxCamClusterImage*) (soff+(sizeof(MaxCamClusterImage)*i)))->~G__TMaxCamClusterImage();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MaxCamClusterImage*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MaxCamClusterImage*) (soff))->~G__TMaxCamClusterImage();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MaxCamClusterImageCint_318_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamClusterImage* dest = (MaxCamClusterImage*) G__getstructoffset();
   *dest = *(MaxCamClusterImage*) libp->para[0].ref;
   const MaxCamClusterImage& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MaxCamClusterImage */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMaxCamClusterImageCint {
 public:
  G__Sizep2memfuncMaxCamClusterImageCint(): p(&G__Sizep2memfuncMaxCamClusterImageCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMaxCamClusterImageCint::*p)();
};

size_t G__get_sizep2memfuncMaxCamClusterImageCint()
{
  G__Sizep2memfuncMaxCamClusterImageCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMaxCamClusterImageCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_MaxCamClusterImage))) {
     MaxCamClusterImage *G__Lderived;
     G__Lderived=(MaxCamClusterImage*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_MaxCamClusterImage),G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMaxCamClusterImageCint() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<double> >",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<std::vector<double> > >",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > >",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH2F*>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<char> >",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<char,allocator<char> > >",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<int> >",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("CAMERA_ORIENTATION",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_MaxCamClusterImagecLcLCAMERA_ORIENTATION),0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_MaxCamClusterImage));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<TGraph*>",117,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_listlETGraphmUcOallocatorlETGraphmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MaxCamClusterImage */
static void G__setup_memvarMaxCamClusterImage(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_MaxCamClusterImage));
   { MaxCamClusterImage *p; p=(MaxCamClusterImage*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_MaxCamClusterImagecLcLCAMERA_ORIENTATION),-1,-2,1,G__FastAllocString(2048).Format("BOTTOM=%lldLL",(long long)MaxCamClusterImage::BOTTOM).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_MaxCamClusterImagecLcLCAMERA_ORIENTATION),-1,-2,1,G__FastAllocString(2048).Format("TOP=%lldLL",(long long)MaxCamClusterImage::TOP).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TH2),-1,-1,4,"_image=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<int> >"),-1,4,"_pixels=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<int> >"),-1,4,"_pixelsred=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_nbinsx=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_nbinsy=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_nbins=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_time=",0,"in julian days past the J2000 epoch");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"image_rms=",0,"Will be calculated once per image if needed.  ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMaxCamClusterImageCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMaxCamClusterImage(void) {
   /* MaxCamClusterImage */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_MaxCamClusterImage));
   G__memfunc_setup("MaxCamClusterImage",1788,G__MaxCamClusterImageCint_318_0_1, 105, G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_MaxCamClusterImage), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxCamClusterImage",1788,G__MaxCamClusterImageCint_318_0_2, 105, G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_MaxCamClusterImage), -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 0 - image U 'TDatime' - 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxCamClusterImage",1788,G__MaxCamClusterImageCint_318_0_3, 105, G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_MaxCamClusterImage), -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 0 - image U 'TTimeStamp' - 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCluster",1035,G__MaxCamClusterImageCint_318_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<int,allocator<int> >' 'vector<int>' 0 - newpx u 'vector<int,allocator<int> >' 'vector<int>' 0 'vector<int>()' redpx "
"U 'vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >' 'vector<vector<char> >' 0 '0' frac", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCluster",1136,G__MaxCamClusterImageCint_318_0_5, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIntegral",1142,G__MaxCamClusterImageCint_318_0_6, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIntegralWithGainMap",2223,G__MaxCamClusterImageCint_318_0_7, 100, -1, -1, 0, 3, 1, 1, 8, 
"i - - 0 - i U 'DmtpcGainMap' - 10 - gainMap "
"d - - 0 '-1' mingain", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLength",930,G__MaxCamClusterImageCint_318_0_8, 100, -1, -1, 0, 5, 1, 1, 8, 
"i - - 0 - i d - - 1 - x1 "
"d - - 1 - y1 d - - 1 - x2 "
"d - - 1 - y2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDiffusedLength",1740,G__MaxCamClusterImageCint_318_0_9, 100, -1, -1, 0, 5, 1, 1, 8, 
"i - - 0 - i d - - 1 - x1 "
"d - - 1 - y1 d - - 1 - x2 "
"d - - 1 - y2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__MaxCamClusterImageCint_318_0_10, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXY",497,G__MaxCamClusterImageCint_318_0_11, 121, -1, -1, 0, 3, 1, 1, 8, 
"i - - 0 - i d - - 1 - x "
"d - - 1 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInCluster",1141,G__MaxCamClusterImageCint_318_0_12, 103, -1, -1, 0, 3, 1, 1, 8, 
"i - - 0 - i i - - 0 - bin "
"g - - 0 'false' red", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isContainedInRegion",1932,G__MaxCamClusterImageCint_318_0_13, 103, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - itrk U 'TCutG' - 0 - region", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hitsVeto",854,G__MaxCamClusterImageCint_318_0_14, 103, -1, -1, 0, 3, 1, 1, 8, 
"i - - 0 - itrk d - - 0 - rin "
"d - - 0 - rout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("crossesCameras",1470,G__MaxCamClusterImageCint_318_0_15, 103, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - itrk U 'DmtpcStitchInfo' - 10 - stitch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hitsInactive",1259,G__MaxCamClusterImageCint_318_0_16, 103, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - itrk d - - 0 - rout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("applyRedThreshold",1774,G__MaxCamClusterImageCint_318_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - threshold", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("intersectsRegion",1704,G__MaxCamClusterImageCint_318_0_18, 103, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - itrk U 'TCutG' - 0 - region", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusters",1173,G__MaxCamClusterImageCint_318_0_19, 117, G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), G__defined_typename("vector<vector<int> >"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCluster",1058,G__MaxCamClusterImageCint_318_0_20, 117, G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusterRed",1341,G__MaxCamClusterImageCint_318_0_21, 117, G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__MaxCamClusterImageCint_318_0_22, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__MaxCamClusterImageCint_318_0_23, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getImage",803,G__MaxCamClusterImageCint_318_0_24, 85, G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TH2), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("forgetImage",1130,G__MaxCamClusterImageCint_318_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setImage",815,G__MaxCamClusterImageCint_318_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TH2' - 0 - img", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("changeImage",1097,G__MaxCamClusterImageCint_318_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TH2' - 0 - newimage", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("changeImageWithThreshold",2450,G__MaxCamClusterImageCint_318_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TH2' - 0 - newimage d - - 0 - threshold", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime",731,G__MaxCamClusterImageCint_318_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TDatime' - 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime",731,G__MaxCamClusterImageCint_318_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTimeStamp' - 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEllipseAxes",1439,G__MaxCamClusterImageCint_318_0_31, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - i d - - 1 - a "
"d - - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEnergyDensity",1674,G__MaxCamClusterImageCint_318_0_32, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("morphologicalOperation",2337,G__MaxCamClusterImageCint_318_0_33, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - i i - - 0 - nerode "
"i - - 0 - ndilate g - - 0 'false' red", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi2",659,G__MaxCamClusterImageCint_318_0_34, 100, -1, -1, 0, 3, 1, 1, 8, 
"i - - 0 - i i - - 0 '0' nerode "
"i - - 0 '0' ndilate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi3",660,G__MaxCamClusterImageCint_318_0_35, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi4",661,G__MaxCamClusterImageCint_318_0_36, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLength2",980,G__MaxCamClusterImageCint_318_0_37, 100, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - i d - - 0 - theta "
"d - - 0 '1' pixpermm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSkewness",1171,G__MaxCamClusterImageCint_318_0_38, 100, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - i d - - 0 - theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAsymmetry",1291,G__MaxCamClusterImageCint_318_0_39, 100, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - i d - - 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hitsEdge",813,G__MaxCamClusterImageCint_318_0_40, 103, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCygnusAngle",1440,G__MaxCamClusterImageCint_318_0_41, 100, -1, -1, 0, 7, 1, 1, 0, 
"i - - 0 - i d - - 0 - yangN "
"u 'MaxCamClusterImage::CAMERA_ORIENTATION' 'MaxCamClusterImage::CAMERA_ORIENTATION' 0 - cam_orientation d - - 0 '42.373611' lat "
"d - - 0 '-71.110556' lng d - - 0 'DBL_MAX' phi "
"d - - 0 'DBL_MAX' theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRADec",735,G__MaxCamClusterImageCint_318_0_42, 121, -1, -1, 0, 11, 1, 1, 0, 
"d - - 0 - phi d - - 0 - theta "
"U 'TDatime' - 0 - time d - - 0 - lat "
"d - - 0 - lon d - - 0 - nang "
"u 'MaxCamClusterImage::CAMERA_ORIENTATION' 'MaxCamClusterImage::CAMERA_ORIENTATION' 0 - cam_orientation d - - 1 - ra "
"d - - 1 - dec d - - 1 - l "
"d - - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMean",705,G__MaxCamClusterImageCint_318_0_43, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRMS",562,G__MaxCamClusterImageCint_318_0_44, 100, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - i d - - 0 - mean", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMax",614,G__MaxCamClusterImageCint_318_0_45, 100, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - i I - - 0 'NULL' maxBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumNeighbors",1553,G__MaxCamClusterImageCint_318_0_46, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - i d - - 0 - thresholdInRMSUnits "
"i - - 0 '-1' maxBin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawCluster",1168,G__MaxCamClusterImageCint_318_0_47, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - i i - - 0 '20' borderpx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusterBoundary",1894,G__MaxCamClusterImageCint_318_0_48, 117, G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_listlETGraphmUcOallocatorlETGraphmUgRsPgR), G__defined_typename("list<TGraph*>"), 0, 5, 1, 1, 8, 
"i - - 0 - i i - - 0 '15' color "
"i - - 0 '2' linewidth g - - 0 'false' draw "
"g - - 0 'false' red", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusterPerimeter",1999,G__MaxCamClusterImageCint_318_0_49, 105, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - i g - - 0 'false' red", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawRegion",1042,G__MaxCamClusterImageCint_318_0_50, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - xmin i - - 0 - xmax "
"i - - 0 - ymin i - - 0 - ymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clusterBounds",1389,G__MaxCamClusterImageCint_318_0_51, 121, -1, -1, 0, 6, 1, 1, 8, 
"i - - 0 - i I - - 0 - xmin "
"I - - 0 - xmax I - - 0 - ymin "
"I - - 0 - ymax i - - 0 '20' borderpx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXYFromBinNo",1371,G__MaxCamClusterImageCint_318_0_52, 121, -1, -1, 0, 4, 1, 1, 8, 
"i - - 0 - bin I - - 0 - x "
"I - - 0 - y g - - 0 'false' undobinning", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinMaxPosition",1759,G__MaxCamClusterImageCint_318_0_53, 121, -1, -1, 0, 4, 1, 1, 8, 
"i - - 0 - i d - - 0 - phi "
"d - - 1 - minVal d - - 1 - maxVal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMoment",944,G__MaxCamClusterImageCint_318_0_54, 100, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - i i - - 0 - n "
"d - - 0 - phi i - - 0 '4' nbins "
"u 'TString' - 0 '\"totalBins\"' binType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMoment2",994,G__MaxCamClusterImageCint_318_0_55, 100, -1, -1, 0, 5, 1, 1, 0, 
"i - - 0 - i i - - 0 - n "
"d - - 0 - phi i - - 0 '4' nbins "
"C - - 0 '\"pixelPerBin\"' binType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMomentsUnbinned",1878,G__MaxCamClusterImageCint_318_0_56, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - i d - - 0 - phi "
"i - - 0 - n I - - 0 - moments "
"D - - 0 - values g - - 0 'false' useClustRed", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMoments",1059,G__MaxCamClusterImageCint_318_0_57, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - - 0 - i d - - 0 - phi "
"i - - 0 - n I - - 0 - moments "
"D - - 0 - values i - - 0 '8' binning "
"C - - 0 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRayleigh",1141,G__MaxCamClusterImageCint_318_0_58, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - i d - - 1 - x "
"d - - 1 - y C - - 0 '\"c\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("projectCluster",1497,G__MaxCamClusterImageCint_318_0_59, 85, G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TH1), -1, 0, 4, 1, 1, 8, 
"i - - 0 - i d - - 0 - phi "
"i - - 0 - binning u 'TString' - 0 '\"totalBins\"' binType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusterHist",1466,G__MaxCamClusterImageCint_318_0_60, 85, G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TH2), -1, 0, 7, 1, 1, 8, 
"i - - 0 - i i - - 0 '1' padding "
"g - - 0 'false' red U 'DmtpcGainMap' - 10 '0' map "
"d - - 0 '0' min_gain C - - 10 '0' name "
"g - - 0 'true' setzero", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("projectClusterInterpolate",2656,G__MaxCamClusterImageCint_318_0_61, 85, G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TH1), -1, 0, 8, 1, 1, 8, 
"i - - 0 - i d - - 0 - phi "
"C - - 10 '\"bilinear\"' interpolation U 'DmtpcGainMap' - 10 '0' map "
"d - - 0 '0' min_gain g - - 0 'true' reset_xaxis "
"C - - 10 '0' name D - - 0 '0' startpos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftProj",1126,G__MaxCamClusterImageCint_318_0_62, 85, G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TH1), -1, 0, 4, 1, 1, 8, 
"i - - 0 - i i - - 0 '8' border "
"g - - 0 'true' ignoreClusters d - - 0 '0.01' outlier_pct", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mergeTracks",1144,G__MaxCamClusterImageCint_318_0_63, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - - 0 - i h - - 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIntegral2",1192,G__MaxCamClusterImageCint_318_0_64, 100, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - i i - - 0 - nbin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("meanRmsNoClustersNoHotSingle",2863,G__MaxCamClusterImageCint_318_0_65, 121, -1, -1, 0, 3, 1, 1, 8, 
"D - - 0 - mean D - - 0 - rms "
"d - - 0 '3' outlierFactor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("changeHistType",1440,G__MaxCamClusterImageCint_318_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "c - - 0 ''S'' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("roundValues",1176,G__MaxCamClusterImageCint_318_0_67, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - - 0 'true' onlyOutsideClusters d - - 0 '1.' roundTo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MaxCamClusterImageCint_318_0_68, 85, G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MaxCamClusterImage::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MaxCamClusterImageCint_318_0_69, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamClusterImage::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MaxCamClusterImageCint_318_0_70, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MaxCamClusterImage::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MaxCamClusterImageCint_318_0_71, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MaxCamClusterImage::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MaxCamClusterImageCint_318_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MaxCamClusterImageCint_318_0_76, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamClusterImage::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MaxCamClusterImageCint_318_0_77, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MaxCamClusterImage::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MaxCamClusterImageCint_318_0_78, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamClusterImage::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MaxCamClusterImageCint_318_0_79, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MaxCamClusterImage::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MaxCamClusterImage", 1788, G__MaxCamClusterImageCint_318_0_80, (int) ('i'), G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_MaxCamClusterImage), -1, 0, 1, 1, 1, 0, "u 'MaxCamClusterImage' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MaxCamClusterImage", 1914, G__MaxCamClusterImageCint_318_0_81, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MaxCamClusterImageCint_318_0_82, (int) ('u'), G__get_linked_tagnum(&G__MaxCamClusterImageCintLN_MaxCamClusterImage), -1, 1, 1, 1, 1, 0, "u 'MaxCamClusterImage' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMaxCamClusterImageCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMaxCamClusterImageCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMaxCamClusterImageCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MaxCamClusterImageCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TH2 = { "TH2" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TDatime = { "TDatime" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_DmtpcStitchInfo = { "DmtpcStitchInfo" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR = { "vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR = { "vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >,allocator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR = { "vector<TH2F*,allocator<TH2F*> >" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH2F*,allocator<TH2F*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TTimeStamp = { "TTimeStamp" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_DmtpcGainMap = { "DmtpcGainMap" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_TCutG = { "TCutG" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_MaxCamClusterImage = { "MaxCamClusterImage" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR = { "vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR = { "vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_MaxCamClusterImagecLcLCAMERA_ORIENTATION = { "MaxCamClusterImage::CAMERA_ORIENTATION" , 101 , -1 };
G__linked_taginfo G__MaxCamClusterImageCintLN_listlETGraphmUcOallocatorlETGraphmUgRsPgR = { "list<TGraph*,allocator<TGraph*> >" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMaxCamClusterImageCint() {
  G__MaxCamClusterImageCintLN_TClass.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TBuffer.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TMemberInspector.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TObject.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TString.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TH1.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TH2.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TDatime.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_DmtpcStitchInfo.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TTimeStamp.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_DmtpcGainMap.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_TCutG.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_MaxCamClusterImage.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_MaxCamClusterImagecLcLCAMERA_ORIENTATION.tagnum = -1 ;
  G__MaxCamClusterImageCintLN_listlETGraphmUcOallocatorlETGraphmUgRsPgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMaxCamClusterImageCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TString);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TH1);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TH2);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TDatime);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_DmtpcStitchInfo);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_vectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcOallocatorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_vectorlETH2FmUcOallocatorlETH2FmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlETH2FmUcOallocatorlETH2FmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TTimeStamp);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_DmtpcGainMap);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_TCutG);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_MaxCamClusterImage),sizeof(MaxCamClusterImage),-1,62720,(char*)NULL,G__setup_memvarMaxCamClusterImage,G__setup_memfuncMaxCamClusterImage);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_MaxCamClusterImagecLcLCAMERA_ORIENTATION);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterImageCintLN_listlETGraphmUcOallocatorlETGraphmUgRsPgR);
}
extern "C" void G__cpp_setupMaxCamClusterImageCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupMaxCamClusterImageCint()");
  G__set_cpp_environmentMaxCamClusterImageCint();
  G__cpp_setup_tagtableMaxCamClusterImageCint();

  G__cpp_setup_inheritanceMaxCamClusterImageCint();

  G__cpp_setup_typetableMaxCamClusterImageCint();

  G__cpp_setup_memvarMaxCamClusterImageCint();

  G__cpp_setup_memfuncMaxCamClusterImageCint();
  G__cpp_setup_globalMaxCamClusterImageCint();
  G__cpp_setup_funcMaxCamClusterImageCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMaxCamClusterImageCint();
  return;
}
class G__cpp_setup_initMaxCamClusterImageCint {
  public:
    G__cpp_setup_initMaxCamClusterImageCint() { G__add_setup_func("MaxCamClusterImageCint",(G__incsetup)(&G__cpp_setupMaxCamClusterImageCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMaxCamClusterImageCint() { G__remove_setup_func("MaxCamClusterImageCint"); }
};
G__cpp_setup_initMaxCamClusterImageCint G__cpp_setup_initializerMaxCamClusterImageCint;

