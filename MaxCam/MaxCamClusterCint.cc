//
// File generated by rootcint at Fri Jul 15 15:52:40 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME MaxCamClusterCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MaxCamClusterCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MaxCamCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MaxCamCluster(void *p = 0);
   static void *newArray_MaxCamCluster(Long_t size, void *p);
   static void delete_MaxCamCluster(void *p);
   static void deleteArray_MaxCamCluster(void *p);
   static void destruct_MaxCamCluster(void *p);
   static void streamer_MaxCamCluster(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MaxCamCluster*)
   {
      ::MaxCamCluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MaxCamCluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MaxCamCluster", ::MaxCamCluster::Class_Version(), "./MaxCamCluster.hh", 13,
                  typeid(::MaxCamCluster), DefineBehavior(ptr, ptr),
                  &::MaxCamCluster::Dictionary, isa_proxy, 0,
                  sizeof(::MaxCamCluster) );
      instance.SetNew(&new_MaxCamCluster);
      instance.SetNewArray(&newArray_MaxCamCluster);
      instance.SetDelete(&delete_MaxCamCluster);
      instance.SetDeleteArray(&deleteArray_MaxCamCluster);
      instance.SetDestructor(&destruct_MaxCamCluster);
      instance.SetStreamerFunc(&streamer_MaxCamCluster);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MaxCamCluster*)
   {
      return GenerateInitInstanceLocal((::MaxCamCluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MaxCamCluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *MaxCamCluster::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MaxCamCluster::Class_Name()
{
   return "MaxCamCluster";
}

//______________________________________________________________________________
const char *MaxCamCluster::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MaxCamCluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MaxCamCluster::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MaxCamCluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MaxCamCluster::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MaxCamCluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MaxCamCluster::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MaxCamCluster*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void MaxCamCluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class MaxCamCluster.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> _image;
      {
         vector<int> &R__stl =  _pixels;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> _nbinsx;
      R__b >> _nbinsy;
      R__b >> _nbins;
      R__b >> _time;
      R__b.CheckByteCount(R__s, R__c, MaxCamCluster::IsA());
   } else {
      R__c = R__b.WriteVersion(MaxCamCluster::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << _image;
      {
         vector<int> &R__stl =  _pixels;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << _nbinsx;
      R__b << _nbinsy;
      R__b << _nbins;
      R__b << _time;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MaxCamCluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MaxCamCluster.
      TClass *R__cl = ::MaxCamCluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_image", &_image);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pixels", (void*)&_pixels);
      R__insp.InspectMember("vector<int>", (void*)&_pixels, "_pixels.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nbinsx", &_nbinsx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nbinsy", &_nbinsy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nbins", &_nbins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_time", &_time);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MaxCamCluster(void *p) {
      return  p ? new(p) ::MaxCamCluster : new ::MaxCamCluster;
   }
   static void *newArray_MaxCamCluster(Long_t nElements, void *p) {
      return p ? new(p) ::MaxCamCluster[nElements] : new ::MaxCamCluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_MaxCamCluster(void *p) {
      delete ((::MaxCamCluster*)p);
   }
   static void deleteArray_MaxCamCluster(void *p) {
      delete [] ((::MaxCamCluster*)p);
   }
   static void destruct_MaxCamCluster(void *p) {
      typedef ::MaxCamCluster current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MaxCamCluster(TBuffer &buf, void *obj) {
      ((::MaxCamCluster*)obj)->::MaxCamCluster::Streamer(buf);
   }
} // end of namespace ROOT for class ::MaxCamCluster

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

/********************************************************
* MaxCamClusterCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMaxCamClusterCint();

extern "C" void G__set_cpp_environmentMaxCamClusterCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("MaxCamCluster.hh");
  G__cpp_reset_tagtableMaxCamClusterCint();
}
#include <new>
extern "C" int G__cpp_dllrevMaxCamClusterCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MaxCamCluster */
static int G__MaxCamClusterCint_217_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamCluster[n];
     } else {
       p = new((void*) gvp) MaxCamCluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamCluster;
     } else {
       p = new((void*) gvp) MaxCamCluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamClusterCintLN_MaxCamCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MaxCamCluster(*((vector<int>*) G__int(libp->para[0])), (TH2*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) MaxCamCluster(*((vector<int>*) G__int(libp->para[0])), (TH2*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamClusterCintLN_MaxCamCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamCluster*) G__getstructoffset())->setTime((TDatime*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamCluster*) G__getstructoffset())->getIntegral());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamCluster*) G__getstructoffset())->getLength(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamCluster*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamCluster*) G__getstructoffset())->getXY(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MaxCamCluster*) G__getstructoffset())->isInCluster((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int>* pobj;
         const vector<int> xobj = ((const MaxCamCluster*) G__getstructoffset())->getCluster();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MaxCamCluster*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MaxCamCluster*) G__getstructoffset())->getImage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamCluster*) G__getstructoffset())->changeImage((TH2*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamCluster*) G__getstructoffset())->getEnergyDensity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamCluster*) G__getstructoffset())->getPhi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamCluster*) G__getstructoffset())->getPhi3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamCluster*) G__getstructoffset())->getPhi4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((MaxCamCluster*) G__getstructoffset())->getLength2((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((MaxCamCluster*) G__getstructoffset())->getLength2((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamCluster*) G__getstructoffset())->getSkewness((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MaxCamCluster*) G__getstructoffset())->hitsEdge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamCluster*) G__getstructoffset())->getCygnusAngle((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MaxCamCluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamCluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MaxCamCluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MaxCamCluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamCluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamCluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MaxCamCluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamCluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamClusterCint_217_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MaxCamCluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MaxCamClusterCint_217_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MaxCamCluster* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MaxCamCluster(*(MaxCamCluster*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamClusterCintLN_MaxCamCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MaxCamCluster G__TMaxCamCluster;
static int G__MaxCamClusterCint_217_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MaxCamCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MaxCamCluster*) (soff+(sizeof(MaxCamCluster)*i)))->~G__TMaxCamCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MaxCamCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MaxCamCluster*) (soff))->~G__TMaxCamCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MaxCamClusterCint_217_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamCluster* dest = (MaxCamCluster*) G__getstructoffset();
   *dest = *(MaxCamCluster*) libp->para[0].ref;
   const MaxCamCluster& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MaxCamCluster */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMaxCamClusterCint {
 public:
  G__Sizep2memfuncMaxCamClusterCint(): p(&G__Sizep2memfuncMaxCamClusterCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMaxCamClusterCint::*p)();
};

size_t G__get_sizep2memfuncMaxCamClusterCint()
{
  G__Sizep2memfuncMaxCamClusterCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMaxCamClusterCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MaxCamClusterCintLN_MaxCamCluster))) {
     MaxCamCluster *G__Lderived;
     G__Lderived=(MaxCamCluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamClusterCintLN_MaxCamCluster),G__get_linked_tagnum(&G__MaxCamClusterCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMaxCamClusterCint() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MaxCamClusterCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MaxCamClusterCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__MaxCamClusterCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__MaxCamClusterCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__MaxCamClusterCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__MaxCamClusterCintLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamClusterCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamClusterCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MaxCamCluster */
static void G__setup_memvarMaxCamCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MaxCamClusterCintLN_MaxCamCluster));
   { MaxCamCluster *p; p=(MaxCamCluster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamClusterCintLN_TH2),-1,-1,4,"_image=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MaxCamClusterCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,4,"_pixels=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_nbinsx=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_nbinsy=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_nbins=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_time=",0,"in julian days past the J2000 epoch");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamClusterCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMaxCamClusterCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMaxCamCluster(void) {
   /* MaxCamCluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MaxCamClusterCintLN_MaxCamCluster));
   G__memfunc_setup("MaxCamCluster",1305,G__MaxCamClusterCint_217_0_1, 105, G__get_linked_tagnum(&G__MaxCamClusterCintLN_MaxCamCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxCamCluster",1305,G__MaxCamClusterCint_217_0_2, 105, G__get_linked_tagnum(&G__MaxCamClusterCintLN_MaxCamCluster), -1, 0, 2, 1, 1, 0, 
"u 'vector<int,allocator<int> >' 'vector<int>' 0 - pixels U 'TH2' - 0 - image", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime",731,G__MaxCamClusterCint_217_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TDatime' - 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIntegral",1142,G__MaxCamClusterCint_217_0_4, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLength",930,G__MaxCamClusterCint_217_0_5, 100, -1, -1, 0, 4, 1, 1, 0, 
"d - - 1 - x1 d - - 1 - y1 "
"d - - 1 - x2 d - - 1 - y2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__MaxCamClusterCint_217_0_6, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXY",497,G__MaxCamClusterCint_217_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 1 - x d - - 1 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInCluster",1141,G__MaxCamClusterCint_217_0_8, 103, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCluster",1058,G__MaxCamClusterCint_217_0_9, 117, G__get_linked_tagnum(&G__MaxCamClusterCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__MaxCamClusterCint_217_0_10, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getImage",803,G__MaxCamClusterCint_217_0_11, 85, G__get_linked_tagnum(&G__MaxCamClusterCintLN_TH2), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("changeImage",1097,G__MaxCamClusterCint_217_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TH2' - 0 - newimage", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEnergyDensity",1674,G__MaxCamClusterCint_217_0_13, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi2",659,G__MaxCamClusterCint_217_0_14, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi3",660,G__MaxCamClusterCint_217_0_15, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi4",661,G__MaxCamClusterCint_217_0_16, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLength2",980,G__MaxCamClusterCint_217_0_17, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - theta d - - 0 '1' pixpermm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSkewness",1171,G__MaxCamClusterCint_217_0_18, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hitsEdge",813,G__MaxCamClusterCint_217_0_19, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCygnusAngle",1440,G__MaxCamClusterCint_217_0_20, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - yangN d - - 0 - theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MaxCamClusterCint_217_0_21, 85, G__get_linked_tagnum(&G__MaxCamClusterCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MaxCamCluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MaxCamClusterCint_217_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamCluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MaxCamClusterCint_217_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MaxCamCluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MaxCamClusterCint_217_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MaxCamCluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MaxCamClusterCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MaxCamClusterCint_217_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MaxCamClusterCint_217_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamCluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MaxCamClusterCint_217_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MaxCamCluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MaxCamClusterCint_217_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamCluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MaxCamClusterCint_217_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MaxCamCluster::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MaxCamCluster", 1305, G__MaxCamClusterCint_217_0_33, (int) ('i'), G__get_linked_tagnum(&G__MaxCamClusterCintLN_MaxCamCluster), -1, 0, 1, 1, 1, 0, "u 'MaxCamCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MaxCamCluster", 1431, G__MaxCamClusterCint_217_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MaxCamClusterCint_217_0_35, (int) ('u'), G__get_linked_tagnum(&G__MaxCamClusterCintLN_MaxCamCluster), -1, 1, 1, 1, 1, 0, "u 'MaxCamCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMaxCamClusterCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMaxCamClusterCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMaxCamClusterCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MaxCamClusterCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterCintLN_TH2 = { "TH2" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterCintLN_TDatime = { "TDatime" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterCintLN_MaxCamCluster = { "MaxCamCluster" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterCintLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__MaxCamClusterCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMaxCamClusterCint() {
  G__MaxCamClusterCintLN_TClass.tagnum = -1 ;
  G__MaxCamClusterCintLN_TBuffer.tagnum = -1 ;
  G__MaxCamClusterCintLN_TMemberInspector.tagnum = -1 ;
  G__MaxCamClusterCintLN_TObject.tagnum = -1 ;
  G__MaxCamClusterCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MaxCamClusterCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamClusterCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MaxCamClusterCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamClusterCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__MaxCamClusterCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__MaxCamClusterCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__MaxCamClusterCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__MaxCamClusterCintLN_TH2.tagnum = -1 ;
  G__MaxCamClusterCintLN_TDatime.tagnum = -1 ;
  G__MaxCamClusterCintLN_MaxCamCluster.tagnum = -1 ;
  G__MaxCamClusterCintLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__MaxCamClusterCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMaxCamClusterCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MaxCamClusterCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterCintLN_TH2);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterCintLN_TDatime);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MaxCamClusterCintLN_MaxCamCluster),sizeof(MaxCamCluster),-1,62720,(char*)NULL,G__setup_memvarMaxCamCluster,G__setup_memfuncMaxCamCluster);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterCintLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamClusterCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupMaxCamClusterCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupMaxCamClusterCint()");
  G__set_cpp_environmentMaxCamClusterCint();
  G__cpp_setup_tagtableMaxCamClusterCint();

  G__cpp_setup_inheritanceMaxCamClusterCint();

  G__cpp_setup_typetableMaxCamClusterCint();

  G__cpp_setup_memvarMaxCamClusterCint();

  G__cpp_setup_memfuncMaxCamClusterCint();
  G__cpp_setup_globalMaxCamClusterCint();
  G__cpp_setup_funcMaxCamClusterCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMaxCamClusterCint();
  return;
}
class G__cpp_setup_initMaxCamClusterCint {
  public:
    G__cpp_setup_initMaxCamClusterCint() { G__add_setup_func("MaxCamClusterCint",(G__incsetup)(&G__cpp_setupMaxCamClusterCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMaxCamClusterCint() { G__remove_setup_func("MaxCamClusterCint"); }
};
G__cpp_setup_initMaxCamClusterCint G__cpp_setup_initializerMaxCamClusterCint;

