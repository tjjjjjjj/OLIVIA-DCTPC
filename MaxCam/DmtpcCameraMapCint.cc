//
// File generated by rootcint at Tue Aug  2 13:55:52 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME DmtpcCameraMapCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "DmtpcCameraMapCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void DmtpcCameraMap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DmtpcCameraMap(void *p = 0);
   static void *newArray_DmtpcCameraMap(Long_t size, void *p);
   static void delete_DmtpcCameraMap(void *p);
   static void deleteArray_DmtpcCameraMap(void *p);
   static void destruct_DmtpcCameraMap(void *p);
   static void streamer_DmtpcCameraMap(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::DmtpcCameraMap*)
   {
      ::DmtpcCameraMap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DmtpcCameraMap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DmtpcCameraMap", ::DmtpcCameraMap::Class_Version(), "./DmtpcCameraMap.hh", 19,
                  typeid(::DmtpcCameraMap), DefineBehavior(ptr, ptr),
                  &::DmtpcCameraMap::Dictionary, isa_proxy, 0,
                  sizeof(::DmtpcCameraMap) );
      instance.SetNew(&new_DmtpcCameraMap);
      instance.SetNewArray(&newArray_DmtpcCameraMap);
      instance.SetDelete(&delete_DmtpcCameraMap);
      instance.SetDeleteArray(&deleteArray_DmtpcCameraMap);
      instance.SetDestructor(&destruct_DmtpcCameraMap);
      instance.SetStreamerFunc(&streamer_DmtpcCameraMap);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::DmtpcCameraMap*)
   {
      return GenerateInitInstanceLocal((::DmtpcCameraMap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DmtpcCameraMap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *DmtpcCameraMap::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *DmtpcCameraMap::Class_Name()
{
   return "DmtpcCameraMap";
}

//______________________________________________________________________________
const char *DmtpcCameraMap::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DmtpcCameraMap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DmtpcCameraMap::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DmtpcCameraMap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DmtpcCameraMap::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DmtpcCameraMap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DmtpcCameraMap::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DmtpcCameraMap*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void DmtpcCameraMap::Streamer(TBuffer &R__b)
{
   // Stream an object of class DmtpcCameraMap.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      {
         vector<TString> &R__stl =  _serialNumbers;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  _pads;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TString> &R__stl =  _rotations;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      R__b >> _verbose;
      R__b.CheckByteCount(R__s, R__c, DmtpcCameraMap::IsA());
   } else {
      R__c = R__b.WriteVersion(DmtpcCameraMap::IsA(), kTRUE);
      TObject::Streamer(R__b);
      {
         vector<TString> &R__stl =  _serialNumbers;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TString>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)(*R__k)).Streamer(R__b);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  _pads;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TString> &R__stl =  _rotations;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TString>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)(*R__k)).Streamer(R__b);
            }
         }
      }
      R__b << _verbose;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void DmtpcCameraMap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DmtpcCameraMap.
      TClass *R__cl = ::DmtpcCameraMap::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_serialNumbers", (void*)&_serialNumbers);
      R__insp.InspectMember("vector<TString>", (void*)&_serialNumbers, "_serialNumbers.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pads", (void*)&_pads);
      R__insp.InspectMember("vector<Int_t>", (void*)&_pads, "_pads.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_rotations", (void*)&_rotations);
      R__insp.InspectMember("vector<TString>", (void*)&_rotations, "_rotations.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_verbose", &_verbose);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_DmtpcCameraMap(void *p) {
      return  p ? new(p) ::DmtpcCameraMap : new ::DmtpcCameraMap;
   }
   static void *newArray_DmtpcCameraMap(Long_t nElements, void *p) {
      return p ? new(p) ::DmtpcCameraMap[nElements] : new ::DmtpcCameraMap[nElements];
   }
   // Wrapper around operator delete
   static void delete_DmtpcCameraMap(void *p) {
      delete ((::DmtpcCameraMap*)p);
   }
   static void deleteArray_DmtpcCameraMap(void *p) {
      delete [] ((::DmtpcCameraMap*)p);
   }
   static void destruct_DmtpcCameraMap(void *p) {
      typedef ::DmtpcCameraMap current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_DmtpcCameraMap(TBuffer &buf, void *obj) {
      ((::DmtpcCameraMap*)obj)->::DmtpcCameraMap::Streamer(buf);
   }
} // end of namespace ROOT for class ::DmtpcCameraMap

namespace ROOT {
   void vectorlETStringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETStringgR_Dictionary();
   static void *new_vectorlETStringgR(void *p = 0);
   static void *newArray_vectorlETStringgR(Long_t size, void *p);
   static void delete_vectorlETStringgR(void *p);
   static void deleteArray_vectorlETStringgR(void *p);
   static void destruct_vectorlETStringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TString>*)
   {
      vector<TString> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TString>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TString>", -2, "prec_stl/vector", 49,
                  typeid(vector<TString>), DefineBehavior(ptr, ptr),
                  0, &vectorlETStringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TString>) );
      instance.SetNew(&new_vectorlETStringgR);
      instance.SetNewArray(&newArray_vectorlETStringgR);
      instance.SetDelete(&delete_vectorlETStringgR);
      instance.SetDeleteArray(&deleteArray_vectorlETStringgR);
      instance.SetDestructor(&destruct_vectorlETStringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TString> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TString>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETStringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TString>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETStringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TString> : new vector<TString>;
   }
   static void *newArray_vectorlETStringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TString>[nElements] : new vector<TString>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETStringgR(void *p) {
      delete ((vector<TString>*)p);
   }
   static void deleteArray_vectorlETStringgR(void *p) {
      delete [] ((vector<TString>*)p);
   }
   static void destruct_vectorlETStringgR(void *p) {
      typedef vector<TString> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TString>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

/********************************************************
* DmtpcCameraMapCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableDmtpcCameraMapCint();

extern "C" void G__set_cpp_environmentDmtpcCameraMapCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("DmtpcCameraMap.hh");
  G__cpp_reset_tagtableDmtpcCameraMapCint();
}
#include <new>
extern "C" int G__cpp_dllrevDmtpcCameraMapCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* DmtpcCameraMap */
static int G__DmtpcCameraMapCint_177_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DmtpcCameraMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DmtpcCameraMap[n];
     } else {
       p = new((void*) gvp) DmtpcCameraMap[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DmtpcCameraMap;
     } else {
       p = new((void*) gvp) DmtpcCameraMap;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_DmtpcCameraMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcCameraMapCint_177_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DmtpcCameraMap*) G__getstructoffset())->loadMap(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcCameraMapCint_177_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DmtpcCameraMap*) G__getstructoffset())->addCamera(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcCameraMapCint_177_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((DmtpcCameraMap*) G__getstructoffset())->getPad(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcCameraMapCint_177_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((DmtpcCameraMap*) G__getstructoffset())->getRot(*((TString*) G__int(libp->para[0])));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcCameraMapCint_177_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((DmtpcCameraMap*) G__getstructoffset())->getRotRadians(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcCameraMapCint_177_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((DmtpcCameraMap*) G__getstructoffset())->getIdOfSN(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcCameraMapCint_177_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DmtpcCameraMap*) G__getstructoffset())->setVerbose((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcCameraMapCint_177_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((DmtpcCameraMap*) G__getstructoffset())->getVerbose());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcCameraMapCint_177_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DmtpcCameraMap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcCameraMapCint_177_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DmtpcCameraMap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcCameraMapCint_177_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DmtpcCameraMap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcCameraMapCint_177_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DmtpcCameraMap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcCameraMapCint_177_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DmtpcCameraMap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcCameraMapCint_177_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DmtpcCameraMap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcCameraMapCint_177_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DmtpcCameraMap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcCameraMapCint_177_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DmtpcCameraMap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DmtpcCameraMapCint_177_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DmtpcCameraMap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DmtpcCameraMapCint_177_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DmtpcCameraMap* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DmtpcCameraMap(*(DmtpcCameraMap*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_DmtpcCameraMap));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DmtpcCameraMap G__TDmtpcCameraMap;
static int G__DmtpcCameraMapCint_177_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DmtpcCameraMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DmtpcCameraMap*) (soff+(sizeof(DmtpcCameraMap)*i)))->~G__TDmtpcCameraMap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DmtpcCameraMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DmtpcCameraMap*) (soff))->~G__TDmtpcCameraMap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DmtpcCameraMapCint_177_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DmtpcCameraMap* dest = (DmtpcCameraMap*) G__getstructoffset();
   *dest = *(DmtpcCameraMap*) libp->para[0].ref;
   const DmtpcCameraMap& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* DmtpcCameraMap */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDmtpcCameraMapCint {
 public:
  G__Sizep2memfuncDmtpcCameraMapCint(): p(&G__Sizep2memfuncDmtpcCameraMapCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDmtpcCameraMapCint::*p)();
};

size_t G__get_sizep2memfuncDmtpcCameraMapCint()
{
  G__Sizep2memfuncDmtpcCameraMapCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDmtpcCameraMapCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_DmtpcCameraMap))) {
     DmtpcCameraMap *G__Lderived;
     G__Lderived=(DmtpcCameraMap*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_DmtpcCameraMap),G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDmtpcCameraMapCint() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* DmtpcCameraMap */
static void G__setup_memvarDmtpcCameraMap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_DmtpcCameraMap));
   { DmtpcCameraMap *p; p=(DmtpcCameraMap*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_vectorlETStringcOallocatorlETStringgRsPgR),G__defined_typename("vector<TString>"),-1,4,"_serialNumbers=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"_pads=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_vectorlETStringcOallocatorlETStringgRsPgR),G__defined_typename("vector<TString>"),-1,4,"_rotations=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"_verbose=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDmtpcCameraMapCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncDmtpcCameraMap(void) {
   /* DmtpcCameraMap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_DmtpcCameraMap));
   G__memfunc_setup("DmtpcCameraMap",1375,G__DmtpcCameraMapCint_177_0_1, 105, G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_DmtpcCameraMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("loadMap",702,G__DmtpcCameraMapCint_177_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCamera",882,G__DmtpcCameraMapCint_177_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - serialNumber i - 'Int_t' 0 - pad "
"u 'TString' - 0 - rotationType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPad",597,G__DmtpcCameraMapCint_177_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - sn", "return the pad # for a given serial number", (void*) NULL, 0);
   G__memfunc_setup("getRot",629,G__DmtpcCameraMapCint_177_0_6, 117, G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_TString), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - sn", "return the required rotation for a given sn", (void*) NULL, 0);
   G__memfunc_setup("getRotRadians",1335,G__DmtpcCameraMapCint_177_0_7, 100, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - sn", "return the required rotation for a given sn in radians", (void*) NULL, 0);
   G__memfunc_setup("getIdOfSN",835,G__DmtpcCameraMapCint_177_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - sn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVerbose",1058,G__DmtpcCameraMapCint_177_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVerbose",1046,G__DmtpcCameraMapCint_177_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DmtpcCameraMapCint_177_0_11, 85, G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DmtpcCameraMap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DmtpcCameraMapCint_177_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DmtpcCameraMap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DmtpcCameraMapCint_177_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DmtpcCameraMap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DmtpcCameraMapCint_177_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DmtpcCameraMap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DmtpcCameraMapCint_177_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DmtpcCameraMapCint_177_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DmtpcCameraMap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DmtpcCameraMapCint_177_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DmtpcCameraMap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DmtpcCameraMapCint_177_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DmtpcCameraMap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DmtpcCameraMapCint_177_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DmtpcCameraMap::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("DmtpcCameraMap", 1375, G__DmtpcCameraMapCint_177_0_23, (int) ('i'), G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_DmtpcCameraMap), -1, 0, 1, 1, 1, 0, "u 'DmtpcCameraMap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DmtpcCameraMap", 1501, G__DmtpcCameraMapCint_177_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DmtpcCameraMapCint_177_0_25, (int) ('u'), G__get_linked_tagnum(&G__DmtpcCameraMapCintLN_DmtpcCameraMap), -1, 1, 1, 1, 1, 0, "u 'DmtpcCameraMap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDmtpcCameraMapCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDmtpcCameraMapCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDmtpcCameraMapCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DmtpcCameraMapCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__DmtpcCameraMapCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__DmtpcCameraMapCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__DmtpcCameraMapCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__DmtpcCameraMapCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__DmtpcCameraMapCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcCameraMapCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcCameraMapCintLN_DmtpcCameraMap = { "DmtpcCameraMap" , 99 , -1 };
G__linked_taginfo G__DmtpcCameraMapCintLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DmtpcCameraMapCintLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDmtpcCameraMapCint() {
  G__DmtpcCameraMapCintLN_TClass.tagnum = -1 ;
  G__DmtpcCameraMapCintLN_TBuffer.tagnum = -1 ;
  G__DmtpcCameraMapCintLN_TMemberInspector.tagnum = -1 ;
  G__DmtpcCameraMapCintLN_TObject.tagnum = -1 ;
  G__DmtpcCameraMapCintLN_TString.tagnum = -1 ;
  G__DmtpcCameraMapCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcCameraMapCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcCameraMapCintLN_DmtpcCameraMap.tagnum = -1 ;
  G__DmtpcCameraMapCintLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DmtpcCameraMapCintLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDmtpcCameraMapCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__DmtpcCameraMapCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__DmtpcCameraMapCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__DmtpcCameraMapCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__DmtpcCameraMapCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__DmtpcCameraMapCintLN_TString);
   G__get_linked_tagnum_fwd(&G__DmtpcCameraMapCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcCameraMapCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DmtpcCameraMapCintLN_DmtpcCameraMap),sizeof(DmtpcCameraMap),-1,29952,(char*)NULL,G__setup_memvarDmtpcCameraMap,G__setup_memfuncDmtpcCameraMap);
   G__get_linked_tagnum_fwd(&G__DmtpcCameraMapCintLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DmtpcCameraMapCintLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__DmtpcCameraMapCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupDmtpcCameraMapCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupDmtpcCameraMapCint()");
  G__set_cpp_environmentDmtpcCameraMapCint();
  G__cpp_setup_tagtableDmtpcCameraMapCint();

  G__cpp_setup_inheritanceDmtpcCameraMapCint();

  G__cpp_setup_typetableDmtpcCameraMapCint();

  G__cpp_setup_memvarDmtpcCameraMapCint();

  G__cpp_setup_memfuncDmtpcCameraMapCint();
  G__cpp_setup_globalDmtpcCameraMapCint();
  G__cpp_setup_funcDmtpcCameraMapCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDmtpcCameraMapCint();
  return;
}
class G__cpp_setup_initDmtpcCameraMapCint {
  public:
    G__cpp_setup_initDmtpcCameraMapCint() { G__add_setup_func("DmtpcCameraMapCint",(G__incsetup)(&G__cpp_setupDmtpcCameraMapCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDmtpcCameraMapCint() { G__remove_setup_func("DmtpcCameraMapCint"); }
};
G__cpp_setup_initDmtpcCameraMapCint G__cpp_setup_initializerDmtpcCameraMapCint;

