//
// File generated by rootcint at Tue Aug  2 13:54:26 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME MaxCamVertexCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MaxCamVertexCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MaxCamVertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MaxCamVertex(void *p = 0);
   static void *newArray_MaxCamVertex(Long_t size, void *p);
   static void delete_MaxCamVertex(void *p);
   static void deleteArray_MaxCamVertex(void *p);
   static void destruct_MaxCamVertex(void *p);
   static void streamer_MaxCamVertex(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MaxCamVertex*)
   {
      ::MaxCamVertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MaxCamVertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MaxCamVertex", ::MaxCamVertex::Class_Version(), "./MaxCamVertex.hh", 11,
                  typeid(::MaxCamVertex), DefineBehavior(ptr, ptr),
                  &::MaxCamVertex::Dictionary, isa_proxy, 0,
                  sizeof(::MaxCamVertex) );
      instance.SetNew(&new_MaxCamVertex);
      instance.SetNewArray(&newArray_MaxCamVertex);
      instance.SetDelete(&delete_MaxCamVertex);
      instance.SetDeleteArray(&deleteArray_MaxCamVertex);
      instance.SetDestructor(&destruct_MaxCamVertex);
      instance.SetStreamerFunc(&streamer_MaxCamVertex);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MaxCamVertex*)
   {
      return GenerateInitInstanceLocal((::MaxCamVertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MaxCamVertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *MaxCamVertex::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MaxCamVertex::Class_Name()
{
   return "MaxCamVertex";
}

//______________________________________________________________________________
const char *MaxCamVertex::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MaxCamVertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MaxCamVertex::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MaxCamVertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MaxCamVertex::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MaxCamVertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MaxCamVertex::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MaxCamVertex*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void MaxCamVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class MaxCamVertex.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> _xfit;
      R__b >> _yfit;
      R__b >> _xerr;
      R__b >> _yerr;
      R__b >> _chi2;
      {
         vector<TF1*> &R__stl =  _trackList2D;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TF1));
         if (R__tcl1==0) {
            Error("_trackList2D streamer","Missing the TClass object for TF1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TF1* R__t;
            R__t = (TF1*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, MaxCamVertex::IsA());
   } else {
      R__c = R__b.WriteVersion(MaxCamVertex::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << _xfit;
      R__b << _yfit;
      R__b << _xerr;
      R__b << _yerr;
      R__b << _chi2;
      {
         vector<TF1*> &R__stl =  _trackList2D;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TF1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MaxCamVertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MaxCamVertex.
      TClass *R__cl = ::MaxCamVertex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_xfit", &_xfit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_yfit", &_yfit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_xerr", &_xerr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_yerr", &_yerr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_chi2", &_chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trackList2D", (void*)&_trackList2D);
      R__insp.InspectMember("vector<TF1*>", (void*)&_trackList2D, "_trackList2D.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MaxCamVertex(void *p) {
      return  p ? new(p) ::MaxCamVertex : new ::MaxCamVertex;
   }
   static void *newArray_MaxCamVertex(Long_t nElements, void *p) {
      return p ? new(p) ::MaxCamVertex[nElements] : new ::MaxCamVertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_MaxCamVertex(void *p) {
      delete ((::MaxCamVertex*)p);
   }
   static void deleteArray_MaxCamVertex(void *p) {
      delete [] ((::MaxCamVertex*)p);
   }
   static void destruct_MaxCamVertex(void *p) {
      typedef ::MaxCamVertex current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MaxCamVertex(TBuffer &buf, void *obj) {
      ((::MaxCamVertex*)obj)->::MaxCamVertex::Streamer(buf);
   }
} // end of namespace ROOT for class ::MaxCamVertex

namespace ROOT {
   void vectorlETF1mUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETF1mUgR_Dictionary();
   static void *new_vectorlETF1mUgR(void *p = 0);
   static void *newArray_vectorlETF1mUgR(Long_t size, void *p);
   static void delete_vectorlETF1mUgR(void *p);
   static void deleteArray_vectorlETF1mUgR(void *p);
   static void destruct_vectorlETF1mUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TF1*>*)
   {
      vector<TF1*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TF1*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TF1*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TF1*>), DefineBehavior(ptr, ptr),
                  0, &vectorlETF1mUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TF1*>) );
      instance.SetNew(&new_vectorlETF1mUgR);
      instance.SetNewArray(&newArray_vectorlETF1mUgR);
      instance.SetDelete(&delete_vectorlETF1mUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETF1mUgR);
      instance.SetDestructor(&destruct_vectorlETF1mUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TF1*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TF1*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETF1mUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TF1*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETF1mUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TF1*> : new vector<TF1*>;
   }
   static void *newArray_vectorlETF1mUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TF1*>[nElements] : new vector<TF1*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETF1mUgR(void *p) {
      delete ((vector<TF1*>*)p);
   }
   static void deleteArray_vectorlETF1mUgR(void *p) {
      delete [] ((vector<TF1*>*)p);
   }
   static void destruct_vectorlETF1mUgR(void *p) {
      typedef vector<TF1*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TF1*>

/********************************************************
* MaxCamVertexCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMaxCamVertexCint();

extern "C" void G__set_cpp_environmentMaxCamVertexCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("MaxCamVertex.hh");
  G__cpp_reset_tagtableMaxCamVertexCint();
}
#include <new>
extern "C" int G__cpp_dllrevMaxCamVertexCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MaxCamVertex */
static int G__MaxCamVertexCint_206_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamVertex[n];
     } else {
       p = new((void*) gvp) MaxCamVertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamVertex;
     } else {
       p = new((void*) gvp) MaxCamVertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamVertexCintLN_MaxCamVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamVertexCint_206_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamVertex* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MaxCamVertex(*(MaxCamVertex*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MaxCamVertex(*(MaxCamVertex*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamVertexCintLN_MaxCamVertex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamVertexCint_206_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamVertex*) G__getstructoffset())->addTrack2D((TF1*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamVertexCint_206_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamVertex*) G__getstructoffset())->calcChiSquare2D());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamVertexCint_206_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) MaxCamVertex::distanceSquare2D((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (TF1*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamVertexCint_206_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MaxCamVertex*) G__getstructoffset())->fit2D());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamVertexCint_206_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamVertex*) G__getstructoffset())->getXfit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamVertexCint_206_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamVertex*) G__getstructoffset())->getYfit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamVertexCint_206_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamVertex*) G__getstructoffset())->getXerr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamVertexCint_206_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamVertex*) G__getstructoffset())->getYerr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamVertexCint_206_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MaxCamVertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamVertexCint_206_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamVertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamVertexCint_206_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MaxCamVertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamVertexCint_206_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MaxCamVertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamVertexCint_206_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamVertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamVertexCint_206_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamVertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamVertexCint_206_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MaxCamVertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamVertexCint_206_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamVertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamVertexCint_206_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MaxCamVertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MaxCamVertex G__TMaxCamVertex;
static int G__MaxCamVertexCint_206_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MaxCamVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MaxCamVertex*) (soff+(sizeof(MaxCamVertex)*i)))->~G__TMaxCamVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MaxCamVertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MaxCamVertex*) (soff))->~G__TMaxCamVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MaxCamVertexCint_206_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamVertex* dest = (MaxCamVertex*) G__getstructoffset();
   *dest = *(MaxCamVertex*) libp->para[0].ref;
   const MaxCamVertex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MaxCamVertex */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMaxCamVertexCint {
 public:
  G__Sizep2memfuncMaxCamVertexCint(): p(&G__Sizep2memfuncMaxCamVertexCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMaxCamVertexCint::*p)();
};

size_t G__get_sizep2memfuncMaxCamVertexCint()
{
  G__Sizep2memfuncMaxCamVertexCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMaxCamVertexCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MaxCamVertexCintLN_MaxCamVertex))) {
     MaxCamVertex *G__Lderived;
     G__Lderived=(MaxCamVertex*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamVertexCintLN_MaxCamVertex),G__get_linked_tagnum(&G__MaxCamVertexCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMaxCamVertexCint() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MaxCamVertexCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamVertexCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamVertexCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamVertexCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamVertexCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MaxCamVertexCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamVertexCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamVertexCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamVertexCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamVertexCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__MaxCamVertexCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__MaxCamVertexCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__MaxCamVertexCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__MaxCamVertexCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TF1*>",117,G__get_linked_tagnum(&G__MaxCamVertexCintLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamVertexCintLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamVertexCintLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamVertexCintLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamVertexCintLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MaxCamVertex */
static void G__setup_memvarMaxCamVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MaxCamVertexCintLN_MaxCamVertex));
   { MaxCamVertex *p; p=(MaxCamVertex*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_xfit=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_yfit=",0,"fitted coordinates");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_xerr=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_yerr=",0,"fitted errors");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_chi2=",0,"chi2");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MaxCamVertexCintLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR),G__defined_typename("vector<TF1*>"),-1,4,"_trackList2D=",0,"list of tracks");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamVertexCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMaxCamVertexCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMaxCamVertex(void) {
   /* MaxCamVertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MaxCamVertexCintLN_MaxCamVertex));
   G__memfunc_setup("MaxCamVertex",1205,G__MaxCamVertexCint_206_0_1, 105, G__get_linked_tagnum(&G__MaxCamVertexCintLN_MaxCamVertex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxCamVertex",1205,G__MaxCamVertexCint_206_0_2, 105, G__get_linked_tagnum(&G__MaxCamVertexCintLN_MaxCamVertex), -1, 0, 1, 1, 1, 0, "u 'MaxCamVertex' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTrack2D",916,G__MaxCamVertexCint_206_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TF1' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcChiSquare2D",1422,G__MaxCamVertexCint_206_0_4, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("distanceSquare2D",1586,G__MaxCamVertexCint_206_0_5, 100, -1, -1, 0, 3, 3, 1, 0, 
"d - - 0 - x d - - 0 - y "
"U 'TF1' - 0 - f", (char*)NULL, (void*) G__func2void( (double (*)(double, double, TF1*))(&MaxCamVertex::distanceSquare2D) ), 0);
   G__memfunc_setup("fit2D",441,G__MaxCamVertexCint_206_0_6, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXfit",731,G__MaxCamVertexCint_206_0_7, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYfit",732,G__MaxCamVertexCint_206_0_8, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXerr",737,G__MaxCamVertexCint_206_0_9, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYerr",738,G__MaxCamVertexCint_206_0_10, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MaxCamVertexCint_206_0_11, 85, G__get_linked_tagnum(&G__MaxCamVertexCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MaxCamVertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MaxCamVertexCint_206_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamVertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MaxCamVertexCint_206_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MaxCamVertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MaxCamVertexCint_206_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MaxCamVertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MaxCamVertexCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MaxCamVertexCint_206_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MaxCamVertexCint_206_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamVertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MaxCamVertexCint_206_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MaxCamVertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MaxCamVertexCint_206_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamVertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MaxCamVertexCint_206_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MaxCamVertex::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MaxCamVertex", 1331, G__MaxCamVertexCint_206_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MaxCamVertexCint_206_0_24, (int) ('u'), G__get_linked_tagnum(&G__MaxCamVertexCintLN_MaxCamVertex), -1, 1, 1, 1, 1, 0, "u 'MaxCamVertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMaxCamVertexCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMaxCamVertexCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMaxCamVertexCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MaxCamVertexCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MaxCamVertexCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MaxCamVertexCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MaxCamVertexCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MaxCamVertexCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MaxCamVertexCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamVertexCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MaxCamVertexCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamVertexCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__MaxCamVertexCintLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__MaxCamVertexCintLN_MaxCamVertex = { "MaxCamVertex" , 99 , -1 };
G__linked_taginfo G__MaxCamVertexCintLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR = { "vector<TF1*,allocator<TF1*> >" , 99 , -1 };
G__linked_taginfo G__MaxCamVertexCintLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TF1*,allocator<TF1*> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMaxCamVertexCint() {
  G__MaxCamVertexCintLN_TClass.tagnum = -1 ;
  G__MaxCamVertexCintLN_TBuffer.tagnum = -1 ;
  G__MaxCamVertexCintLN_TMemberInspector.tagnum = -1 ;
  G__MaxCamVertexCintLN_TObject.tagnum = -1 ;
  G__MaxCamVertexCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MaxCamVertexCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamVertexCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MaxCamVertexCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamVertexCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__MaxCamVertexCintLN_TF1.tagnum = -1 ;
  G__MaxCamVertexCintLN_MaxCamVertex.tagnum = -1 ;
  G__MaxCamVertexCintLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR.tagnum = -1 ;
  G__MaxCamVertexCintLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMaxCamVertexCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MaxCamVertexCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__MaxCamVertexCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MaxCamVertexCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MaxCamVertexCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__MaxCamVertexCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamVertexCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamVertexCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamVertexCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamVertexCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__MaxCamVertexCintLN_TF1);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MaxCamVertexCintLN_MaxCamVertex),sizeof(MaxCamVertex),-1,30464,(char*)NULL,G__setup_memvarMaxCamVertex,G__setup_memfuncMaxCamVertex);
   G__get_linked_tagnum_fwd(&G__MaxCamVertexCintLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamVertexCintLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupMaxCamVertexCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupMaxCamVertexCint()");
  G__set_cpp_environmentMaxCamVertexCint();
  G__cpp_setup_tagtableMaxCamVertexCint();

  G__cpp_setup_inheritanceMaxCamVertexCint();

  G__cpp_setup_typetableMaxCamVertexCint();

  G__cpp_setup_memvarMaxCamVertexCint();

  G__cpp_setup_memfuncMaxCamVertexCint();
  G__cpp_setup_globalMaxCamVertexCint();
  G__cpp_setup_funcMaxCamVertexCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMaxCamVertexCint();
  return;
}
class G__cpp_setup_initMaxCamVertexCint {
  public:
    G__cpp_setup_initMaxCamVertexCint() { G__add_setup_func("MaxCamVertexCint",(G__incsetup)(&G__cpp_setupMaxCamVertexCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMaxCamVertexCint() { G__remove_setup_func("MaxCamVertexCint"); }
};
G__cpp_setup_initMaxCamVertexCint G__cpp_setup_initializerMaxCamVertexCint;

