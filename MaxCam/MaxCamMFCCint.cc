//
// File generated by rootcint at Mon Jun  6 11:02:43 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME MaxCamMFCCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MaxCamMFCCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MaxCamMFC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MaxCamMFC(void *p = 0);
   static void *newArray_MaxCamMFC(Long_t size, void *p);
   static void delete_MaxCamMFC(void *p);
   static void deleteArray_MaxCamMFC(void *p);
   static void destruct_MaxCamMFC(void *p);
   static void streamer_MaxCamMFC(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MaxCamMFC*)
   {
      ::MaxCamMFC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MaxCamMFC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MaxCamMFC", ::MaxCamMFC::Class_Version(), "./MaxCamMFC.hh", 20,
                  typeid(::MaxCamMFC), DefineBehavior(ptr, ptr),
                  &::MaxCamMFC::Dictionary, isa_proxy, 0,
                  sizeof(::MaxCamMFC) );
      instance.SetNew(&new_MaxCamMFC);
      instance.SetNewArray(&newArray_MaxCamMFC);
      instance.SetDelete(&delete_MaxCamMFC);
      instance.SetDeleteArray(&deleteArray_MaxCamMFC);
      instance.SetDestructor(&destruct_MaxCamMFC);
      instance.SetStreamerFunc(&streamer_MaxCamMFC);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MaxCamMFC*)
   {
      return GenerateInitInstanceLocal((::MaxCamMFC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MaxCamMFC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *MaxCamMFC::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MaxCamMFC::Class_Name()
{
   return "MaxCamMFC";
}

//______________________________________________________________________________
const char *MaxCamMFC::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MaxCamMFC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MaxCamMFC::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MaxCamMFC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MaxCamMFC::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MaxCamMFC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MaxCamMFC::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MaxCamMFC*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void MaxCamMFC::Streamer(TBuffer &R__b)
{
   // Stream an object of class MaxCamMFC.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> currentFlowRate;
      R__b >> baudRate;
      { TString R__str; R__str.Streamer(R__b); port = R__str.Data(); }
      R__b >> debug;
      R__b >> pause;
      R__b >> rs232;
      R__b.CheckByteCount(R__s, R__c, MaxCamMFC::IsA());
   } else {
      R__c = R__b.WriteVersion(MaxCamMFC::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << currentFlowRate;
      R__b << baudRate;
      { TString R__str = port.c_str(); R__str.Streamer(R__b);}
      R__b << debug;
      R__b << pause;
      R__b << rs232;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MaxCamMFC::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MaxCamMFC.
      TClass *R__cl = ::MaxCamMFC::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "currentFlowRate", &currentFlowRate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "baudRate", &baudRate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "port", (void*)&port);
      R__insp.InspectMember("string", (void*)&port, "port.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "debug", &debug);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pause", &pause);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rs232", &rs232);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MaxCamMFC(void *p) {
      return  p ? new(p) ::MaxCamMFC : new ::MaxCamMFC;
   }
   static void *newArray_MaxCamMFC(Long_t nElements, void *p) {
      return p ? new(p) ::MaxCamMFC[nElements] : new ::MaxCamMFC[nElements];
   }
   // Wrapper around operator delete
   static void delete_MaxCamMFC(void *p) {
      delete ((::MaxCamMFC*)p);
   }
   static void deleteArray_MaxCamMFC(void *p) {
      delete [] ((::MaxCamMFC*)p);
   }
   static void destruct_MaxCamMFC(void *p) {
      typedef ::MaxCamMFC current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MaxCamMFC(TBuffer &buf, void *obj) {
      ((::MaxCamMFC*)obj)->::MaxCamMFC::Streamer(buf);
   }
} // end of namespace ROOT for class ::MaxCamMFC

/********************************************************
* MaxCamMFCCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMaxCamMFCCint();

extern "C" void G__set_cpp_environmentMaxCamMFCCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("MaxCamMFC.hh");
  G__cpp_reset_tagtableMaxCamMFCCint();
}
#include <new>
extern "C" int G__cpp_dllrevMaxCamMFCCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MaxCamMFC */
static int G__MaxCamMFCCint_179_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamMFC* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamMFC[n];
     } else {
       p = new((void*) gvp) MaxCamMFC[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamMFC;
     } else {
       p = new((void*) gvp) MaxCamMFC;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamMFCCintLN_MaxCamMFC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamMFC* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamMFC(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))
, (char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) MaxCamMFC(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), *((string*) G__int(libp->para[3]))
, (char*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamMFC(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), *((string*) G__int(libp->para[3])));
     } else {
       p = new((void*) gvp) MaxCamMFC(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]), *((string*) G__int(libp->para[3])));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamMFC(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MaxCamMFC(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamMFC((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MaxCamMFC((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamMFCCintLN_MaxCamMFC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamMFC* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MaxCamMFC(*(MaxCamMFC*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MaxCamMFC(*(MaxCamMFC*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamMFCCintLN_MaxCamMFC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamMFC*) G__getstructoffset())->flowRate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((MaxCamMFC*) G__getstructoffset())->getBaudRate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamMFC*) G__getstructoffset())->openValve();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamMFC*) G__getstructoffset())->closeValve();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamMFC*) G__getstructoffset())->purgeValve();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamMFC*) G__getstructoffset())->setValve((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamMFC*) G__getstructoffset())->setUnits((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamMFC*) G__getstructoffset())->setGas((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamMFC*) G__getstructoffset())->setSource((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamMFC*) G__getstructoffset())->setOutput((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamMFC*) G__getstructoffset())->setFlowPoint((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamMFC*) G__getstructoffset())->setPause((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MaxCamMFC*) G__getstructoffset())->getFlow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MaxCamMFC*) G__getstructoffset())->queryMFC((char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamMFC*) G__getstructoffset())->printBuffer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamMFC*) G__getstructoffset())->printAsReadable((char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MaxCamMFC*) G__getstructoffset())->CalcCRC((const char*) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MaxCamMFC*) G__getstructoffset())->getVersion();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MaxCamMFC*) G__getstructoffset())->getSerial());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MaxCamMFC*) G__getstructoffset())->getFactor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MaxCamMFC*) G__getstructoffset())->getFlowPoint();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MaxCamMFC*) G__getstructoffset())->getSource());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MaxCamMFC*) G__getstructoffset())->getPassword();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MaxCamMFC*) G__getstructoffset())->getValve());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MaxCamMFC*) G__getstructoffset())->getOutput());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MaxCamMFC*) G__getstructoffset())->getUnits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MaxCamMFC*) G__getstructoffset())->getMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MaxCamMFC*) G__getstructoffset())->getGas());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((MaxCamMFC*) G__getstructoffset())->GetFeedback((char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MaxCamMFC*) G__getstructoffset())->getDebug((bool) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamMFC*) G__getstructoffset())->setDebug((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamMFC*) G__getstructoffset())->Fill((float) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamMFC*) G__getstructoffset())->MySerialWrite((SerialHandle) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MaxCamMFC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamMFC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MaxCamMFC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MaxCamMFC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamMFC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamMFC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MaxCamMFC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamMFC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamMFCCint_179_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MaxCamMFC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MaxCamMFC G__TMaxCamMFC;
static int G__MaxCamMFCCint_179_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MaxCamMFC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MaxCamMFC*) (soff+(sizeof(MaxCamMFC)*i)))->~G__TMaxCamMFC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MaxCamMFC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MaxCamMFC*) (soff))->~G__TMaxCamMFC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MaxCamMFCCint_179_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamMFC* dest = (MaxCamMFC*) G__getstructoffset();
   *dest = *(MaxCamMFC*) libp->para[0].ref;
   const MaxCamMFC& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MaxCamMFC */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMaxCamMFCCint {
 public:
  G__Sizep2memfuncMaxCamMFCCint(): p(&G__Sizep2memfuncMaxCamMFCCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMaxCamMFCCint::*p)();
};

size_t G__get_sizep2memfuncMaxCamMFCCint()
{
  G__Sizep2memfuncMaxCamMFCCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMaxCamMFCCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MaxCamMFCCintLN_MaxCamMFC))) {
     MaxCamMFC *G__Lderived;
     G__Lderived=(MaxCamMFC*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamMFCCintLN_MaxCamMFC),G__get_linked_tagnum(&G__MaxCamMFCCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamMFCCintLN_MaxCamMFC),G__get_linked_tagnum(&G__MaxCamMFCCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMaxCamMFCCint() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MaxCamMFCCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamMFCCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamMFCCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamMFCCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamMFCCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MaxCamMFCCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamMFCCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamMFCCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamMFCCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamMFCCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("SerialHandle",105,-1,0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MaxCamMFC */
static void G__setup_memvarMaxCamMFC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MaxCamMFCCintLN_MaxCamMFC));
   { MaxCamMFC *p; p=(MaxCamMFC*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->currentFlowRate)-(long)(p)),100,0,0,-1,-1,-1,1,"currentFlowRate=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"baudRate=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MaxCamMFCCintLN_string),-1,-1,4,"port=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"debug=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"pause=",0,"how much to pause on send commands");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("SerialHandle"),-1,4,"rs232=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamMFCCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMaxCamMFCCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMaxCamMFC(void) {
   /* MaxCamMFC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MaxCamMFCCintLN_MaxCamMFC));
   G__memfunc_setup("MaxCamMFC",781,G__MaxCamMFCCint_179_0_1, 105, G__get_linked_tagnum(&G__MaxCamMFCCintLN_MaxCamMFC), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxCamMFC",781,G__MaxCamMFCCint_179_0_2, 105, G__get_linked_tagnum(&G__MaxCamMFCCintLN_MaxCamMFC), -1, 0, 5, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 0 '\"/dev/ttyS0\"' port u 'string' - 0 '\"SIERRAC100\"' model "
"C - - 0 '0' dbaccess", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxCamMFC",781,G__MaxCamMFCCint_179_0_3, 105, G__get_linked_tagnum(&G__MaxCamMFCCintLN_MaxCamMFC), -1, 0, 1, 1, 1, 0, "u 'MaxCamMFC' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("flowRate",836,G__MaxCamMFCCint_179_0_4, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBaudRate",1096,G__MaxCamMFCCint_179_0_5, 108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("openValve",944,G__MaxCamMFCCint_179_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("closeValve",1044,G__MaxCamMFCCint_179_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("purgeValve",1057,G__MaxCamMFCCint_179_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setValve",842,G__MaxCamMFCCint_179_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - ii", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUnits",863,G__MaxCamMFCCint_179_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - ii", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGas",615,G__MaxCamMFCCint_179_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - ii", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSource",957,G__MaxCamMFCCint_179_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - ii", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutput",989,G__MaxCamMFCCint_179_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - ii", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlowPoint",1262,G__MaxCamMFCCint_179_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - ff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPause",842,G__MaxCamMFCCint_179_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFlow",728,G__MaxCamMFCCint_179_0_16, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("queryMFC",780,G__MaxCamMFCCint_179_0_17, 117, G__get_linked_tagnum(&G__MaxCamMFCCintLN_string), -1, 0, 2, 1, 1, 0, 
"C - - 0 - c i - - 0 - arglength", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printBuffer",1159,G__MaxCamMFCCint_179_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printAsReadable",1521,G__MaxCamMFCCint_179_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 0 - c i - - 0 - length", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcCRC",587,G__MaxCamMFCCint_179_0_20, 117, G__get_linked_tagnum(&G__MaxCamMFCCintLN_string), -1, 0, 1, 1, 1, 0, "C - - 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVersion",1062,G__MaxCamMFCCint_179_0_21, 117, G__get_linked_tagnum(&G__MaxCamMFCCintLN_string), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSerial",928,G__MaxCamMFCCint_179_0_22, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFactor",927,G__MaxCamMFCCint_179_0_23, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFlowPoint",1250,G__MaxCamMFCCint_179_0_24, 117, G__get_linked_tagnum(&G__MaxCamMFCCintLN_string), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSource",945,G__MaxCamMFCCint_179_0_25, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPassword",1171,G__MaxCamMFCCint_179_0_26, 117, G__get_linked_tagnum(&G__MaxCamMFCCintLN_string), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getValve",830,G__MaxCamMFCCint_179_0_27, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOutput",977,G__MaxCamMFCCint_179_0_28, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUnits",851,G__MaxCamMFCCint_179_0_29, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMax",614,G__MaxCamMFCCint_179_0_30, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGas",603,G__MaxCamMFCCint_179_0_31, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFeedback",1061,G__MaxCamMFCCint_179_0_32, 117, G__get_linked_tagnum(&G__MaxCamMFCCintLN_string), -1, 0, 2, 1, 1, 0, 
"C - - 0 - keyword i - - 0 - arglength", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDebug",807,G__MaxCamMFCCint_179_0_33, 103, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDebug",819,G__MaxCamMFCCint_179_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__MaxCamMFCCint_179_0_35, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - rate i - - 0 - seconds", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MySerialWrite",1329,G__MaxCamMFCCint_179_0_36, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'SerialHandle' 0 - rs232 C - - 0 - sendstring "
"i - - 0 - nbytes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MaxCamMFCCint_179_0_37, 85, G__get_linked_tagnum(&G__MaxCamMFCCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MaxCamMFC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MaxCamMFCCint_179_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamMFC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MaxCamMFCCint_179_0_39, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MaxCamMFC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MaxCamMFCCint_179_0_40, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MaxCamMFC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MaxCamMFCCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MaxCamMFCCint_179_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MaxCamMFCCint_179_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamMFC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MaxCamMFCCint_179_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MaxCamMFC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MaxCamMFCCint_179_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamMFC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MaxCamMFCCint_179_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MaxCamMFC::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MaxCamMFC", 907, G__MaxCamMFCCint_179_0_49, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MaxCamMFCCint_179_0_50, (int) ('u'), G__get_linked_tagnum(&G__MaxCamMFCCintLN_MaxCamMFC), -1, 1, 1, 1, 1, 0, "u 'MaxCamMFC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMaxCamMFCCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMaxCamMFCCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMaxCamMFCCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MaxCamMFCCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MaxCamMFCCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MaxCamMFCCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MaxCamMFCCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MaxCamMFCCintLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__MaxCamMFCCintLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__MaxCamMFCCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MaxCamMFCCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamMFCCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MaxCamMFCCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamMFCCintLN_MaxCamMFC = { "MaxCamMFC" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMaxCamMFCCint() {
  G__MaxCamMFCCintLN_TClass.tagnum = -1 ;
  G__MaxCamMFCCintLN_TBuffer.tagnum = -1 ;
  G__MaxCamMFCCintLN_TMemberInspector.tagnum = -1 ;
  G__MaxCamMFCCintLN_TObject.tagnum = -1 ;
  G__MaxCamMFCCintLN_TNamed.tagnum = -1 ;
  G__MaxCamMFCCintLN_string.tagnum = -1 ;
  G__MaxCamMFCCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MaxCamMFCCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamMFCCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MaxCamMFCCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamMFCCintLN_MaxCamMFC.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMaxCamMFCCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MaxCamMFCCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__MaxCamMFCCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MaxCamMFCCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MaxCamMFCCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__MaxCamMFCCintLN_TNamed);
   G__get_linked_tagnum_fwd(&G__MaxCamMFCCintLN_string);
   G__get_linked_tagnum_fwd(&G__MaxCamMFCCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamMFCCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamMFCCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamMFCCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MaxCamMFCCintLN_MaxCamMFC),sizeof(MaxCamMFC),-1,63232,(char*)NULL,G__setup_memvarMaxCamMFC,G__setup_memfuncMaxCamMFC);
}
extern "C" void G__cpp_setupMaxCamMFCCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupMaxCamMFCCint()");
  G__set_cpp_environmentMaxCamMFCCint();
  G__cpp_setup_tagtableMaxCamMFCCint();

  G__cpp_setup_inheritanceMaxCamMFCCint();

  G__cpp_setup_typetableMaxCamMFCCint();

  G__cpp_setup_memvarMaxCamMFCCint();

  G__cpp_setup_memfuncMaxCamMFCCint();
  G__cpp_setup_globalMaxCamMFCCint();
  G__cpp_setup_funcMaxCamMFCCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMaxCamMFCCint();
  return;
}
class G__cpp_setup_initMaxCamMFCCint {
  public:
    G__cpp_setup_initMaxCamMFCCint() { G__add_setup_func("MaxCamMFCCint",(G__incsetup)(&G__cpp_setupMaxCamMFCCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMaxCamMFCCint() { G__remove_setup_func("MaxCamMFCCint"); }
};
G__cpp_setup_initMaxCamMFCCint G__cpp_setup_initializerMaxCamMFCCint;

