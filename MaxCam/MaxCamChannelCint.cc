//
// File generated by rootcint at Mon Jun  6 11:02:24 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME MaxCamChannelCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MaxCamChannelCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MaxCamChannel_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MaxCamChannel(void *p = 0);
   static void *newArray_MaxCamChannel(Long_t size, void *p);
   static void delete_MaxCamChannel(void *p);
   static void deleteArray_MaxCamChannel(void *p);
   static void destruct_MaxCamChannel(void *p);
   static void streamer_MaxCamChannel(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MaxCamChannel*)
   {
      ::MaxCamChannel *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MaxCamChannel >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MaxCamChannel", ::MaxCamChannel::Class_Version(), "./MaxCamChannel.hh", 37,
                  typeid(::MaxCamChannel), DefineBehavior(ptr, ptr),
                  &::MaxCamChannel::Dictionary, isa_proxy, 0,
                  sizeof(::MaxCamChannel) );
      instance.SetNew(&new_MaxCamChannel);
      instance.SetNewArray(&newArray_MaxCamChannel);
      instance.SetDelete(&delete_MaxCamChannel);
      instance.SetDeleteArray(&deleteArray_MaxCamChannel);
      instance.SetDestructor(&destruct_MaxCamChannel);
      instance.SetStreamerFunc(&streamer_MaxCamChannel);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MaxCamChannel*)
   {
      return GenerateInitInstanceLocal((::MaxCamChannel*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MaxCamChannel*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *MaxCamChannel::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MaxCamChannel::Class_Name()
{
   return "MaxCamChannel";
}

//______________________________________________________________________________
const char *MaxCamChannel::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MaxCamChannel*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MaxCamChannel::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MaxCamChannel*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MaxCamChannel::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MaxCamChannel*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MaxCamChannel::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MaxCamChannel*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void MaxCamChannel::Streamer(TBuffer &R__b)
{
   // Stream an object of class MaxCamChannel.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> currentValue;
      R__b >> currentValueRMS;
      R__b >> setValue;
      R__b >> readID;
      R__b >> writeID;
      R__b >> invertPolarity;
      R__b >> offset_guess_init;
      R__b >> offset_guess;
      R__b.CheckByteCount(R__s, R__c, MaxCamChannel::IsA());
   } else {
      R__c = R__b.WriteVersion(MaxCamChannel::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << currentValue;
      R__b << currentValueRMS;
      R__b << setValue;
      R__b << readID;
      R__b << writeID;
      R__b << invertPolarity;
      R__b << offset_guess_init;
      R__b << offset_guess;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MaxCamChannel::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MaxCamChannel.
      TClass *R__cl = ::MaxCamChannel::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "currentValue", &currentValue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "currentValueRMS", &currentValueRMS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "setValue", &setValue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "readID", &readID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "writeID", &writeID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "invertPolarity", &invertPolarity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cfg", &cfg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*calibrator", &calibrator);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offset_guess_init", &offset_guess_init);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offset_guess", &offset_guess);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hid", (void*)&hid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mutex_comedi", &mutex_comedi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mutex_db", &mutex_db);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mutex_usb", &mutex_usb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mutex_caen", &mutex_caen);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MaxCamChannel(void *p) {
      return  p ? new(p) ::MaxCamChannel : new ::MaxCamChannel;
   }
   static void *newArray_MaxCamChannel(Long_t nElements, void *p) {
      return p ? new(p) ::MaxCamChannel[nElements] : new ::MaxCamChannel[nElements];
   }
   // Wrapper around operator delete
   static void delete_MaxCamChannel(void *p) {
      delete ((::MaxCamChannel*)p);
   }
   static void deleteArray_MaxCamChannel(void *p) {
      delete [] ((::MaxCamChannel*)p);
   }
   static void destruct_MaxCamChannel(void *p) {
      typedef ::MaxCamChannel current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MaxCamChannel(TBuffer &buf, void *obj) {
      ((::MaxCamChannel*)obj)->::MaxCamChannel::Streamer(buf);
   }
} // end of namespace ROOT for class ::MaxCamChannel

/********************************************************
* MaxCamChannelCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMaxCamChannelCint();

extern "C" void G__set_cpp_environmentMaxCamChannelCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("MaxCamChannel.hh");
  G__cpp_reset_tagtableMaxCamChannelCint();
}
#include <new>
extern "C" int G__cpp_dllrevMaxCamChannelCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MaxCamChannel */
static int G__MaxCamChannelCint_248_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamChannel* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamChannel[n];
     } else {
       p = new((void*) gvp) MaxCamChannel[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamChannel;
     } else {
       p = new((void*) gvp) MaxCamChannel;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamChannel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamChannel* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamChannel(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (char*) G__int(libp->para[4]), (bool) G__int(libp->para[5])
, (MAXCAM_HV_TYPE_T) G__int(libp->para[6]));
     } else {
       p = new((void*) gvp) MaxCamChannel(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (char*) G__int(libp->para[4]), (bool) G__int(libp->para[5])
, (MAXCAM_HV_TYPE_T) G__int(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamChannel(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (char*) G__int(libp->para[4]), (bool) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) MaxCamChannel(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (char*) G__int(libp->para[4]), (bool) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamChannel(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) MaxCamChannel(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (char*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamChannel(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MaxCamChannel(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamChannel(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MaxCamChannel(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamChannel((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MaxCamChannel((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamChannel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamChannel* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MaxCamChannel((MaxCamChannelConfig*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MaxCamChannel((MaxCamChannelConfig*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamChannel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamChannel* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MaxCamChannel((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MaxCamChannel((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamChannel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamChannel* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MaxCamChannel(*(MaxCamChannel*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MaxCamChannel(*(MaxCamChannel*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamChannel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((MaxCamChannel*) G__getstructoffset())->readConvectron((char*) G__int(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((MaxCamChannel*) G__getstructoffset())->readConvectron((char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((MaxCamChannel*) G__getstructoffset())->readInficonController((char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (long) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((MaxCamChannel*) G__getstructoffset())->readInficonController((char*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->inficonGetAck((SerialHandle) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((MaxCamChannel*) G__getstructoffset())->readADC((int) G__int(libp->para[0]), (char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((MaxCamChannel*) G__getstructoffset())->readADC((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((MaxCamChannel*) G__getstructoffset())->readADC());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((MaxCamChannel*) G__getstructoffset())->readSerialLVG200TC((char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((MaxCamChannel*) G__getstructoffset())->readSerialLVG200TC());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((MaxCamChannel*) G__getstructoffset())->readSerialInficon((char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((MaxCamChannel*) G__getstructoffset())->readSerialInficon());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 102, (double) ((MaxCamChannel*) G__getstructoffset())->readValueFromDB((const char*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (MY_MYSQL*) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 102, (double) ((MaxCamChannel*) G__getstructoffset())->readValueFromDB((const char*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((MaxCamChannel*) G__getstructoffset())->readValueFromDB((const char*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((MaxCamChannel*) G__getstructoffset())->readFromDB((const char*) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (MY_MYSQL*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MaxCamChannel*) G__getstructoffset())->readFromDB((const char*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MaxCamChannel*) G__getstructoffset())->readFromDB((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MaxCamChannel*) G__getstructoffset())->readFromDB();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->saveValueToDB((const char*) G__int(libp->para[0]), (MY_MYSQL*) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->saveValueToDB((const char*) G__int(libp->para[0]), (MY_MYSQL*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->saveValueToDB((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->saveValueToDB());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->saveValueToDBAndCheck((const char*) G__int(libp->para[0]), (MY_MYSQL*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->saveValueToDBAndCheck((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->saveValueToDBAndCheck());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->setDAC((char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->setDAC());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->cleanOldValues((const char*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->cleanOldValues((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->cleanOldValues());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamChannel*) G__getstructoffset())->val());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamChannel*) G__getstructoffset())->rms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamChannel*) G__getstructoffset())->set());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->setDio((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->ramp((double) G__double(libp->para[0]), (bool) G__int(libp->para[1])
, (bool*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->ramp((double) G__double(libp->para[0]), (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->ramp((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->rampFromDB((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->rampFromDB());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamChannel*) G__getstructoffset())->setInvertPolarity((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MaxCamChannel*) G__getstructoffset())->isPolarityInverted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamChannel*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MaxCamChannel*) G__getstructoffset())->subdevIsAnalogIn((int) G__int(libp->para[0]), (char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MaxCamChannel*) G__getstructoffset())->subdevIsAnalogOut((int) G__int(libp->para[0]), (char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MaxCamChannel*) G__getstructoffset())->setBusy((bool) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MaxCamChannel*) G__getstructoffset())->isBusy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MaxCamChannel*) G__getstructoffset())->getAverage((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MaxCamChannel*) G__getstructoffset())->getConfig());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->rawCAENcmd((const char*) G__int(libp->para[0]), (char**) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (char*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->rawCAENcmd((const char*) G__int(libp->para[0]), (char**) G__int(libp->para[1])
, (float) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((MaxCamChannel*) G__getstructoffset())->rawCAENcmd((const char*) G__int(libp->para[0]), (char**) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamChannel*) G__getstructoffset())->synchronizeComedi((TMutex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamChannel*) G__getstructoffset())->synchronizeDB((TMutex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamChannel*) G__getstructoffset())->synchronizeUSB((TMutex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamChannel*) G__getstructoffset())->synchronizeCAEN((TMutex*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 72, (long) ((MaxCamChannel*) G__getstructoffset())->getMCCPtr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamChannel*) G__getstructoffset())->setMCCPtr((unsigned int*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MaxCamChannel::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamChannel::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MaxCamChannel::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MaxCamChannel::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamChannel*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamChannel::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MaxCamChannel::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamChannel::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamChannelCint_248_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MaxCamChannel::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MaxCamChannel G__TMaxCamChannel;
static int G__MaxCamChannelCint_248_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MaxCamChannel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MaxCamChannel*) (soff+(sizeof(MaxCamChannel)*i)))->~G__TMaxCamChannel();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MaxCamChannel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MaxCamChannel*) (soff))->~G__TMaxCamChannel();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MaxCamChannelCint_248_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamChannel* dest = (MaxCamChannel*) G__getstructoffset();
   *dest = *(MaxCamChannel*) libp->para[0].ref;
   const MaxCamChannel& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MaxCamChannel */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMaxCamChannelCint {
 public:
  G__Sizep2memfuncMaxCamChannelCint(): p(&G__Sizep2memfuncMaxCamChannelCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMaxCamChannelCint::*p)();
};

size_t G__get_sizep2memfuncMaxCamChannelCint()
{
  G__Sizep2memfuncMaxCamChannelCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMaxCamChannelCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamChannel))) {
     MaxCamChannel *G__Lderived;
     G__Lderived=(MaxCamChannel*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamChannel),G__get_linked_tagnum(&G__MaxCamChannelCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamChannel),G__get_linked_tagnum(&G__MaxCamChannelCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMaxCamChannelCint() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MaxCamChannelCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamChannelCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamChannelCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamChannelCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamChannelCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MaxCamChannelCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamChannelCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamChannelCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamChannelCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamChannelCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("SerialHandle",105,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SimpleConfigStore_t>",117,G__get_linked_tagnum(&G__MaxCamChannelCintLN_vectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamChannelCintLN_reverse_iteratorlEvectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamChannelCintLN_vectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamChannelCintLN_reverse_iteratorlEvectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamChannelCintLN_vectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("MAXCAM_HV_TYPE_T",117,G__get_linked_tagnum(&G__MaxCamChannelCintLN_MAXCAM_HV_TYPE_T),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__MaxCamChannelCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__MaxCamChannelCintLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamChannelCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamChannelCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamChannelCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamChannelCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("MY_MYSQL",104,-1,0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MaxCamChannel */
static void G__setup_memvarMaxCamChannel(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamChannel));
   { MaxCamChannel *p; p=(MaxCamChannel*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->currentValue)-(long)(p)),100,0,0,-1,-1,-1,1,"currentValue=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->currentValueRMS)-(long)(p)),100,0,0,-1,-1,-1,1,"currentValueRMS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->setValue)-(long)(p)),100,0,0,-1,-1,-1,1,"setValue=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"readID=",0,"/< channel id for reading");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"writeID=",0,"/< channel id for writing");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"invertPolarity=",0,"</ invert polarity");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamChannelConfig),-1,-1,4,"cfg=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamSoftCal),-1,-1,4,"calibrator=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"offset_guess_init=",0,"/< true if the offset guess has been initialized");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"offset_guess=",0,"/< the current offset gguess");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamChannelcLcL249),-1,-1,4,"hid=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamChannelCintLN_TMutex),-1,-1,4,"mutex_comedi=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamChannelCintLN_TMutex),-1,-1,4,"mutex_db=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamChannelCintLN_TMutex),-1,-1,4,"mutex_usb=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamChannelCintLN_TMutex),-1,-1,4,"mutex_caen=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamChannelCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMaxCamChannelCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMaxCamChannel(void) {
   /* MaxCamChannel */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamChannel));
   G__memfunc_setup("MaxCamChannel",1264,G__MaxCamChannelCint_248_0_1, 105, G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamChannel), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxCamChannel",1264,G__MaxCamChannelCint_248_0_2, 105, G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamChannel), -1, 0, 7, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"i - - 0 '-1' idRead i - - 0 '-1' idWrite "
"C - - 0 '0' dbaccess g - - 0 'false' invert "
"u 'MAXCAM_HV_TYPE_T' 'MAXCAM_HV_TYPE_T' 0 'COMEDI' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxCamChannel",1264,G__MaxCamChannelCint_248_0_3, 105, G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamChannel), -1, 0, 1, 1, 1, 0, "U 'MaxCamChannelConfig' - 0 - cfg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxCamChannel",1264,G__MaxCamChannelCint_248_0_4, 105, G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamChannel), -1, 0, 1, 1, 1, 0, "C - - 10 - config_name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxCamChannel",1264,G__MaxCamChannelCint_248_0_5, 105, G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamChannel), -1, 0, 1, 1, 1, 0, "u 'MaxCamChannel' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readConvectron",1469,G__MaxCamChannelCint_248_0_6, 100, -1, -1, 0, 2, 1, 1, 0, 
"C - - 0 - port_name g - - 0 'false' verbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readInficonController",2182,G__MaxCamChannelCint_248_0_7, 100, -1, -1, 0, 3, 1, 1, 0, 
"C - - 0 - port_name i - - 0 - channel "
"l - - 0 '9600' baudRate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inficonGetAck",1301,G__MaxCamChannelCint_248_0_8, 105, -1, -1, 0, 1, 1, 1, 0, "i - 'SerialHandle' 0 - rs232", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readADC",612,G__MaxCamChannelCint_248_0_9, 100, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 '100' nread C - - 0 'NULL' deviceName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readSerialLVG200TC",1550,G__MaxCamChannelCint_248_0_10, 100, -1, -1, 0, 1, 1, 1, 0, "C - - 0 'NULL' port_name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readSerialInficon",1730,G__MaxCamChannelCint_248_0_11, 100, -1, -1, 0, 1, 1, 1, 0, "C - - 0 'NULL' port_name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readValueFromDB",1459,G__MaxCamChannelCint_248_0_12, 102, -1, -1, 0, 4, 1, 1, 0, 
"C - - 10 - table h - - 0 - ifield "
"g - - 0 'false' doPrint H - 'MY_MYSQL' 0 'NULL' db_handle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readFromDB",950,G__MaxCamChannelCint_248_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 '0' table g - - 0 'false' doPrint "
"H - 'MY_MYSQL' 0 'NULL' db_handle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("saveValueToDB",1269,G__MaxCamChannelCint_248_0_14, 105, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 '0' table H - 'MY_MYSQL' 0 'NULL' db_handle "
"g - - 0 'true' save_set", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("saveValueToDBAndCheck",2022,G__MaxCamChannelCint_248_0_15, 105, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' table H - 'MY_MYSQL' 0 'NULL' db_handle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDAC",532,G__MaxCamChannelCint_248_0_16, 105, -1, -1, 0, 1, 1, 1, 0, "C - - 0 'NULL' deviceName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cleanOldValues",1426,G__MaxCamChannelCint_248_0_17, 105, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' table h - - 0 '100' maxRows", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("val",323,G__MaxCamChannelCint_248_0_18, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rms",338,G__MaxCamChannelCint_248_0_19, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__MaxCamChannelCint_248_0_20, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDio",616,G__MaxCamChannelCint_248_0_21, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ramp",432,G__MaxCamChannelCint_248_0_22, 105, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - newVal g - - 0 'true' checkValue "
"G - - 0 '0' interrupt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rampFromDB",970,G__MaxCamChannelCint_248_0_23, 105, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '0' table", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInvertPolarity",1816,G__MaxCamChannelCint_248_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - invert", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isPolarityInverted",1905,G__MaxCamChannelCint_248_0_25, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MaxCamChannelCint_248_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("subdevIsAnalogIn",1614,G__MaxCamChannelCint_248_0_27, 103, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - subdev C - - 0 - deviceName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("subdevIsAnalogOut",1743,G__MaxCamChannelCint_248_0_28, 103, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - subdev C - - 0 - deviceName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBusy",751,G__MaxCamChannelCint_248_0_29, 103, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - busy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isBusy",639,G__MaxCamChannelCint_248_0_30, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAverage",1019,G__MaxCamChannelCint_248_0_31, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getConfig",918,G__MaxCamChannelCint_248_0_32, 85, G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamChannelConfig), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rawCAENcmd",917,G__MaxCamChannelCint_248_0_33, 105, -1, -1, 0, 4, 1, 1, 0, 
"C - - 10 - cmd C - - 2 - result "
"f - - 0 '0.1' pause C - - 0 'NULL' port_name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("synchronizeComedi",1805,G__MaxCamChannelCint_248_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TMutex' - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("synchronizeDB",1346,G__MaxCamChannelCint_248_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TMutex' - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("synchronizeUSB",1446,G__MaxCamChannelCint_248_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TMutex' - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("synchronizeCAEN",1491,G__MaxCamChannelCint_248_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TMutex' - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMCCPtr",841,G__MaxCamChannelCint_248_0_38, 72, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMCCPtr",853,G__MaxCamChannelCint_248_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "H - - 0 - ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("saveOffsets",1161,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MaxCamChannelCint_248_0_42, 85, G__get_linked_tagnum(&G__MaxCamChannelCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MaxCamChannel::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MaxCamChannelCint_248_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamChannel::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MaxCamChannelCint_248_0_44, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MaxCamChannel::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MaxCamChannelCint_248_0_45, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MaxCamChannel::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MaxCamChannelCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MaxCamChannelCint_248_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MaxCamChannelCint_248_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamChannel::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MaxCamChannelCint_248_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MaxCamChannel::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MaxCamChannelCint_248_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamChannel::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MaxCamChannelCint_248_0_53, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MaxCamChannel::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MaxCamChannel", 1390, G__MaxCamChannelCint_248_0_54, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MaxCamChannelCint_248_0_55, (int) ('u'), G__get_linked_tagnum(&G__MaxCamChannelCintLN_MaxCamChannel), -1, 1, 1, 1, 1, 0, "u 'MaxCamChannel' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMaxCamChannelCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMaxCamChannelCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMaxCamChannelCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MaxCamChannelCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MaxCamChannelCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MaxCamChannelCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MaxCamChannelCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MaxCamChannelCintLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__MaxCamChannelCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__MaxCamChannelCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MaxCamChannelCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamChannelCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MaxCamChannelCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamChannelCintLN_MaxCamSoftCal = { "MaxCamSoftCal" , 99 , -1 };
G__linked_taginfo G__MaxCamChannelCintLN_vectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgR = { "vector<SimpleConfigStore_t,allocator<SimpleConfigStore_t> >" , 99 , -1 };
G__linked_taginfo G__MaxCamChannelCintLN_reverse_iteratorlEvectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SimpleConfigStore_t,allocator<SimpleConfigStore_t> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamChannelCintLN_MAXCAM_HV_TYPE_T = { "MAXCAM_HV_TYPE_T" , 101 , -1 };
G__linked_taginfo G__MaxCamChannelCintLN_MaxCamChannelConfig = { "MaxCamChannelConfig" , 99 , -1 };
G__linked_taginfo G__MaxCamChannelCintLN_TMutex = { "TMutex" , 99 , -1 };
G__linked_taginfo G__MaxCamChannelCintLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__MaxCamChannelCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamChannelCintLN_MaxCamChannel = { "MaxCamChannel" , 99 , -1 };
G__linked_taginfo G__MaxCamChannelCintLN_MaxCamChannelcLcL249 = { "MaxCamChannel::" , 117 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMaxCamChannelCint() {
  G__MaxCamChannelCintLN_TClass.tagnum = -1 ;
  G__MaxCamChannelCintLN_TBuffer.tagnum = -1 ;
  G__MaxCamChannelCintLN_TMemberInspector.tagnum = -1 ;
  G__MaxCamChannelCintLN_TObject.tagnum = -1 ;
  G__MaxCamChannelCintLN_TNamed.tagnum = -1 ;
  G__MaxCamChannelCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__MaxCamChannelCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MaxCamChannelCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamChannelCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MaxCamChannelCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamChannelCintLN_MaxCamSoftCal.tagnum = -1 ;
  G__MaxCamChannelCintLN_vectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgR.tagnum = -1 ;
  G__MaxCamChannelCintLN_reverse_iteratorlEvectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamChannelCintLN_MAXCAM_HV_TYPE_T.tagnum = -1 ;
  G__MaxCamChannelCintLN_MaxCamChannelConfig.tagnum = -1 ;
  G__MaxCamChannelCintLN_TMutex.tagnum = -1 ;
  G__MaxCamChannelCintLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__MaxCamChannelCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamChannelCintLN_MaxCamChannel.tagnum = -1 ;
  G__MaxCamChannelCintLN_MaxCamChannelcLcL249.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMaxCamChannelCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_TNamed);
   G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_MaxCamSoftCal);
   G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_vectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_reverse_iteratorlEvectorlESimpleConfigStore_tcOallocatorlESimpleConfigStore_tgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_MAXCAM_HV_TYPE_T);
   G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_MaxCamChannelConfig);
   G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_TMutex);
   G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_MaxCamChannel),sizeof(MaxCamChannel),-1,63232,(char*)NULL,G__setup_memvarMaxCamChannel,G__setup_memfuncMaxCamChannel);
   G__get_linked_tagnum_fwd(&G__MaxCamChannelCintLN_MaxCamChannelcLcL249);
}
extern "C" void G__cpp_setupMaxCamChannelCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupMaxCamChannelCint()");
  G__set_cpp_environmentMaxCamChannelCint();
  G__cpp_setup_tagtableMaxCamChannelCint();

  G__cpp_setup_inheritanceMaxCamChannelCint();

  G__cpp_setup_typetableMaxCamChannelCint();

  G__cpp_setup_memvarMaxCamChannelCint();

  G__cpp_setup_memfuncMaxCamChannelCint();
  G__cpp_setup_globalMaxCamChannelCint();
  G__cpp_setup_funcMaxCamChannelCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMaxCamChannelCint();
  return;
}
class G__cpp_setup_initMaxCamChannelCint {
  public:
    G__cpp_setup_initMaxCamChannelCint() { G__add_setup_func("MaxCamChannelCint",(G__incsetup)(&G__cpp_setupMaxCamChannelCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMaxCamChannelCint() { G__remove_setup_func("MaxCamChannelCint"); }
};
G__cpp_setup_initMaxCamChannelCint G__cpp_setup_initializerMaxCamChannelCint;

