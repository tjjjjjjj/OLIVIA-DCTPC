//
// File generated by rootcint at Tue Aug  2 13:54:57 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME MaxCamWaveformCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MaxCamWaveformCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MaxCamWaveform_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MaxCamWaveform(void *p = 0);
   static void *newArray_MaxCamWaveform(Long_t size, void *p);
   static void delete_MaxCamWaveform(void *p);
   static void deleteArray_MaxCamWaveform(void *p);
   static void destruct_MaxCamWaveform(void *p);
   static void streamer_MaxCamWaveform(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MaxCamWaveform*)
   {
      ::MaxCamWaveform *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MaxCamWaveform >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MaxCamWaveform", ::MaxCamWaveform::Class_Version(), "./MaxCamWaveform.hh", 16,
                  typeid(::MaxCamWaveform), DefineBehavior(ptr, ptr),
                  &::MaxCamWaveform::Dictionary, isa_proxy, 0,
                  sizeof(::MaxCamWaveform) );
      instance.SetNew(&new_MaxCamWaveform);
      instance.SetNewArray(&newArray_MaxCamWaveform);
      instance.SetDelete(&delete_MaxCamWaveform);
      instance.SetDeleteArray(&deleteArray_MaxCamWaveform);
      instance.SetDestructor(&destruct_MaxCamWaveform);
      instance.SetStreamerFunc(&streamer_MaxCamWaveform);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MaxCamWaveform*)
   {
      return GenerateInitInstanceLocal((::MaxCamWaveform*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MaxCamWaveform*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *MaxCamWaveform::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MaxCamWaveform::Class_Name()
{
   return "MaxCamWaveform";
}

//______________________________________________________________________________
const char *MaxCamWaveform::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MaxCamWaveform*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MaxCamWaveform::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MaxCamWaveform*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MaxCamWaveform::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MaxCamWaveform*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MaxCamWaveform::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MaxCamWaveform*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void MaxCamWaveform::Streamer(TBuffer &R__b)
{
   // Stream an object of class MaxCamWaveform.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> _trigger_group;
      R__b >> _wf;
      _type.Streamer(R__b);
      R__b >> init;
      R__b >> _baseline;
      R__b >> _baselineRMS;
      R__b >> _peakHeight;
      R__b >> _peakHeightTime;
      R__b >> _riseTime;
      R__b >> _fallTime;
      R__b >> _troughDepth;
      R__b >> _wfMinimum;
      R__b >> _peakAveragePosTime;
      R__b >> _peakAverageNegTime;
      R__b.CheckByteCount(R__s, R__c, MaxCamWaveform::IsA());
   } else {
      R__c = R__b.WriteVersion(MaxCamWaveform::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << _trigger_group;
      R__b << (TObject*)_wf;
      _type.Streamer(R__b);
      R__b << init;
      R__b << _baseline;
      R__b << _baselineRMS;
      R__b << _peakHeight;
      R__b << _peakHeightTime;
      R__b << _riseTime;
      R__b << _fallTime;
      R__b << _troughDepth;
      R__b << _wfMinimum;
      R__b << _peakAveragePosTime;
      R__b << _peakAverageNegTime;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void MaxCamWaveform::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MaxCamWaveform.
      TClass *R__cl = ::MaxCamWaveform::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_trigger_group", &_trigger_group);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_wf", &_wf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_type", &_type);
      R__insp.InspectMember(_type, "_type.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "init", &init);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_baseline", &_baseline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_baselineRMS", &_baselineRMS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_peakHeight", &_peakHeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_peakHeightTime", &_peakHeightTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_riseTime", &_riseTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_fallTime", &_fallTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_troughDepth", &_troughDepth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_wfMinimum", &_wfMinimum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_peakAveragePosTime", &_peakAveragePosTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_peakAverageNegTime", &_peakAverageNegTime);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MaxCamWaveform(void *p) {
      return  p ? new(p) ::MaxCamWaveform : new ::MaxCamWaveform;
   }
   static void *newArray_MaxCamWaveform(Long_t nElements, void *p) {
      return p ? new(p) ::MaxCamWaveform[nElements] : new ::MaxCamWaveform[nElements];
   }
   // Wrapper around operator delete
   static void delete_MaxCamWaveform(void *p) {
      delete ((::MaxCamWaveform*)p);
   }
   static void deleteArray_MaxCamWaveform(void *p) {
      delete [] ((::MaxCamWaveform*)p);
   }
   static void destruct_MaxCamWaveform(void *p) {
      typedef ::MaxCamWaveform current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MaxCamWaveform(TBuffer &buf, void *obj) {
      ((::MaxCamWaveform*)obj)->::MaxCamWaveform::Streamer(buf);
   }
} // end of namespace ROOT for class ::MaxCamWaveform

/********************************************************
* MaxCamWaveformCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMaxCamWaveformCint();

extern "C" void G__set_cpp_environmentMaxCamWaveformCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("MaxCamWaveform.hh");
  G__cpp_reset_tagtableMaxCamWaveformCint();
}
#include <new>
extern "C" int G__cpp_dllrevMaxCamWaveformCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MaxCamWaveform */
static int G__MaxCamWaveformCint_239_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamWaveform* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamWaveform[n];
     } else {
       p = new((void*) gvp) MaxCamWaveform[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamWaveform;
     } else {
       p = new((void*) gvp) MaxCamWaveform;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamWaveformCintLN_MaxCamWaveform));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamWaveform* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamWaveform(
(TH1F*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) MaxCamWaveform(
(TH1F*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamWaveform(
(TH1F*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) MaxCamWaveform(
(TH1F*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (bool) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamWaveform(
(TH1F*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (bool) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MaxCamWaveform(
(TH1F*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (bool) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MaxCamWaveform(
(TH1F*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MaxCamWaveform(
(TH1F*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamWaveformCintLN_MaxCamWaveform));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((MaxCamWaveform*) G__getstructoffset())->getType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((MaxCamWaveform*) G__getstructoffset())->getTriggerGroup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MaxCamWaveform*) G__getstructoffset())->getWaveform());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MaxCamWaveform*) G__getstructoffset())->getBaseline());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MaxCamWaveform*) G__getstructoffset())->getBaselineRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MaxCamWaveform*) G__getstructoffset())->getPeakHeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MaxCamWaveform*) G__getstructoffset())->getPeakHeightTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MaxCamWaveform*) G__getstructoffset())->getMinimum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MaxCamWaveform*) G__getstructoffset())->getRiseTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MaxCamWaveform*) G__getstructoffset())->getTroughDepth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MaxCamWaveform*) G__getstructoffset())->getFallTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MaxCamWaveform*) G__getstructoffset())->getWfMinimum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MaxCamWaveform*) G__getstructoffset())->getPeakAveragePosTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MaxCamWaveform*) G__getstructoffset())->getPeakAverageNegTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MaxCamWaveform*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
      break;
   case 0:
      ((MaxCamWaveform*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MaxCamWaveform::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamWaveform::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MaxCamWaveform::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MaxCamWaveform::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MaxCamWaveform*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamWaveform::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MaxCamWaveform::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MaxCamWaveform::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MaxCamWaveformCint_239_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MaxCamWaveform::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MaxCamWaveformCint_239_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MaxCamWaveform* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MaxCamWaveform(*(MaxCamWaveform*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MaxCamWaveformCintLN_MaxCamWaveform));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MaxCamWaveform G__TMaxCamWaveform;
static int G__MaxCamWaveformCint_239_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MaxCamWaveform*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MaxCamWaveform*) (soff+(sizeof(MaxCamWaveform)*i)))->~G__TMaxCamWaveform();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MaxCamWaveform*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MaxCamWaveform*) (soff))->~G__TMaxCamWaveform();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MaxCamWaveformCint_239_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MaxCamWaveform* dest = (MaxCamWaveform*) G__getstructoffset();
   *dest = *(MaxCamWaveform*) libp->para[0].ref;
   const MaxCamWaveform& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MaxCamWaveform */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMaxCamWaveformCint {
 public:
  G__Sizep2memfuncMaxCamWaveformCint(): p(&G__Sizep2memfuncMaxCamWaveformCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMaxCamWaveformCint::*p)();
};

size_t G__get_sizep2memfuncMaxCamWaveformCint()
{
  G__Sizep2memfuncMaxCamWaveformCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMaxCamWaveformCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MaxCamWaveformCintLN_MaxCamWaveform))) {
     MaxCamWaveform *G__Lderived;
     G__Lderived=(MaxCamWaveform*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MaxCamWaveformCintLN_MaxCamWaveform),G__get_linked_tagnum(&G__MaxCamWaveformCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMaxCamWaveformCint() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MaxCamWaveformCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamWaveformCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamWaveformCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamWaveformCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamWaveformCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MaxCamWaveformCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MaxCamWaveformCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamWaveformCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MaxCamWaveformCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MaxCamWaveformCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__MaxCamWaveformCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__MaxCamWaveformCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<MaxCamPulse>",117,G__get_linked_tagnum(&G__MaxCamWaveformCintLN_listlEMaxCamPulsecOallocatorlEMaxCamPulsegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MaxCamWaveform */
static void G__setup_memvarMaxCamWaveform(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MaxCamWaveformCintLN_MaxCamWaveform));
   { MaxCamWaveform *p; p=(MaxCamWaveform*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"_trigger_group=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamWaveformCintLN_TH1F),-1,-1,4,"_wf=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MaxCamWaveformCintLN_TString),-1,-1,4,"_type=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"init=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"_baseline=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"_baselineRMS=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"_peakHeight=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"_peakHeightTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"_riseTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"_fallTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"_troughDepth=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"_wfMinimum=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"_peakAveragePosTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,-1,-1,4,"_peakAverageNegTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MaxCamWaveformCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMaxCamWaveformCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMaxCamWaveform(void) {
   /* MaxCamWaveform */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MaxCamWaveformCintLN_MaxCamWaveform));
   G__memfunc_setup("MaxCamWaveform",1406,G__MaxCamWaveformCint_239_0_1, 105, G__get_linked_tagnum(&G__MaxCamWaveformCintLN_MaxCamWaveform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxCamWaveform",1406,G__MaxCamWaveformCint_239_0_2, 105, G__get_linked_tagnum(&G__MaxCamWaveformCintLN_MaxCamWaveform), -1, 0, 6, 1, 1, 0, 
"U 'TH1F' - 0 - wf h - - 0 - trigger_group "
"C - - 10 - type g - - 0 'false' invert "
"i - - 0 '25' nbaselinebins i - - 0 '1' nrebin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getType",738,G__MaxCamWaveformCint_239_0_3, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTriggerGroup",1569,G__MaxCamWaveformCint_239_0_4, 104, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWaveform",1159,G__MaxCamWaveformCint_239_0_5, 85, G__get_linked_tagnum(&G__MaxCamWaveformCintLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBaseline",1123,G__MaxCamWaveformCint_239_0_6, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBaselineRMS",1365,G__MaxCamWaveformCint_239_0_7, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakHeight",1306,G__MaxCamWaveformCint_239_0_8, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakHeightTime",1705,G__MaxCamWaveformCint_239_0_9, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinimum",1052,G__MaxCamWaveformCint_239_0_10, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRiseTime",1122,G__MaxCamWaveformCint_239_0_11, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTroughDepth",1454,G__MaxCamWaveformCint_239_0_12, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFallTime",1102,G__MaxCamWaveformCint_239_0_13, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWfMinimum",1241,G__MaxCamWaveformCint_239_0_14, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakAveragePosTime",2109,G__MaxCamWaveformCint_239_0_15, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPeakAverageNegTime",2085,G__MaxCamWaveformCint_239_0_16, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__MaxCamWaveformCint_239_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 'std::cout' out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MaxCamWaveformCint_239_0_18, 85, G__get_linked_tagnum(&G__MaxCamWaveformCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MaxCamWaveform::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MaxCamWaveformCint_239_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamWaveform::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MaxCamWaveformCint_239_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MaxCamWaveform::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MaxCamWaveformCint_239_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MaxCamWaveform::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MaxCamWaveformCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MaxCamWaveformCint_239_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MaxCamWaveformCint_239_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamWaveform::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MaxCamWaveformCint_239_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MaxCamWaveform::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MaxCamWaveformCint_239_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MaxCamWaveform::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MaxCamWaveformCint_239_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MaxCamWaveform::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MaxCamWaveform", 1406, G__MaxCamWaveformCint_239_0_30, (int) ('i'), G__get_linked_tagnum(&G__MaxCamWaveformCintLN_MaxCamWaveform), -1, 0, 1, 1, 1, 0, "u 'MaxCamWaveform' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MaxCamWaveform", 1532, G__MaxCamWaveformCint_239_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MaxCamWaveformCint_239_0_32, (int) ('u'), G__get_linked_tagnum(&G__MaxCamWaveformCintLN_MaxCamWaveform), -1, 1, 1, 1, 1, 0, "u 'MaxCamWaveform' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMaxCamWaveformCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMaxCamWaveformCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMaxCamWaveformCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MaxCamWaveformCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MaxCamWaveformCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MaxCamWaveformCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MaxCamWaveformCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MaxCamWaveformCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__MaxCamWaveformCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__MaxCamWaveformCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MaxCamWaveformCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamWaveformCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MaxCamWaveformCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MaxCamWaveformCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__MaxCamWaveformCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__MaxCamWaveformCintLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__MaxCamWaveformCintLN_listlEMaxCamPulsecOallocatorlEMaxCamPulsegRsPgR = { "list<MaxCamPulse,allocator<MaxCamPulse> >" , 99 , -1 };
G__linked_taginfo G__MaxCamWaveformCintLN_MaxCamWaveform = { "MaxCamWaveform" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMaxCamWaveformCint() {
  G__MaxCamWaveformCintLN_TClass.tagnum = -1 ;
  G__MaxCamWaveformCintLN_TBuffer.tagnum = -1 ;
  G__MaxCamWaveformCintLN_TMemberInspector.tagnum = -1 ;
  G__MaxCamWaveformCintLN_TObject.tagnum = -1 ;
  G__MaxCamWaveformCintLN_TString.tagnum = -1 ;
  G__MaxCamWaveformCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__MaxCamWaveformCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MaxCamWaveformCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamWaveformCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MaxCamWaveformCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MaxCamWaveformCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__MaxCamWaveformCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__MaxCamWaveformCintLN_TH1F.tagnum = -1 ;
  G__MaxCamWaveformCintLN_listlEMaxCamPulsecOallocatorlEMaxCamPulsegRsPgR.tagnum = -1 ;
  G__MaxCamWaveformCintLN_MaxCamWaveform.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMaxCamWaveformCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MaxCamWaveformCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__MaxCamWaveformCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MaxCamWaveformCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MaxCamWaveformCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__MaxCamWaveformCintLN_TString);
   G__get_linked_tagnum_fwd(&G__MaxCamWaveformCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamWaveformCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamWaveformCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamWaveformCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MaxCamWaveformCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MaxCamWaveformCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MaxCamWaveformCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MaxCamWaveformCintLN_TH1F);
   G__get_linked_tagnum_fwd(&G__MaxCamWaveformCintLN_listlEMaxCamPulsecOallocatorlEMaxCamPulsegRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MaxCamWaveformCintLN_MaxCamWaveform),sizeof(MaxCamWaveform),-1,62720,(char*)NULL,G__setup_memvarMaxCamWaveform,G__setup_memfuncMaxCamWaveform);
}
extern "C" void G__cpp_setupMaxCamWaveformCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupMaxCamWaveformCint()");
  G__set_cpp_environmentMaxCamWaveformCint();
  G__cpp_setup_tagtableMaxCamWaveformCint();

  G__cpp_setup_inheritanceMaxCamWaveformCint();

  G__cpp_setup_typetableMaxCamWaveformCint();

  G__cpp_setup_memvarMaxCamWaveformCint();

  G__cpp_setup_memfuncMaxCamWaveformCint();
  G__cpp_setup_globalMaxCamWaveformCint();
  G__cpp_setup_funcMaxCamWaveformCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMaxCamWaveformCint();
  return;
}
class G__cpp_setup_initMaxCamWaveformCint {
  public:
    G__cpp_setup_initMaxCamWaveformCint() { G__add_setup_func("MaxCamWaveformCint",(G__incsetup)(&G__cpp_setupMaxCamWaveformCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMaxCamWaveformCint() { G__remove_setup_func("MaxCamWaveformCint"); }
};
G__cpp_setup_initMaxCamWaveformCint G__cpp_setup_initializerMaxCamWaveformCint;

