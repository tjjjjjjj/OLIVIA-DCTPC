#!/usr/bin/perl

use DM;
use GetTime;
use CGI ':standard';
use CGI::Carp qw(fatalsToBrowser);
use Chart::Graph::Gnuplot qw(&gnuplot);

$|=1;

$Chart::Graph::Gnuplot::gnuplot  = "/usr/bin/gnuplot";
$Chart::Graph::Gnuplot::ppmtogif = "/usr/bin/ppmtogif";


print "Content-type:text/html\n\n";

$db_handle = DM->connect
    or die("Could not connect! \n");

$tmpdir="$DM::APACHE_ROOT/$DM::HTMLDIR/tmp";
$url="/tmp";

my $maxTime = GetTime->getTime(0);
my $minTime = GetTime->getTime(6);

my @pdata;
my @perrdata;
my @pset;
my @tsdata;
$np=0;
$sql = "SELECT * FROM wire_hv WHERE timestamp>'$minTime' ORDER BY timestamp ASC";
$statement = $db_handle->prepare($sql) or die "Couldn't prepare query '$sql': $DBI::errstr\n";
$statement->execute() or die "Couldn't execute query '$sql': $DBI::errstr\n";
while ($row_ref = $statement->fetchrow_hashref())
{
  push( @tsdata,   $row_ref->{timestamp});
  push( @pdata,    $row_ref->{value});
  push( @pset,     $row_ref->{setval});
  push( @perrdata, $row_ref->{rms});
  $np++;
}


my @mdata;
my @merrdata;
my @mset;
my @mtsdata;
$nm=0;
$sql = "SELECT * FROM mesh_hv WHERE timestamp<'$maxTime' && timestamp>'$minTime' ORDER BY timestamp";
$statement = $db_handle->prepare($sql) or die "Couldn't prepare query '$sql': $DBI::errstr\n";
$statement->execute() or die "Couldn't execute query '$sql': $DBI::errstr\n";
while ($row_ref = $statement->fetchrow_hashref())
{
  push( @mtsdata,  $row_ref->{timestamp});
  push( @mdata,    $row_ref->{value});
  push( @mset,     $row_ref->{setval});
  push( @merrdata, $row_ref->{rms});
  $nm++;
}
my $count = @pdata;
my $count2 = @mdata;

my $imagename ="hv_tmp";
$imagename.=time(); 

if ($count > 0 || $count2 > 0){

#Drift and Anode voltages found
if ($count == 0){

#Anode only found
   $sql = "SELECT * FROM wire_hv ORDER BY timestamp DESC LIMIT 1";
   $statement = $db_handle->prepare($sql) or die "Couldn't prepare query '$sql': $DBI::errstr\n";
   $statement->execute() or die "Couldn't execute query '$sql': $DBI::errstr\n";
   $row_ref = $statement->fetchrow_hashref();   
   for (my $i = 0; $i <= 1; $i=$i+1){ 
    push( @pdata,    $row_ref->{value});
    push( @pset,     $row_ref->{setval});
    push( @tsdata, $mtsdata[$i*$#mtsdata*$i]);
    push( @perrdata, $row_ref->{rms});
   }

}elsif($count2 == 0){
#Drift only found

   $sql = "SELECT * FROM mesh_hv ORDER BY timestamp DESC LIMIT 1";
   $statement = $db_handle->prepare($sql) or die "Couldn't prepare query '$sql': $DBI::errstr\n";
   $statement->execute() or die "Couldn't execute query '$sql': $DBI::errstr\n";
   $row_ref = $statement->fetchrow_hashref();   
   for (my $i = 0; $i <= 1; $i=$i+1){ 
    push( @mdata,    $row_ref->{value});
    push( @mset,     $row_ref->{setval});
    push( @mtsdata, $tsdata[$i*$#tsdata]);
    push( @merrdata, $row_ref->{rms});
  }


  gnuplot({"title"=>"Chamber HV Chart", "output file"=>"$tmpdir/$imagename.gif", "output type"=>"gif",
	 "x-axis label"=>"Time Stamp", "y-axis label"=>"HV Bias (kV)",
	 "xdata"=>"time", "timefmt"=>"%Y-%m-%d %H:%M:%S",
	 "extra_opts"=>join("\n","set grid")  },
	 [{"title"=>"Anode measured", "style"=>"yerrorbars", "type"=>"columns", "using"=>"1:3:4"}, \@tsdata, \@pdata, \@perrdata  ],
	 [{"title"=>"Anode set", "type"=>"columns", "style"=>"lines", "using"=>"1:3"}, \@tsdata, \@pset  ],
	 [{"title"=>"Drift measured", "style"=>"yerrorbars", "type"=>"columns", "using"=>"1:3:4"}, \@mtsdata, \@mdata, \@merrdata  ],
	 [{"title"=>"Drift set", "type"=>"columns", "style"=>"lines", "using"=>"1:3"}, \@mtsdata, \@mset  ]
       );

  }       
print "$url/$imagename.gif"; 

#print "<p>Current voltages:";
#print " anode = @pdata[$np-1]kV   ";
#print " drift = @mdata[$nm-1]kV <\p";
}else{
print "gfx/norecent.png";
}


